{"ast":null,"code":"'use strict';\n\nvar EventEmitter = require('@algolia/events');\nvar DerivedHelper = require('./DerivedHelper');\nvar escapeFacetValue = require('./functions/escapeFacetValue').escapeFacetValue;\nvar inherits = require('./functions/inherits');\nvar merge = require('./functions/merge');\nvar objectHasKeys = require('./functions/objectHasKeys');\nvar omit = require('./functions/omit');\nvar requestBuilder = require('./requestBuilder');\nvar SearchParameters = require('./SearchParameters');\nvar SearchResults = require('./SearchResults');\nvar version = require('./version');\n\n/**\r\n * Event triggered when a parameter is set or updated\r\n * @event AlgoliaSearchHelper#event:change\r\n * @property {object} event\r\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\r\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\r\n * @example\r\n * helper.on('change', function(event) {\r\n *   console.log('The parameters have changed');\r\n * });\r\n */\n\n/**\r\n * Event triggered when a main search is sent to Algolia\r\n * @event AlgoliaSearchHelper#event:search\r\n * @property {object} event\r\n * @property {SearchParameters} event.state the parameters used for this search\r\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\r\n * @example\r\n * helper.on('search', function(event) {\r\n *   console.log('Search sent');\r\n * });\r\n */\n\n/**\r\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\r\n * @event AlgoliaSearchHelper#event:searchForFacetValues\r\n * @property {object} event\r\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\r\n * @property {string} event.facet the facet searched into\r\n * @property {string} event.query the query used to search in the facets\r\n * @example\r\n * helper.on('searchForFacetValues', function(event) {\r\n *   console.log('searchForFacetValues sent');\r\n * });\r\n */\n\n/**\r\n * Event triggered when a search using `searchOnce` is sent to Algolia\r\n * @event AlgoliaSearchHelper#event:searchOnce\r\n * @property {object} event\r\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\r\n * @example\r\n * helper.on('searchOnce', function(event) {\r\n *   console.log('searchOnce sent');\r\n * });\r\n */\n\n/**\r\n * Event triggered when the results are retrieved from Algolia\r\n * @event AlgoliaSearchHelper#event:result\r\n * @property {object} event\r\n * @property {SearchResults} event.results the results received from Algolia\r\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\r\n * @example\r\n * helper.on('result', function(event) {\r\n *   console.log('Search results received');\r\n * });\r\n */\n\n/**\r\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\r\n * used, the error can be caught using this event.\r\n * @event AlgoliaSearchHelper#event:error\r\n * @property {object} event\r\n * @property {Error} event.error the error returned by the Algolia.\r\n * @example\r\n * helper.on('error', function(event) {\r\n *   console.log('Houston we got a problem.');\r\n * });\r\n */\n\n/**\r\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\r\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\r\n * @example\r\n * helper.on('searchQueueEmpty', function() {\r\n *   console.log('No more search pending');\r\n *   // This is received before the result event if we're not expecting new results\r\n * });\r\n *\r\n * helper.search();\r\n */\n\n/**\r\n * Initialize a new AlgoliaSearchHelper\r\n * @class\r\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\r\n * search. It provides an event based interface for search callbacks:\r\n *  - change: when the internal search state is changed.\r\n *    This event contains a {@link SearchParameters} object and the\r\n *    {@link SearchResults} of the last result if any.\r\n *  - search: when a search is triggered using the `search()` method.\r\n *  - result: when the response is retrieved from Algolia and is processed.\r\n *    This event contains a {@link SearchResults} object and the\r\n *    {@link SearchParameters} corresponding to this answer.\r\n *  - error: when the response is an error. This event contains the error returned by the server.\r\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\r\n * @param  {string} index the index name to query\r\n * @param  {SearchParameters | object} options an object defining the initial\r\n * config of the search. It doesn't have to be a {SearchParameters},\r\n * just an object containing the properties you need from it.\r\n */\nfunction AlgoliaSearchHelper(client, index, options) {\n  if (typeof client.addAlgoliaAgent === 'function') {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.lastResults = null;\n  this._queryId = 0;\n  this._lastQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n}\ninherits(AlgoliaSearchHelper, EventEmitter);\n\n/**\r\n * Start the search with the parameters set in the state. When the\r\n * method is called, it triggers a `search` event. The results will\r\n * be available through the `result` event. If an error occurs, an\r\n * `error` will be fired instead.\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires search\r\n * @fires result\r\n * @fires error\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.search = function () {\n  this._search({\n    onlyWithDerivedHelpers: false\n  });\n  return this;\n};\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function () {\n  this._search({\n    onlyWithDerivedHelpers: true\n  });\n  return this;\n};\n\n/**\r\n * Gets the search query parameters that would be sent to the Algolia Client\r\n * for the hits\r\n * @return {object} Query Parameters\r\n */\nAlgoliaSearchHelper.prototype.getQuery = function () {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n\n/**\r\n * Start a search using a modified version of the current state. This method does\r\n * not trigger the helper lifecycle and does not modify the state kept internally\r\n * by the helper. This second aspect means that the next search call will be the\r\n * same as a search call before calling searchOnce.\r\n * @param {object} options can contain all the parameters that can be set to SearchParameters\r\n * plus the index\r\n * @param {function} [cb] optional callback executed when the response from the\r\n * server is back.\r\n * @return {promise|undefined} if a callback is passed the method returns undefined\r\n * otherwise it returns a promise containing an object with two keys :\r\n *  - content with a SearchResults\r\n *  - state with the state used for the query as a SearchParameters\r\n * @example\r\n * // Changing the number of records returned per page to 1\r\n * // This example uses the callback API\r\n * var state = helper.searchOnce({hitsPerPage: 1},\r\n *   function(error, content, state) {\r\n *     // if an error occurred it will be passed in error, otherwise its value is null\r\n *     // content contains the results formatted as a SearchResults\r\n *     // state is the instance of SearchParameters used for this search\r\n *   });\r\n * @example\r\n * // Changing the number of records returned per page to 1\r\n * // This example uses the promise API\r\n * var state1 = helper.searchOnce({hitsPerPage: 1})\r\n *                 .then(promiseHandler);\r\n *\r\n * function promiseHandler(res) {\r\n *   // res contains\r\n *   // {\r\n *   //   content : SearchResults\r\n *   //   state   : SearchParameters (the one used for this specific search)\r\n *   // }\r\n * }\r\n */\nAlgoliaSearchHelper.prototype.searchOnce = function (options, cb) {\n  var tempState = !options ? this.state : this.state.setQueryParameters(options);\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  this._currentNbQueries++;\n  this.emit('searchOnce', {\n    state: tempState\n  });\n  if (cb) {\n    this.client.search(queries).then(function (content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) {\n        self.emit('searchQueueEmpty');\n      }\n      cb(null, new SearchResults(tempState, content.results), tempState);\n    }).catch(function (err) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) {\n        self.emit('searchQueueEmpty');\n      }\n      cb(err, null, tempState);\n    });\n    return undefined;\n  }\n  return this.client.search(queries).then(function (content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    return {\n      content: new SearchResults(tempState, content.results),\n      state: tempState,\n      _originalResponse: content\n    };\n  }, function (e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n/**\r\n * Start the search for answers with the parameters set in the state.\r\n * This method returns a promise.\r\n * @param {Object} options - the options for answers API call\r\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\r\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\r\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\r\n *\r\n * @return {promise} the answer results\r\n * @deprecated answers is deprecated and will be replaced with new initiatives\r\n */\nAlgoliaSearchHelper.prototype.findAnswers = function (options) {\n  // eslint-disable-next-line no-console\n  console.warn('[algoliasearch-helper] answers is no longer supported');\n  var state = this.state;\n  var derivedHelper = this.derivedHelpers[0];\n  if (!derivedHelper) {\n    return Promise.resolve([]);\n  }\n  var derivedState = derivedHelper.getModifiedState(state);\n  var data = merge({\n    attributesForPrediction: options.attributesForPrediction,\n    nbHits: options.nbHits\n  }, {\n    params: omit(requestBuilder._getHitsSearchParams(derivedState), ['attributesToSnippet', 'hitsPerPage', 'restrictSearchableAttributes', 'snippetEllipsisText'])\n  });\n  var errorMessage = 'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n  if (typeof this.client.initIndex !== 'function') {\n    throw new Error(errorMessage);\n  }\n  var index = this.client.initIndex(derivedState.index);\n  if (typeof index.findAnswers !== 'function') {\n    throw new Error(errorMessage);\n  }\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n\n/**\r\n * Structure of each result when using\r\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\r\n * @typedef FacetSearchHit\r\n * @type {object}\r\n * @property {string} value the facet value\r\n * @property {string} highlighted the facet value highlighted with the query string\r\n * @property {number} count number of occurrence of this facet value\r\n * @property {boolean} isRefined true if the value is already refined\r\n */\n\n/**\r\n * Structure of the data resolved by the\r\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\r\n * promise.\r\n * @typedef FacetSearchResult\r\n * @type {object}\r\n * @property {FacetSearchHit} facetHits the results for this search for facet values\r\n * @property {number} processingTimeMS time taken by the query inside the engine\r\n */\n\n/**\r\n * Search for facet values based on an query and the name of a faceted attribute. This\r\n * triggers a search and will return a promise. On top of using the query, it also sends\r\n * the parameters from the state so that the search is narrowed down to only the possible values.\r\n *\r\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\r\n * @param {string} facet the name of the faceted attribute\r\n * @param {string} query the string query for the search\r\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\r\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\r\n * it in the generated query.\r\n * @return {promise.<FacetSearchResult>} the results of the search\r\n */\nAlgoliaSearchHelper.prototype.searchForFacetValues = function (facet, query, maxFacetHits, userState) {\n  var clientHasSFFV = typeof this.client.searchForFacetValues === 'function';\n  var clientHasInitIndex = typeof this.client.initIndex === 'function';\n  if (!clientHasSFFV && !clientHasInitIndex && typeof this.client.search !== 'function') {\n    throw new Error('search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues');\n  }\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n  this._currentNbQueries++;\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  var searchForFacetValuesPromise;\n  // newer algoliasearch ^3.27.1 - ~4.0.0\n  if (clientHasSFFV) {\n    searchForFacetValuesPromise = this.client.searchForFacetValues([{\n      indexName: state.index,\n      params: algoliaQuery\n    }]);\n    // algoliasearch < 3.27.1\n  } else if (clientHasInitIndex) {\n    searchForFacetValuesPromise = this.client.initIndex(state.index).searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n  } else {\n    // @MAJOR only use client.search\n    delete algoliaQuery.facetName;\n    searchForFacetValuesPromise = this.client.search([{\n      type: 'facet',\n      facet: facet,\n      indexName: state.index,\n      params: algoliaQuery\n    }]).then(function processResponse(response) {\n      return response.results[0];\n    });\n  }\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query\n  });\n  return searchForFacetValuesPromise.then(function addIsRefined(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    content = Array.isArray(content) ? content[0] : content;\n    content.facetHits.forEach(function (f) {\n      f.escapedValue = escapeFacetValue(f.value);\n      f.isRefined = isDisjunctive ? state.isDisjunctiveFacetRefined(facet, f.escapedValue) : state.isFacetRefined(facet, f.escapedValue);\n    });\n    return content;\n  }, function (e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n/**\r\n * Sets the text query used for the search.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} q the user query\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.setQuery = function (q) {\n  this._change({\n    state: this.state.resetPage().setQuery(q),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\r\n * Remove all the types of refinements except tags. A string can be provided to remove\r\n * only the refinements of a specific attribute. For more advanced use case, you can\r\n * provide a function instead. This function should follow the\r\n * [clearCallback definition](#SearchParameters.clearCallback).\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n * @example\r\n * // Removing all the refinements\r\n * helper.clearRefinements().search();\r\n * @example\r\n * // Removing all the filters on a the category attribute.\r\n * helper.clearRefinements('category').search();\r\n * @example\r\n * // Removing only the exclude filters on the category facet.\r\n * helper.clearRefinements(function(value, attribute, type) {\r\n *   return type === 'exclude' && attribute === 'category';\r\n * }).search();\r\n */\nAlgoliaSearchHelper.prototype.clearRefinements = function (name) {\n  this._change({\n    state: this.state.resetPage().clearRefinements(name),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\r\n * Remove all the tag filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.clearTags = function () {\n  this._change({\n    state: this.state.resetPage().clearTags(),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\r\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\r\n * filter is already set, it doesn't change the filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} value the associated value (will be converted to string)\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\r\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function () {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\r\n * Adds a refinement on a hierarchical facet. It will throw\r\n * an exception if the facet is not defined or if the facet\r\n * is already refined.\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} facet the facet name\r\n * @param {string} path the hierarchical facet path\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @throws Error if the facet is not defined or if the facet is refined\r\n * @chainable\r\n * @fires change\r\n */\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function (facet, path) {\n  this._change({\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, path),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\r\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\r\n * filter is already set, it doesn't change the filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} attribute the attribute on which the numeric filter applies\r\n * @param  {string} operator the operator of the filter\r\n * @param  {number} value the value of the filter\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.addNumericRefinement = function (attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().addNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\r\n * Adds a filter to a faceted attribute with the `value` provided. If the\r\n * filter is already set, it doesn't change the filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} value the associated value (will be converted to string)\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.addFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\r\n */\nAlgoliaSearchHelper.prototype.addRefine = function () {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n\n/**\r\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\r\n * filter is already set, it doesn't change the filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} value the associated value (will be converted to string)\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.addFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\r\n */\nAlgoliaSearchHelper.prototype.addExclude = function () {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n\n/**\r\n * Adds a tag filter with the `tag` provided. If the\r\n * filter is already set, it doesn't change the filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} tag the tag to add to the filter\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.addTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().addTagRefinement(tag),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\r\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\r\n * filter is not set, it doesn't change the filters.\r\n *\r\n * Some parameters are optional, triggering different behavior:\r\n *  - if the value is not provided, then all the numeric value will be removed for the\r\n *  specified attribute/operator couple.\r\n *  - if the operator is not provided either, then all the numeric filter on this attribute\r\n *  will be removed.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} attribute the attribute on which the numeric filter applies\r\n * @param  {string} [operator] the operator of the filter\r\n * @param  {number} [value] the value of the filter\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function (attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\r\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\r\n * filter is not set, it doesn't change the filters.\r\n *\r\n * If the value is omitted, then this method will remove all the filters for the\r\n * attribute.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} [value] the associated value\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\r\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function () {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\r\n * Removes the refinement set on a hierarchical facet.\r\n * @param {string} facet the facet name\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @throws Error if the facet is not defined or if the facet is not refined\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function (facet) {\n  this._change({\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\r\n * Removes a filter to a faceted attribute with the `value` provided. If the\r\n * filter is not set, it doesn't change the filters.\r\n *\r\n * If the value is omitted, then this method will remove all the filters for the\r\n * attribute.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} [value] the associated value\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\r\n */\nAlgoliaSearchHelper.prototype.removeRefine = function () {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n\n/**\r\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\r\n * filter is not set, it doesn't change the filters.\r\n *\r\n * If the value is omitted, then this method will remove all the filters for the\r\n * attribute.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} [value] the associated value\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\r\n */\nAlgoliaSearchHelper.prototype.removeExclude = function () {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n\n/**\r\n * Removes a tag filter with the `tag` provided. If the\r\n * filter is not set, it doesn't change the filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} tag tag to remove from the filter\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.removeTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().removeTagRefinement(tag),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\r\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\r\n * the value is set then it removes it, otherwise it adds the filter.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} value the associated value\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\r\n */\nAlgoliaSearchHelper.prototype.toggleExclude = function () {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n\n/**\r\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\r\n * the value is set then it removes it, otherwise it adds the filter.\r\n *\r\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} value the associated value\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\r\n * @fires change\r\n * @chainable\r\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\r\n */\nAlgoliaSearchHelper.prototype.toggleRefinement = function (facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n\n/**\r\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\r\n * the value is set then it removes it, otherwise it adds the filter.\r\n *\r\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} value the associated value\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\r\n */\nAlgoliaSearchHelper.prototype.toggleRefine = function () {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n\n/**\r\n * Adds or removes a tag filter with the `value` provided. If\r\n * the value is set then it removes it, otherwise it adds the filter.\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} tag tag to remove or add\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.toggleTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().toggleTagRefinement(tag),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\r\n * Increments the page number by one.\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n * @example\r\n * helper.setPage(0).nextPage().getPage();\r\n * // returns 1\r\n */\nAlgoliaSearchHelper.prototype.nextPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page + 1);\n};\n\n/**\r\n * Decrements the page number by one.\r\n * @fires change\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @chainable\r\n * @example\r\n * helper.setPage(1).previousPage().getPage();\r\n * // returns 0\r\n */\nAlgoliaSearchHelper.prototype.previousPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page - 1);\n};\n\n/**\r\n * @private\r\n * @param {number} page The page number\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @chainable\r\n * @fires change\r\n */\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n  this._change({\n    state: this.state.setPage(page),\n    isPageReset: false\n  });\n  return this;\n}\n\n/**\r\n * Change the current page\r\n * @deprecated\r\n * @param  {number} page The page number\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n\n/**\r\n * Updates the current page.\r\n * @function\r\n * @param  {number} page The page number\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n\n/**\r\n * Updates the name of the index that will be targeted by the query.\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} name the index name\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.setIndex = function (name) {\n  this._change({\n    state: this.state.resetPage().setIndex(name),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\r\n * Update a parameter of the search. This method reset the page\r\n *\r\n * The complete list of parameters is available on the\r\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\r\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\r\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} parameter name of the parameter to update\r\n * @param {any} value new value of the parameter\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n * @example\r\n * helper.setQueryParameter('hitsPerPage', 20).search();\r\n */\nAlgoliaSearchHelper.prototype.setQueryParameter = function (parameter, value) {\n  this._change({\n    state: this.state.resetPage().setQueryParameter(parameter, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\r\n * Set the whole state (warning: will erase previous state)\r\n * @param {SearchParameters} newState the whole new state\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.setState = function (newState) {\n  this._change({\n    state: SearchParameters.make(newState),\n    isPageReset: false\n  });\n  return this;\n};\n\n/**\r\n * Override the current state without triggering a change event.\r\n * Do not use this method unless you know what you are doing. (see the example\r\n * for a legit use case)\r\n * @param {SearchParameters} newState the whole new state\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @example\r\n *  helper.on('change', function(state){\r\n *    // In this function you might want to find a way to store the state in the url/history\r\n *    updateYourURL(state)\r\n *  })\r\n *  window.onpopstate = function(event){\r\n *    // This is naive though as you should check if the state is really defined etc.\r\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\r\n *  }\r\n * @chainable\r\n */\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function (newState) {\n  this.state = new SearchParameters(newState);\n  return this;\n};\n\n/**\r\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\r\n * @param {string} attribute the name of the attribute\r\n * @return {boolean} true if the attribute is filtered by at least one value\r\n * @example\r\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\r\n * helper.hasRefinements('price'); // false\r\n * helper.addNumericRefinement('price', '>', 100);\r\n * helper.hasRefinements('price'); // true\r\n *\r\n * helper.hasRefinements('color'); // false\r\n * helper.addFacetRefinement('color', 'blue');\r\n * helper.hasRefinements('color'); // true\r\n *\r\n * helper.hasRefinements('material'); // false\r\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\r\n * helper.hasRefinements('material'); // true\r\n *\r\n * helper.hasRefinements('categories'); // false\r\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\r\n * helper.hasRefinements('categories'); // true\r\n *\r\n */\nAlgoliaSearchHelper.prototype.hasRefinements = function (attribute) {\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  }\n\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n  return false;\n};\n\n/**\r\n * Check if a value is excluded for a specific faceted attribute. If the value\r\n * is omitted then the function checks if there is any excluding refinements.\r\n *\r\n * @param  {string}  facet name of the attribute for used for faceting\r\n * @param  {string}  [value] optional value. If passed will test that this value\r\n * is filtering the given facet.\r\n * @return {boolean} true if refined\r\n * @example\r\n * helper.isExcludeRefined('color'); // false\r\n * helper.isExcludeRefined('color', 'blue') // false\r\n * helper.isExcludeRefined('color', 'red') // false\r\n *\r\n * helper.addFacetExclusion('color', 'red');\r\n *\r\n * helper.isExcludeRefined('color'); // true\r\n * helper.isExcludeRefined('color', 'blue') // false\r\n * helper.isExcludeRefined('color', 'red') // true\r\n */\nAlgoliaSearchHelper.prototype.isExcluded = function (facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\r\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\r\n */\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function (facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n\n/**\r\n * Check if the string is a currently filtering tag.\r\n * @param {string} tag tag to check\r\n * @return {boolean} true if the tag is currently refined\r\n */\nAlgoliaSearchHelper.prototype.hasTag = function (tag) {\n  return this.state.isTagRefined(tag);\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\r\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\r\n */\nAlgoliaSearchHelper.prototype.isTagRefined = function () {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n\n/**\r\n * Get the name of the currently used index.\r\n * @return {string} name of the index\r\n * @example\r\n * helper.setIndex('highestPrice_products').getIndex();\r\n * // returns 'highestPrice_products'\r\n */\nAlgoliaSearchHelper.prototype.getIndex = function () {\n  return this.state.index;\n};\nfunction getCurrentPage() {\n  return this.state.page;\n}\n\n/**\r\n * Get the currently selected page\r\n * @deprecated\r\n * @return {number} the current page\r\n */\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\r\n * Get the currently selected page\r\n * @function\r\n * @return {number} the current page\r\n */\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n\n/**\r\n * Get all the tags currently set to filters the results.\r\n *\r\n * @return {string[]} The list of tags currently set.\r\n */\nAlgoliaSearchHelper.prototype.getTags = function () {\n  return this.state.tagRefinements;\n};\n\n/**\r\n * Get the list of refinements for a given attribute. This method works with\r\n * conjunctive, disjunctive, excluding and numerical filters.\r\n *\r\n * See also SearchResults#getRefinements\r\n *\r\n * @param {string} facetName attribute name used for faceting\r\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\r\n * a type. Numeric also contains an operator.\r\n * @example\r\n * helper.addNumericRefinement('price', '>', 100);\r\n * helper.getRefinements('price');\r\n * // [\r\n * //   {\r\n * //     \"value\": [\r\n * //       100\r\n * //     ],\r\n * //     \"operator\": \">\",\r\n * //     \"type\": \"numeric\"\r\n * //   }\r\n * // ]\r\n * @example\r\n * helper.addFacetRefinement('color', 'blue');\r\n * helper.addFacetExclusion('color', 'red');\r\n * helper.getRefinements('color');\r\n * // [\r\n * //   {\r\n * //     \"value\": \"blue\",\r\n * //     \"type\": \"conjunctive\"\r\n * //   },\r\n * //   {\r\n * //     \"value\": \"red\",\r\n * //     \"type\": \"exclude\"\r\n * //   }\r\n * // ]\r\n * @example\r\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\r\n * // [\r\n * //   {\r\n * //     \"value\": \"plastic\",\r\n * //     \"type\": \"disjunctive\"\r\n * //   }\r\n * // ]\r\n */\nAlgoliaSearchHelper.prototype.getRefinements = function (facetName) {\n  var refinements = [];\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n    conjRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive'\n      });\n    });\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n    excludeRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'exclude'\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjunctiveRefinements = this.state.getDisjunctiveRefinements(facetName);\n    disjunctiveRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive'\n      });\n    });\n  }\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n  Object.keys(numericRefinements).forEach(function (operator) {\n    var value = numericRefinements[operator];\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric'\n    });\n  });\n  return refinements;\n};\n\n/**\r\n * Return the current refinement for the (attribute, operator)\r\n * @param {string} attribute attribute in the record\r\n * @param {string} operator operator applied on the refined values\r\n * @return {Array.<number|number[]>} refined values\r\n */\nAlgoliaSearchHelper.prototype.getNumericRefinement = function (attribute, operator) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n\n/**\r\n * Get the current breadcrumb for a hierarchical facet, as an array\r\n * @param  {string} facetName Hierarchical facet name\r\n * @return {array.<string>} the path as an array of string\r\n */\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function (facetName) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n\n// /////////// PRIVATE\n\n/**\r\n * Perform the underlying queries\r\n * @private\r\n * @param {object} options options for the query\r\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\r\n * @return {undefined} does not return anything\r\n * @fires search\r\n * @fires result\r\n * @fires error\r\n */\nAlgoliaSearchHelper.prototype._search = function (options) {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n  if (!options.onlyWithDerivedHelpers) {\n    mainQueries = requestBuilder._getQueries(state.index, state);\n    states.push({\n      state: state,\n      queriesCount: mainQueries.length,\n      helper: this\n    });\n    this.emit('search', {\n      state: state,\n      results: this.lastResults\n    });\n  }\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries = derivedState.index ? requestBuilder._getQueries(derivedState.index, derivedState) : [];\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper\n    });\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults\n    });\n    return derivedStateQueries;\n  });\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n  var queryId = this._queryId++;\n  this._currentNbQueries++;\n  if (!queries.length) {\n    return Promise.resolve({\n      results: []\n    }).then(this._dispatchAlgoliaResponse.bind(this, states, queryId));\n  }\n  try {\n    this.client.search(queries).then(this._dispatchAlgoliaResponse.bind(this, states, queryId)).catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error\n    });\n  }\n  return undefined;\n};\n\n/**\r\n * Transform the responses as sent by the server and transform them into a user\r\n * usable object that merge the results of all the batch requests. It will dispatch\r\n * over the different helper + derived helpers (when there are some).\r\n * @private\r\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>} states state used to generate the request\r\n * @param {number} queryId id of the current request\r\n * @param {object} content content of the response\r\n * @return {undefined}\r\n */\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function (states, queryId, content) {\n  // @TODO remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n  var results = content.results.slice();\n  states.forEach(function (s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n    if (!state.index) {\n      helper.emit('result', {\n        results: null,\n        state: state\n      });\n      return;\n    }\n    helper.lastResults = new SearchResults(state, specificResults);\n    helper.emit('result', {\n      results: helper.lastResults,\n      state: state\n    });\n  });\n};\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function (queryId, error) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n  this.emit('error', {\n    error: error\n  });\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\nAlgoliaSearchHelper.prototype.containsRefinement = function (query, facetFilters, numericFilters, tagFilters) {\n  return query || facetFilters.length !== 0 || numericFilters.length !== 0 || tagFilters.length !== 0;\n};\n\n/**\r\n * Test if there are some disjunctive refinements on the facet\r\n * @private\r\n * @param {string} facet the attribute to test\r\n * @return {boolean} true if there are refinements on this attribute\r\n */\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function (facet) {\n  return this.state.disjunctiveRefinements[facet] && this.state.disjunctiveRefinements[facet].length > 0;\n};\nAlgoliaSearchHelper.prototype._change = function (event) {\n  var state = event.state;\n  var isPageReset = event.isPageReset;\n  if (state !== this.state) {\n    this.state = state;\n    this.emit('change', {\n      state: this.state,\n      results: this.lastResults,\n      isPageReset: isPageReset\n    });\n  }\n};\n\n/**\r\n * Clears the cache of the underlying Algolia client.\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n */\nAlgoliaSearchHelper.prototype.clearCache = function () {\n  if (this.client.clearCache) this.client.clearCache();\n  return this;\n};\n\n/**\r\n * Updates the internal client instance. If the reference of the clients\r\n * are equal then no update is actually done.\r\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n */\nAlgoliaSearchHelper.prototype.setClient = function (newClient) {\n  if (this.client === newClient) return this;\n  if (typeof newClient.addAlgoliaAgent === 'function') {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.client = newClient;\n  return this;\n};\n\n/**\r\n * Gets the instance of the currently used client.\r\n * @return {AlgoliaSearch} the currently used client\r\n */\nAlgoliaSearchHelper.prototype.getClient = function () {\n  return this.client;\n};\n\n/**\r\n * Creates an derived instance of the Helper. A derived helper\r\n * is a way to request other indices synchronised with the lifecycle\r\n * of the main Helper. This mechanism uses the multiqueries feature\r\n * of Algolia to aggregate all the requests in a single network call.\r\n *\r\n * This method takes a function that is used to create a new SearchParameter\r\n * that will be used to create requests to Algolia. Those new requests\r\n * are created just before the `search` event. The signature of the function\r\n * is `SearchParameters -> SearchParameters`.\r\n *\r\n * This method returns a new DerivedHelper which is an EventEmitter\r\n * that fires the same `search`, `result` and `error` events. Those\r\n * events, however, will receive data specific to this DerivedHelper\r\n * and the SearchParameters that is returned by the call of the\r\n * parameter function.\r\n * @param {function} fn SearchParameters -> SearchParameters\r\n * @return {DerivedHelper} a new DerivedHelper\r\n */\nAlgoliaSearchHelper.prototype.derive = function (fn) {\n  var derivedHelper = new DerivedHelper(this, fn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n\n/**\r\n * This method detaches a derived Helper from the main one. Prefer using the one from the\r\n * derived helper itself, to remove the event listeners too.\r\n * @private\r\n * @param  {DerivedHelper} derivedHelper the derived helper to detach\r\n * @return {undefined} nothing is returned\r\n * @throws Error\r\n */\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function (derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n\n/**\r\n * This method returns true if there is currently at least one on-going search.\r\n * @return {boolean} true if there is a search pending\r\n */\nAlgoliaSearchHelper.prototype.hasPendingRequests = function () {\n  return this._currentNbQueries > 0;\n};\n\n/**\r\n * @typedef AlgoliaSearchHelper.NumericRefinement\r\n * @type {object}\r\n * @property {number[]} value the numbers that are used for filtering this attribute with\r\n * the operator specified.\r\n * @property {string} operator the faceting data: value, number of entries\r\n * @property {string} type will be 'numeric'\r\n */\n\n/**\r\n * @typedef AlgoliaSearchHelper.FacetRefinement\r\n * @type {object}\r\n * @property {string} value the string use to filter the attribute\r\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\r\n */\n\nmodule.exports = AlgoliaSearchHelper;","map":{"version":3,"names":["EventEmitter","require","DerivedHelper","escapeFacetValue","inherits","merge","objectHasKeys","omit","requestBuilder","SearchParameters","SearchResults","version","AlgoliaSearchHelper","client","index","options","addAlgoliaAgent","setClient","opts","state","make","lastResults","_queryId","_lastQueryIdReceived","derivedHelpers","_currentNbQueries","prototype","search","_search","onlyWithDerivedHelpers","searchOnlyWithDerivedHelpers","getQuery","_getHitsSearchParams","searchOnce","cb","tempState","setQueryParameters","queries","_getQueries","self","emit","then","content","results","catch","err","undefined","_originalResponse","e","findAnswers","console","warn","derivedHelper","Promise","resolve","derivedState","getModifiedState","data","attributesForPrediction","nbHits","params","errorMessage","initIndex","Error","query","queryLanguages","searchForFacetValues","facet","maxFacetHits","userState","clientHasSFFV","clientHasInitIndex","isDisjunctive","isDisjunctiveFacet","algoliaQuery","getSearchForFacetQuery","searchForFacetValuesPromise","indexName","facetName","type","processResponse","response","addIsRefined","Array","isArray","facetHits","forEach","f","escapedValue","value","isRefined","isDisjunctiveFacetRefined","isFacetRefined","setQuery","q","_change","resetPage","isPageReset","clearRefinements","name","clearTags","addDisjunctiveFacetRefinement","addDisjunctiveRefine","apply","arguments","addHierarchicalFacetRefinement","path","addNumericRefinement","attribute","operator","addFacetRefinement","addRefine","addFacetExclusion","addExcludeRefinement","addExclude","addTag","tag","addTagRefinement","removeNumericRefinement","removeDisjunctiveFacetRefinement","removeDisjunctiveRefine","removeHierarchicalFacetRefinement","removeFacetRefinement","removeRefine","removeFacetExclusion","removeExcludeRefinement","removeExclude","removeTag","removeTagRefinement","toggleFacetExclusion","toggleExcludeFacetRefinement","toggleExclude","toggleRefinement","toggleFacetRefinement","toggleRefine","toggleTag","toggleTagRefinement","nextPage","page","setPage","previousPage","setCurrentPage","setIndex","setQueryParameter","parameter","setState","newState","overrideStateWithoutTriggeringChangeEvent","hasRefinements","getNumericRefinements","isConjunctiveFacet","isHierarchicalFacet","isHierarchicalFacetRefined","isExcluded","isExcludeRefined","isDisjunctiveRefined","hasTag","isTagRefined","hasTagRefinements","getIndex","getCurrentPage","getPage","getTags","tagRefinements","getRefinements","refinements","conjRefinements","getConjunctiveRefinements","r","push","excludeRefinements","getExcludeRefinements","disjunctiveRefinements","getDisjunctiveRefinements","numericRefinements","Object","keys","getNumericRefinement","getHierarchicalFacetBreadcrumb","states","mainQueries","queriesCount","length","helper","derivedQueries","map","derivedStateQueries","concat","queryId","_dispatchAlgoliaResponse","bind","_dispatchAlgoliaError","error","slice","s","specificResults","splice","containsRefinement","facetFilters","numericFilters","tagFilters","_hasDisjunctiveRefinements","event","clearCache","newClient","getClient","derive","fn","detachDerivedHelper","pos","indexOf","hasPendingRequests","module","exports"],"sources":["C:/Users/tudor/propr/RepositoryNetlify/node_modules/react-instantsearch-core/node_modules/algoliasearch-helper/src/algoliasearch.helper.js"],"sourcesContent":["'use strict';\r\n\r\nvar EventEmitter = require('@algolia/events');\r\n\r\nvar DerivedHelper = require('./DerivedHelper');\r\nvar escapeFacetValue = require('./functions/escapeFacetValue').escapeFacetValue;\r\nvar inherits = require('./functions/inherits');\r\nvar merge = require('./functions/merge');\r\nvar objectHasKeys = require('./functions/objectHasKeys');\r\nvar omit = require('./functions/omit');\r\nvar requestBuilder = require('./requestBuilder');\r\nvar SearchParameters = require('./SearchParameters');\r\nvar SearchResults = require('./SearchResults');\r\nvar version = require('./version');\r\n\r\n/**\r\n * Event triggered when a parameter is set or updated\r\n * @event AlgoliaSearchHelper#event:change\r\n * @property {object} event\r\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\r\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\r\n * @example\r\n * helper.on('change', function(event) {\r\n *   console.log('The parameters have changed');\r\n * });\r\n */\r\n\r\n/**\r\n * Event triggered when a main search is sent to Algolia\r\n * @event AlgoliaSearchHelper#event:search\r\n * @property {object} event\r\n * @property {SearchParameters} event.state the parameters used for this search\r\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\r\n * @example\r\n * helper.on('search', function(event) {\r\n *   console.log('Search sent');\r\n * });\r\n */\r\n\r\n/**\r\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\r\n * @event AlgoliaSearchHelper#event:searchForFacetValues\r\n * @property {object} event\r\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\r\n * @property {string} event.facet the facet searched into\r\n * @property {string} event.query the query used to search in the facets\r\n * @example\r\n * helper.on('searchForFacetValues', function(event) {\r\n *   console.log('searchForFacetValues sent');\r\n * });\r\n */\r\n\r\n/**\r\n * Event triggered when a search using `searchOnce` is sent to Algolia\r\n * @event AlgoliaSearchHelper#event:searchOnce\r\n * @property {object} event\r\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\r\n * @example\r\n * helper.on('searchOnce', function(event) {\r\n *   console.log('searchOnce sent');\r\n * });\r\n */\r\n\r\n/**\r\n * Event triggered when the results are retrieved from Algolia\r\n * @event AlgoliaSearchHelper#event:result\r\n * @property {object} event\r\n * @property {SearchResults} event.results the results received from Algolia\r\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\r\n * @example\r\n * helper.on('result', function(event) {\r\n *   console.log('Search results received');\r\n * });\r\n */\r\n\r\n/**\r\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\r\n * used, the error can be caught using this event.\r\n * @event AlgoliaSearchHelper#event:error\r\n * @property {object} event\r\n * @property {Error} event.error the error returned by the Algolia.\r\n * @example\r\n * helper.on('error', function(event) {\r\n *   console.log('Houston we got a problem.');\r\n * });\r\n */\r\n\r\n/**\r\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\r\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\r\n * @example\r\n * helper.on('searchQueueEmpty', function() {\r\n *   console.log('No more search pending');\r\n *   // This is received before the result event if we're not expecting new results\r\n * });\r\n *\r\n * helper.search();\r\n */\r\n\r\n/**\r\n * Initialize a new AlgoliaSearchHelper\r\n * @class\r\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\r\n * search. It provides an event based interface for search callbacks:\r\n *  - change: when the internal search state is changed.\r\n *    This event contains a {@link SearchParameters} object and the\r\n *    {@link SearchResults} of the last result if any.\r\n *  - search: when a search is triggered using the `search()` method.\r\n *  - result: when the response is retrieved from Algolia and is processed.\r\n *    This event contains a {@link SearchResults} object and the\r\n *    {@link SearchParameters} corresponding to this answer.\r\n *  - error: when the response is an error. This event contains the error returned by the server.\r\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\r\n * @param  {string} index the index name to query\r\n * @param  {SearchParameters | object} options an object defining the initial\r\n * config of the search. It doesn't have to be a {SearchParameters},\r\n * just an object containing the properties you need from it.\r\n */\r\nfunction AlgoliaSearchHelper(client, index, options) {\r\n  if (typeof client.addAlgoliaAgent === 'function') {\r\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\r\n  }\r\n\r\n  this.setClient(client);\r\n  var opts = options || {};\r\n  opts.index = index;\r\n  this.state = SearchParameters.make(opts);\r\n  this.lastResults = null;\r\n  this._queryId = 0;\r\n  this._lastQueryIdReceived = -1;\r\n  this.derivedHelpers = [];\r\n  this._currentNbQueries = 0;\r\n}\r\n\r\ninherits(AlgoliaSearchHelper, EventEmitter);\r\n\r\n/**\r\n * Start the search with the parameters set in the state. When the\r\n * method is called, it triggers a `search` event. The results will\r\n * be available through the `result` event. If an error occurs, an\r\n * `error` will be fired instead.\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires search\r\n * @fires result\r\n * @fires error\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.search = function () {\r\n  this._search({ onlyWithDerivedHelpers: false });\r\n  return this;\r\n};\r\n\r\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function () {\r\n  this._search({ onlyWithDerivedHelpers: true });\r\n  return this;\r\n};\r\n\r\n/**\r\n * Gets the search query parameters that would be sent to the Algolia Client\r\n * for the hits\r\n * @return {object} Query Parameters\r\n */\r\nAlgoliaSearchHelper.prototype.getQuery = function () {\r\n  var state = this.state;\r\n  return requestBuilder._getHitsSearchParams(state);\r\n};\r\n\r\n/**\r\n * Start a search using a modified version of the current state. This method does\r\n * not trigger the helper lifecycle and does not modify the state kept internally\r\n * by the helper. This second aspect means that the next search call will be the\r\n * same as a search call before calling searchOnce.\r\n * @param {object} options can contain all the parameters that can be set to SearchParameters\r\n * plus the index\r\n * @param {function} [cb] optional callback executed when the response from the\r\n * server is back.\r\n * @return {promise|undefined} if a callback is passed the method returns undefined\r\n * otherwise it returns a promise containing an object with two keys :\r\n *  - content with a SearchResults\r\n *  - state with the state used for the query as a SearchParameters\r\n * @example\r\n * // Changing the number of records returned per page to 1\r\n * // This example uses the callback API\r\n * var state = helper.searchOnce({hitsPerPage: 1},\r\n *   function(error, content, state) {\r\n *     // if an error occurred it will be passed in error, otherwise its value is null\r\n *     // content contains the results formatted as a SearchResults\r\n *     // state is the instance of SearchParameters used for this search\r\n *   });\r\n * @example\r\n * // Changing the number of records returned per page to 1\r\n * // This example uses the promise API\r\n * var state1 = helper.searchOnce({hitsPerPage: 1})\r\n *                 .then(promiseHandler);\r\n *\r\n * function promiseHandler(res) {\r\n *   // res contains\r\n *   // {\r\n *   //   content : SearchResults\r\n *   //   state   : SearchParameters (the one used for this specific search)\r\n *   // }\r\n * }\r\n */\r\nAlgoliaSearchHelper.prototype.searchOnce = function (options, cb) {\r\n  var tempState = !options\r\n    ? this.state\r\n    : this.state.setQueryParameters(options);\r\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\r\n  // eslint-disable-next-line consistent-this\r\n  var self = this;\r\n\r\n  this._currentNbQueries++;\r\n\r\n  this.emit('searchOnce', {\r\n    state: tempState,\r\n  });\r\n\r\n  if (cb) {\r\n    this.client\r\n      .search(queries)\r\n      .then(function (content) {\r\n        self._currentNbQueries--;\r\n        if (self._currentNbQueries === 0) {\r\n          self.emit('searchQueueEmpty');\r\n        }\r\n\r\n        cb(null, new SearchResults(tempState, content.results), tempState);\r\n      })\r\n      .catch(function (err) {\r\n        self._currentNbQueries--;\r\n        if (self._currentNbQueries === 0) {\r\n          self.emit('searchQueueEmpty');\r\n        }\r\n\r\n        cb(err, null, tempState);\r\n      });\r\n\r\n    return undefined;\r\n  }\r\n\r\n  return this.client.search(queries).then(\r\n    function (content) {\r\n      self._currentNbQueries--;\r\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\r\n      return {\r\n        content: new SearchResults(tempState, content.results),\r\n        state: tempState,\r\n        _originalResponse: content,\r\n      };\r\n    },\r\n    function (e) {\r\n      self._currentNbQueries--;\r\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\r\n      throw e;\r\n    }\r\n  );\r\n};\r\n\r\n/**\r\n * Start the search for answers with the parameters set in the state.\r\n * This method returns a promise.\r\n * @param {Object} options - the options for answers API call\r\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\r\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\r\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\r\n *\r\n * @return {promise} the answer results\r\n * @deprecated answers is deprecated and will be replaced with new initiatives\r\n */\r\nAlgoliaSearchHelper.prototype.findAnswers = function (options) {\r\n  // eslint-disable-next-line no-console\r\n  console.warn('[algoliasearch-helper] answers is no longer supported');\r\n  var state = this.state;\r\n  var derivedHelper = this.derivedHelpers[0];\r\n  if (!derivedHelper) {\r\n    return Promise.resolve([]);\r\n  }\r\n  var derivedState = derivedHelper.getModifiedState(state);\r\n  var data = merge(\r\n    {\r\n      attributesForPrediction: options.attributesForPrediction,\r\n      nbHits: options.nbHits,\r\n    },\r\n    {\r\n      params: omit(requestBuilder._getHitsSearchParams(derivedState), [\r\n        'attributesToSnippet',\r\n        'hitsPerPage',\r\n        'restrictSearchableAttributes',\r\n        'snippetEllipsisText',\r\n      ]),\r\n    }\r\n  );\r\n\r\n  var errorMessage =\r\n    'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\r\n  if (typeof this.client.initIndex !== 'function') {\r\n    throw new Error(errorMessage);\r\n  }\r\n  var index = this.client.initIndex(derivedState.index);\r\n  if (typeof index.findAnswers !== 'function') {\r\n    throw new Error(errorMessage);\r\n  }\r\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\r\n};\r\n\r\n/**\r\n * Structure of each result when using\r\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\r\n * @typedef FacetSearchHit\r\n * @type {object}\r\n * @property {string} value the facet value\r\n * @property {string} highlighted the facet value highlighted with the query string\r\n * @property {number} count number of occurrence of this facet value\r\n * @property {boolean} isRefined true if the value is already refined\r\n */\r\n\r\n/**\r\n * Structure of the data resolved by the\r\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\r\n * promise.\r\n * @typedef FacetSearchResult\r\n * @type {object}\r\n * @property {FacetSearchHit} facetHits the results for this search for facet values\r\n * @property {number} processingTimeMS time taken by the query inside the engine\r\n */\r\n\r\n/**\r\n * Search for facet values based on an query and the name of a faceted attribute. This\r\n * triggers a search and will return a promise. On top of using the query, it also sends\r\n * the parameters from the state so that the search is narrowed down to only the possible values.\r\n *\r\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\r\n * @param {string} facet the name of the faceted attribute\r\n * @param {string} query the string query for the search\r\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\r\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\r\n * it in the generated query.\r\n * @return {promise.<FacetSearchResult>} the results of the search\r\n */\r\nAlgoliaSearchHelper.prototype.searchForFacetValues = function (\r\n  facet,\r\n  query,\r\n  maxFacetHits,\r\n  userState\r\n) {\r\n  var clientHasSFFV = typeof this.client.searchForFacetValues === 'function';\r\n  var clientHasInitIndex = typeof this.client.initIndex === 'function';\r\n  if (\r\n    !clientHasSFFV &&\r\n    !clientHasInitIndex &&\r\n    typeof this.client.search !== 'function'\r\n  ) {\r\n    throw new Error(\r\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues'\r\n    );\r\n  }\r\n\r\n  var state = this.state.setQueryParameters(userState || {});\r\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\r\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(\r\n    facet,\r\n    query,\r\n    maxFacetHits,\r\n    state\r\n  );\r\n\r\n  this._currentNbQueries++;\r\n  // eslint-disable-next-line consistent-this\r\n  var self = this;\r\n  var searchForFacetValuesPromise;\r\n  // newer algoliasearch ^3.27.1 - ~4.0.0\r\n  if (clientHasSFFV) {\r\n    searchForFacetValuesPromise = this.client.searchForFacetValues([\r\n      { indexName: state.index, params: algoliaQuery },\r\n    ]);\r\n    // algoliasearch < 3.27.1\r\n  } else if (clientHasInitIndex) {\r\n    searchForFacetValuesPromise = this.client\r\n      .initIndex(state.index)\r\n      .searchForFacetValues(algoliaQuery);\r\n    // algoliasearch ~5.0.0\r\n  } else {\r\n    // @MAJOR only use client.search\r\n    delete algoliaQuery.facetName;\r\n    searchForFacetValuesPromise = this.client\r\n      .search([\r\n        {\r\n          type: 'facet',\r\n          facet: facet,\r\n          indexName: state.index,\r\n          params: algoliaQuery,\r\n        },\r\n      ])\r\n      .then(function processResponse(response) {\r\n        return response.results[0];\r\n      });\r\n  }\r\n\r\n  this.emit('searchForFacetValues', {\r\n    state: state,\r\n    facet: facet,\r\n    query: query,\r\n  });\r\n\r\n  return searchForFacetValuesPromise.then(\r\n    function addIsRefined(content) {\r\n      self._currentNbQueries--;\r\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\r\n\r\n      content = Array.isArray(content) ? content[0] : content;\r\n\r\n      content.facetHits.forEach(function (f) {\r\n        f.escapedValue = escapeFacetValue(f.value);\r\n        f.isRefined = isDisjunctive\r\n          ? state.isDisjunctiveFacetRefined(facet, f.escapedValue)\r\n          : state.isFacetRefined(facet, f.escapedValue);\r\n      });\r\n\r\n      return content;\r\n    },\r\n    function (e) {\r\n      self._currentNbQueries--;\r\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\r\n      throw e;\r\n    }\r\n  );\r\n};\r\n\r\n/**\r\n * Sets the text query used for the search.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} q the user query\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.setQuery = function (q) {\r\n  this._change({\r\n    state: this.state.resetPage().setQuery(q),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove all the types of refinements except tags. A string can be provided to remove\r\n * only the refinements of a specific attribute. For more advanced use case, you can\r\n * provide a function instead. This function should follow the\r\n * [clearCallback definition](#SearchParameters.clearCallback).\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n * @example\r\n * // Removing all the refinements\r\n * helper.clearRefinements().search();\r\n * @example\r\n * // Removing all the filters on a the category attribute.\r\n * helper.clearRefinements('category').search();\r\n * @example\r\n * // Removing only the exclude filters on the category facet.\r\n * helper.clearRefinements(function(value, attribute, type) {\r\n *   return type === 'exclude' && attribute === 'category';\r\n * }).search();\r\n */\r\nAlgoliaSearchHelper.prototype.clearRefinements = function (name) {\r\n  this._change({\r\n    state: this.state.resetPage().clearRefinements(name),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove all the tag filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.clearTags = function () {\r\n  this._change({\r\n    state: this.state.resetPage().clearTags(),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\r\n * filter is already set, it doesn't change the filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} value the associated value (will be converted to string)\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function (\r\n  facet,\r\n  value\r\n) {\r\n  this._change({\r\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n// eslint-disable-next-line valid-jsdoc\r\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\r\n */\r\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function () {\r\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * Adds a refinement on a hierarchical facet. It will throw\r\n * an exception if the facet is not defined or if the facet\r\n * is already refined.\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} facet the facet name\r\n * @param {string} path the hierarchical facet path\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @throws Error if the facet is not defined or if the facet is refined\r\n * @chainable\r\n * @fires change\r\n */\r\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function (\r\n  facet,\r\n  path\r\n) {\r\n  this._change({\r\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, path),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\r\n * filter is already set, it doesn't change the filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} attribute the attribute on which the numeric filter applies\r\n * @param  {string} operator the operator of the filter\r\n * @param  {number} value the value of the filter\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.addNumericRefinement = function (\r\n  attribute,\r\n  operator,\r\n  value\r\n) {\r\n  this._change({\r\n    state: this.state\r\n      .resetPage()\r\n      .addNumericRefinement(attribute, operator, value),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds a filter to a faceted attribute with the `value` provided. If the\r\n * filter is already set, it doesn't change the filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} value the associated value (will be converted to string)\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.addFacetRefinement = function (facet, value) {\r\n  this._change({\r\n    state: this.state.resetPage().addFacetRefinement(facet, value),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n// eslint-disable-next-line valid-jsdoc\r\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\r\n */\r\nAlgoliaSearchHelper.prototype.addRefine = function () {\r\n  return this.addFacetRefinement.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\r\n * filter is already set, it doesn't change the filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} value the associated value (will be converted to string)\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.addFacetExclusion = function (facet, value) {\r\n  this._change({\r\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n// eslint-disable-next-line valid-jsdoc\r\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\r\n */\r\nAlgoliaSearchHelper.prototype.addExclude = function () {\r\n  return this.addFacetExclusion.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * Adds a tag filter with the `tag` provided. If the\r\n * filter is already set, it doesn't change the filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} tag the tag to add to the filter\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.addTag = function (tag) {\r\n  this._change({\r\n    state: this.state.resetPage().addTagRefinement(tag),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\r\n * filter is not set, it doesn't change the filters.\r\n *\r\n * Some parameters are optional, triggering different behavior:\r\n *  - if the value is not provided, then all the numeric value will be removed for the\r\n *  specified attribute/operator couple.\r\n *  - if the operator is not provided either, then all the numeric filter on this attribute\r\n *  will be removed.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} attribute the attribute on which the numeric filter applies\r\n * @param  {string} [operator] the operator of the filter\r\n * @param  {number} [value] the value of the filter\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function (\r\n  attribute,\r\n  operator,\r\n  value\r\n) {\r\n  this._change({\r\n    state: this.state\r\n      .resetPage()\r\n      .removeNumericRefinement(attribute, operator, value),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\r\n * filter is not set, it doesn't change the filters.\r\n *\r\n * If the value is omitted, then this method will remove all the filters for the\r\n * attribute.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} [value] the associated value\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function (\r\n  facet,\r\n  value\r\n) {\r\n  this._change({\r\n    state: this.state\r\n      .resetPage()\r\n      .removeDisjunctiveFacetRefinement(facet, value),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n// eslint-disable-next-line valid-jsdoc\r\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\r\n */\r\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function () {\r\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * Removes the refinement set on a hierarchical facet.\r\n * @param {string} facet the facet name\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @throws Error if the facet is not defined or if the facet is not refined\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function (\r\n  facet\r\n) {\r\n  this._change({\r\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Removes a filter to a faceted attribute with the `value` provided. If the\r\n * filter is not set, it doesn't change the filters.\r\n *\r\n * If the value is omitted, then this method will remove all the filters for the\r\n * attribute.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} [value] the associated value\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function (facet, value) {\r\n  this._change({\r\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n// eslint-disable-next-line valid-jsdoc\r\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\r\n */\r\nAlgoliaSearchHelper.prototype.removeRefine = function () {\r\n  return this.removeFacetRefinement.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\r\n * filter is not set, it doesn't change the filters.\r\n *\r\n * If the value is omitted, then this method will remove all the filters for the\r\n * attribute.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} [value] the associated value\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function (facet, value) {\r\n  this._change({\r\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n// eslint-disable-next-line valid-jsdoc\r\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\r\n */\r\nAlgoliaSearchHelper.prototype.removeExclude = function () {\r\n  return this.removeFacetExclusion.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * Removes a tag filter with the `tag` provided. If the\r\n * filter is not set, it doesn't change the filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} tag tag to remove from the filter\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.removeTag = function (tag) {\r\n  this._change({\r\n    state: this.state.resetPage().removeTagRefinement(tag),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\r\n * the value is set then it removes it, otherwise it adds the filter.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} value the associated value\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function (facet, value) {\r\n  this._change({\r\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n// eslint-disable-next-line valid-jsdoc\r\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\r\n */\r\nAlgoliaSearchHelper.prototype.toggleExclude = function () {\r\n  return this.toggleFacetExclusion.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\r\n * the value is set then it removes it, otherwise it adds the filter.\r\n *\r\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} value the associated value\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\r\n * @fires change\r\n * @chainable\r\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\r\n */\r\nAlgoliaSearchHelper.prototype.toggleRefinement = function (facet, value) {\r\n  return this.toggleFacetRefinement(facet, value);\r\n};\r\n\r\n/**\r\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\r\n * the value is set then it removes it, otherwise it adds the filter.\r\n *\r\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\r\n *\r\n * This method resets the current page to 0.\r\n * @param  {string} facet the facet to refine\r\n * @param  {string} value the associated value\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function (facet, value) {\r\n  this._change({\r\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n// eslint-disable-next-line valid-jsdoc\r\n/**\r\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\r\n */\r\nAlgoliaSearchHelper.prototype.toggleRefine = function () {\r\n  return this.toggleFacetRefinement.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * Adds or removes a tag filter with the `value` provided. If\r\n * the value is set then it removes it, otherwise it adds the filter.\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} tag tag to remove or add\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.toggleTag = function (tag) {\r\n  this._change({\r\n    state: this.state.resetPage().toggleTagRefinement(tag),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Increments the page number by one.\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n * @example\r\n * helper.setPage(0).nextPage().getPage();\r\n * // returns 1\r\n */\r\nAlgoliaSearchHelper.prototype.nextPage = function () {\r\n  var page = this.state.page || 0;\r\n  return this.setPage(page + 1);\r\n};\r\n\r\n/**\r\n * Decrements the page number by one.\r\n * @fires change\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @chainable\r\n * @example\r\n * helper.setPage(1).previousPage().getPage();\r\n * // returns 0\r\n */\r\nAlgoliaSearchHelper.prototype.previousPage = function () {\r\n  var page = this.state.page || 0;\r\n  return this.setPage(page - 1);\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {number} page The page number\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @chainable\r\n * @fires change\r\n */\r\nfunction setCurrentPage(page) {\r\n  if (page < 0) throw new Error('Page requested below 0.');\r\n\r\n  this._change({\r\n    state: this.state.setPage(page),\r\n    isPageReset: false,\r\n  });\r\n\r\n  return this;\r\n}\r\n\r\n/**\r\n * Change the current page\r\n * @deprecated\r\n * @param  {number} page The page number\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\r\n\r\n/**\r\n * Updates the current page.\r\n * @function\r\n * @param  {number} page The page number\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\r\n\r\n/**\r\n * Updates the name of the index that will be targeted by the query.\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} name the index name\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.setIndex = function (name) {\r\n  this._change({\r\n    state: this.state.resetPage().setIndex(name),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Update a parameter of the search. This method reset the page\r\n *\r\n * The complete list of parameters is available on the\r\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\r\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\r\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\r\n *\r\n * This method resets the current page to 0.\r\n * @param {string} parameter name of the parameter to update\r\n * @param {any} value new value of the parameter\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n * @example\r\n * helper.setQueryParameter('hitsPerPage', 20).search();\r\n */\r\nAlgoliaSearchHelper.prototype.setQueryParameter = function (parameter, value) {\r\n  this._change({\r\n    state: this.state.resetPage().setQueryParameter(parameter, value),\r\n    isPageReset: true,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set the whole state (warning: will erase previous state)\r\n * @param {SearchParameters} newState the whole new state\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @fires change\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.setState = function (newState) {\r\n  this._change({\r\n    state: SearchParameters.make(newState),\r\n    isPageReset: false,\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Override the current state without triggering a change event.\r\n * Do not use this method unless you know what you are doing. (see the example\r\n * for a legit use case)\r\n * @param {SearchParameters} newState the whole new state\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n * @example\r\n *  helper.on('change', function(state){\r\n *    // In this function you might want to find a way to store the state in the url/history\r\n *    updateYourURL(state)\r\n *  })\r\n *  window.onpopstate = function(event){\r\n *    // This is naive though as you should check if the state is really defined etc.\r\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\r\n *  }\r\n * @chainable\r\n */\r\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent =\r\n  function (newState) {\r\n    this.state = new SearchParameters(newState);\r\n    return this;\r\n  };\r\n\r\n/**\r\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\r\n * @param {string} attribute the name of the attribute\r\n * @return {boolean} true if the attribute is filtered by at least one value\r\n * @example\r\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\r\n * helper.hasRefinements('price'); // false\r\n * helper.addNumericRefinement('price', '>', 100);\r\n * helper.hasRefinements('price'); // true\r\n *\r\n * helper.hasRefinements('color'); // false\r\n * helper.addFacetRefinement('color', 'blue');\r\n * helper.hasRefinements('color'); // true\r\n *\r\n * helper.hasRefinements('material'); // false\r\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\r\n * helper.hasRefinements('material'); // true\r\n *\r\n * helper.hasRefinements('categories'); // false\r\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\r\n * helper.hasRefinements('categories'); // true\r\n *\r\n */\r\nAlgoliaSearchHelper.prototype.hasRefinements = function (attribute) {\r\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\r\n    return true;\r\n  } else if (this.state.isConjunctiveFacet(attribute)) {\r\n    return this.state.isFacetRefined(attribute);\r\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\r\n    return this.state.isDisjunctiveFacetRefined(attribute);\r\n  } else if (this.state.isHierarchicalFacet(attribute)) {\r\n    return this.state.isHierarchicalFacetRefined(attribute);\r\n  }\r\n\r\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\r\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\r\n  // so we will return false in every other situations to be consistent\r\n  // while what we should do here is throw because we did not find the attribute in any type\r\n  // of refinement\r\n  return false;\r\n};\r\n\r\n/**\r\n * Check if a value is excluded for a specific faceted attribute. If the value\r\n * is omitted then the function checks if there is any excluding refinements.\r\n *\r\n * @param  {string}  facet name of the attribute for used for faceting\r\n * @param  {string}  [value] optional value. If passed will test that this value\r\n * is filtering the given facet.\r\n * @return {boolean} true if refined\r\n * @example\r\n * helper.isExcludeRefined('color'); // false\r\n * helper.isExcludeRefined('color', 'blue') // false\r\n * helper.isExcludeRefined('color', 'red') // false\r\n *\r\n * helper.addFacetExclusion('color', 'red');\r\n *\r\n * helper.isExcludeRefined('color'); // true\r\n * helper.isExcludeRefined('color', 'blue') // false\r\n * helper.isExcludeRefined('color', 'red') // true\r\n */\r\nAlgoliaSearchHelper.prototype.isExcluded = function (facet, value) {\r\n  return this.state.isExcludeRefined(facet, value);\r\n};\r\n\r\n// eslint-disable-next-line valid-jsdoc\r\n/**\r\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\r\n */\r\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function (facet, value) {\r\n  return this.state.isDisjunctiveFacetRefined(facet, value);\r\n};\r\n\r\n/**\r\n * Check if the string is a currently filtering tag.\r\n * @param {string} tag tag to check\r\n * @return {boolean} true if the tag is currently refined\r\n */\r\nAlgoliaSearchHelper.prototype.hasTag = function (tag) {\r\n  return this.state.isTagRefined(tag);\r\n};\r\n\r\n// eslint-disable-next-line valid-jsdoc\r\n/**\r\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\r\n */\r\nAlgoliaSearchHelper.prototype.isTagRefined = function () {\r\n  return this.hasTagRefinements.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * Get the name of the currently used index.\r\n * @return {string} name of the index\r\n * @example\r\n * helper.setIndex('highestPrice_products').getIndex();\r\n * // returns 'highestPrice_products'\r\n */\r\nAlgoliaSearchHelper.prototype.getIndex = function () {\r\n  return this.state.index;\r\n};\r\n\r\nfunction getCurrentPage() {\r\n  return this.state.page;\r\n}\r\n\r\n/**\r\n * Get the currently selected page\r\n * @deprecated\r\n * @return {number} the current page\r\n */\r\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\r\n/**\r\n * Get the currently selected page\r\n * @function\r\n * @return {number} the current page\r\n */\r\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\r\n\r\n/**\r\n * Get all the tags currently set to filters the results.\r\n *\r\n * @return {string[]} The list of tags currently set.\r\n */\r\nAlgoliaSearchHelper.prototype.getTags = function () {\r\n  return this.state.tagRefinements;\r\n};\r\n\r\n/**\r\n * Get the list of refinements for a given attribute. This method works with\r\n * conjunctive, disjunctive, excluding and numerical filters.\r\n *\r\n * See also SearchResults#getRefinements\r\n *\r\n * @param {string} facetName attribute name used for faceting\r\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\r\n * a type. Numeric also contains an operator.\r\n * @example\r\n * helper.addNumericRefinement('price', '>', 100);\r\n * helper.getRefinements('price');\r\n * // [\r\n * //   {\r\n * //     \"value\": [\r\n * //       100\r\n * //     ],\r\n * //     \"operator\": \">\",\r\n * //     \"type\": \"numeric\"\r\n * //   }\r\n * // ]\r\n * @example\r\n * helper.addFacetRefinement('color', 'blue');\r\n * helper.addFacetExclusion('color', 'red');\r\n * helper.getRefinements('color');\r\n * // [\r\n * //   {\r\n * //     \"value\": \"blue\",\r\n * //     \"type\": \"conjunctive\"\r\n * //   },\r\n * //   {\r\n * //     \"value\": \"red\",\r\n * //     \"type\": \"exclude\"\r\n * //   }\r\n * // ]\r\n * @example\r\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\r\n * // [\r\n * //   {\r\n * //     \"value\": \"plastic\",\r\n * //     \"type\": \"disjunctive\"\r\n * //   }\r\n * // ]\r\n */\r\nAlgoliaSearchHelper.prototype.getRefinements = function (facetName) {\r\n  var refinements = [];\r\n\r\n  if (this.state.isConjunctiveFacet(facetName)) {\r\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\r\n\r\n    conjRefinements.forEach(function (r) {\r\n      refinements.push({\r\n        value: r,\r\n        type: 'conjunctive',\r\n      });\r\n    });\r\n\r\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\r\n\r\n    excludeRefinements.forEach(function (r) {\r\n      refinements.push({\r\n        value: r,\r\n        type: 'exclude',\r\n      });\r\n    });\r\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\r\n    var disjunctiveRefinements =\r\n      this.state.getDisjunctiveRefinements(facetName);\r\n\r\n    disjunctiveRefinements.forEach(function (r) {\r\n      refinements.push({\r\n        value: r,\r\n        type: 'disjunctive',\r\n      });\r\n    });\r\n  }\r\n\r\n  var numericRefinements = this.state.getNumericRefinements(facetName);\r\n\r\n  Object.keys(numericRefinements).forEach(function (operator) {\r\n    var value = numericRefinements[operator];\r\n\r\n    refinements.push({\r\n      value: value,\r\n      operator: operator,\r\n      type: 'numeric',\r\n    });\r\n  });\r\n\r\n  return refinements;\r\n};\r\n\r\n/**\r\n * Return the current refinement for the (attribute, operator)\r\n * @param {string} attribute attribute in the record\r\n * @param {string} operator operator applied on the refined values\r\n * @return {Array.<number|number[]>} refined values\r\n */\r\nAlgoliaSearchHelper.prototype.getNumericRefinement = function (\r\n  attribute,\r\n  operator\r\n) {\r\n  return this.state.getNumericRefinement(attribute, operator);\r\n};\r\n\r\n/**\r\n * Get the current breadcrumb for a hierarchical facet, as an array\r\n * @param  {string} facetName Hierarchical facet name\r\n * @return {array.<string>} the path as an array of string\r\n */\r\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function (\r\n  facetName\r\n) {\r\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\r\n};\r\n\r\n// /////////// PRIVATE\r\n\r\n/**\r\n * Perform the underlying queries\r\n * @private\r\n * @param {object} options options for the query\r\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\r\n * @return {undefined} does not return anything\r\n * @fires search\r\n * @fires result\r\n * @fires error\r\n */\r\nAlgoliaSearchHelper.prototype._search = function (options) {\r\n  var state = this.state;\r\n  var states = [];\r\n  var mainQueries = [];\r\n\r\n  if (!options.onlyWithDerivedHelpers) {\r\n    mainQueries = requestBuilder._getQueries(state.index, state);\r\n\r\n    states.push({\r\n      state: state,\r\n      queriesCount: mainQueries.length,\r\n      helper: this,\r\n    });\r\n\r\n    this.emit('search', {\r\n      state: state,\r\n      results: this.lastResults,\r\n    });\r\n  }\r\n\r\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\r\n    var derivedState = derivedHelper.getModifiedState(state);\r\n    var derivedStateQueries = derivedState.index\r\n      ? requestBuilder._getQueries(derivedState.index, derivedState)\r\n      : [];\r\n\r\n    states.push({\r\n      state: derivedState,\r\n      queriesCount: derivedStateQueries.length,\r\n      helper: derivedHelper,\r\n    });\r\n\r\n    derivedHelper.emit('search', {\r\n      state: derivedState,\r\n      results: derivedHelper.lastResults,\r\n    });\r\n\r\n    return derivedStateQueries;\r\n  });\r\n\r\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\r\n\r\n  var queryId = this._queryId++;\r\n  this._currentNbQueries++;\r\n\r\n  if (!queries.length) {\r\n    return Promise.resolve({ results: [] }).then(\r\n      this._dispatchAlgoliaResponse.bind(this, states, queryId)\r\n    );\r\n  }\r\n\r\n  try {\r\n    this.client\r\n      .search(queries)\r\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\r\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\r\n  } catch (error) {\r\n    // If we reach this part, we're in an internal error state\r\n    this.emit('error', {\r\n      error: error,\r\n    });\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\n/**\r\n * Transform the responses as sent by the server and transform them into a user\r\n * usable object that merge the results of all the batch requests. It will dispatch\r\n * over the different helper + derived helpers (when there are some).\r\n * @private\r\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>} states state used to generate the request\r\n * @param {number} queryId id of the current request\r\n * @param {object} content content of the response\r\n * @return {undefined}\r\n */\r\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function (\r\n  states,\r\n  queryId,\r\n  content\r\n) {\r\n  // @TODO remove the number of outdated queries discarded instead of just one\r\n\r\n  if (queryId < this._lastQueryIdReceived) {\r\n    // Outdated answer\r\n    return;\r\n  }\r\n\r\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\r\n  this._lastQueryIdReceived = queryId;\r\n\r\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\r\n\r\n  var results = content.results.slice();\r\n\r\n  states.forEach(function (s) {\r\n    var state = s.state;\r\n    var queriesCount = s.queriesCount;\r\n    var helper = s.helper;\r\n    var specificResults = results.splice(0, queriesCount);\r\n\r\n    if (!state.index) {\r\n      helper.emit('result', {\r\n        results: null,\r\n        state: state,\r\n      });\r\n      return;\r\n    }\r\n\r\n    helper.lastResults = new SearchResults(state, specificResults);\r\n\r\n    helper.emit('result', {\r\n      results: helper.lastResults,\r\n      state: state,\r\n    });\r\n  });\r\n};\r\n\r\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function (\r\n  queryId,\r\n  error\r\n) {\r\n  if (queryId < this._lastQueryIdReceived) {\r\n    // Outdated answer\r\n    return;\r\n  }\r\n\r\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\r\n  this._lastQueryIdReceived = queryId;\r\n\r\n  this.emit('error', {\r\n    error: error,\r\n  });\r\n\r\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\r\n};\r\n\r\nAlgoliaSearchHelper.prototype.containsRefinement = function (\r\n  query,\r\n  facetFilters,\r\n  numericFilters,\r\n  tagFilters\r\n) {\r\n  return (\r\n    query ||\r\n    facetFilters.length !== 0 ||\r\n    numericFilters.length !== 0 ||\r\n    tagFilters.length !== 0\r\n  );\r\n};\r\n\r\n/**\r\n * Test if there are some disjunctive refinements on the facet\r\n * @private\r\n * @param {string} facet the attribute to test\r\n * @return {boolean} true if there are refinements on this attribute\r\n */\r\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function (facet) {\r\n  return (\r\n    this.state.disjunctiveRefinements[facet] &&\r\n    this.state.disjunctiveRefinements[facet].length > 0\r\n  );\r\n};\r\n\r\nAlgoliaSearchHelper.prototype._change = function (event) {\r\n  var state = event.state;\r\n  var isPageReset = event.isPageReset;\r\n\r\n  if (state !== this.state) {\r\n    this.state = state;\r\n\r\n    this.emit('change', {\r\n      state: this.state,\r\n      results: this.lastResults,\r\n      isPageReset: isPageReset,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Clears the cache of the underlying Algolia client.\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n */\r\nAlgoliaSearchHelper.prototype.clearCache = function () {\r\n  if (this.client.clearCache) this.client.clearCache();\r\n  return this;\r\n};\r\n\r\n/**\r\n * Updates the internal client instance. If the reference of the clients\r\n * are equal then no update is actually done.\r\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\r\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\r\n */\r\nAlgoliaSearchHelper.prototype.setClient = function (newClient) {\r\n  if (this.client === newClient) return this;\r\n\r\n  if (typeof newClient.addAlgoliaAgent === 'function') {\r\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\r\n  }\r\n  this.client = newClient;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Gets the instance of the currently used client.\r\n * @return {AlgoliaSearch} the currently used client\r\n */\r\nAlgoliaSearchHelper.prototype.getClient = function () {\r\n  return this.client;\r\n};\r\n\r\n/**\r\n * Creates an derived instance of the Helper. A derived helper\r\n * is a way to request other indices synchronised with the lifecycle\r\n * of the main Helper. This mechanism uses the multiqueries feature\r\n * of Algolia to aggregate all the requests in a single network call.\r\n *\r\n * This method takes a function that is used to create a new SearchParameter\r\n * that will be used to create requests to Algolia. Those new requests\r\n * are created just before the `search` event. The signature of the function\r\n * is `SearchParameters -> SearchParameters`.\r\n *\r\n * This method returns a new DerivedHelper which is an EventEmitter\r\n * that fires the same `search`, `result` and `error` events. Those\r\n * events, however, will receive data specific to this DerivedHelper\r\n * and the SearchParameters that is returned by the call of the\r\n * parameter function.\r\n * @param {function} fn SearchParameters -> SearchParameters\r\n * @return {DerivedHelper} a new DerivedHelper\r\n */\r\nAlgoliaSearchHelper.prototype.derive = function (fn) {\r\n  var derivedHelper = new DerivedHelper(this, fn);\r\n  this.derivedHelpers.push(derivedHelper);\r\n  return derivedHelper;\r\n};\r\n\r\n/**\r\n * This method detaches a derived Helper from the main one. Prefer using the one from the\r\n * derived helper itself, to remove the event listeners too.\r\n * @private\r\n * @param  {DerivedHelper} derivedHelper the derived helper to detach\r\n * @return {undefined} nothing is returned\r\n * @throws Error\r\n */\r\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function (derivedHelper) {\r\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\r\n  if (pos === -1) throw new Error('Derived helper already detached');\r\n  this.derivedHelpers.splice(pos, 1);\r\n};\r\n\r\n/**\r\n * This method returns true if there is currently at least one on-going search.\r\n * @return {boolean} true if there is a search pending\r\n */\r\nAlgoliaSearchHelper.prototype.hasPendingRequests = function () {\r\n  return this._currentNbQueries > 0;\r\n};\r\n\r\n/**\r\n * @typedef AlgoliaSearchHelper.NumericRefinement\r\n * @type {object}\r\n * @property {number[]} value the numbers that are used for filtering this attribute with\r\n * the operator specified.\r\n * @property {string} operator the faceting data: value, number of entries\r\n * @property {string} type will be 'numeric'\r\n */\r\n\r\n/**\r\n * @typedef AlgoliaSearchHelper.FacetRefinement\r\n * @type {object}\r\n * @property {string} value the string use to filter the attribute\r\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\r\n */\r\n\r\nmodule.exports = AlgoliaSearchHelper;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAE7C,IAAIC,aAAa,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC9C,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,8BAA8B,CAAC,CAACE,gBAAgB;AAC/E,IAAIC,QAAQ,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AAC9C,IAAII,KAAK,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;AACxC,IAAIK,aAAa,GAAGL,OAAO,CAAC,2BAA2B,CAAC;AACxD,IAAIM,IAAI,GAAGN,OAAO,CAAC,kBAAkB,CAAC;AACtC,IAAIO,cAAc,GAAGP,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAIQ,gBAAgB,GAAGR,OAAO,CAAC,oBAAoB,CAAC;AACpD,IAAIS,aAAa,GAAGT,OAAO,CAAC,iBAAiB,CAAC;AAC9C,IAAIU,OAAO,GAAGV,OAAO,CAAC,WAAW,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASW,mBAAmBA,CAACC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAE;EACnD,IAAI,OAAOF,MAAM,CAACG,eAAe,KAAK,UAAU,EAAE;IAChDH,MAAM,CAACG,eAAe,CAAC,aAAa,GAAGL,OAAO,GAAG,GAAG,CAAC;EACvD;EAEA,IAAI,CAACM,SAAS,CAACJ,MAAM,CAAC;EACtB,IAAIK,IAAI,GAAGH,OAAO,IAAI,CAAC,CAAC;EACxBG,IAAI,CAACJ,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACK,KAAK,GAAGV,gBAAgB,CAACW,IAAI,CAACF,IAAI,CAAC;EACxC,IAAI,CAACG,WAAW,GAAG,IAAI;EACvB,IAAI,CAACC,QAAQ,GAAG,CAAC;EACjB,IAAI,CAACC,oBAAoB,GAAG,CAAC,CAAC;EAC9B,IAAI,CAACC,cAAc,GAAG,EAAE;EACxB,IAAI,CAACC,iBAAiB,GAAG,CAAC;AAC5B;AAEArB,QAAQ,CAACQ,mBAAmB,EAAEZ,YAAY,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAY,mBAAmB,CAACc,SAAS,CAACC,MAAM,GAAG,YAAY;EACjD,IAAI,CAACC,OAAO,CAAC;IAAEC,sBAAsB,EAAE;EAAM,CAAC,CAAC;EAC/C,OAAO,IAAI;AACb,CAAC;AAEDjB,mBAAmB,CAACc,SAAS,CAACI,4BAA4B,GAAG,YAAY;EACvE,IAAI,CAACF,OAAO,CAAC;IAAEC,sBAAsB,EAAE;EAAK,CAAC,CAAC;EAC9C,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAjB,mBAAmB,CAACc,SAAS,CAACK,QAAQ,GAAG,YAAY;EACnD,IAAIZ,KAAK,GAAG,IAAI,CAACA,KAAK;EACtB,OAAOX,cAAc,CAACwB,oBAAoB,CAACb,KAAK,CAAC;AACnD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,mBAAmB,CAACc,SAAS,CAACO,UAAU,GAAG,UAAUlB,OAAO,EAAEmB,EAAE,EAAE;EAChE,IAAIC,SAAS,GAAG,CAACpB,OAAO,GACpB,IAAI,CAACI,KAAK,GACV,IAAI,CAACA,KAAK,CAACiB,kBAAkB,CAACrB,OAAO,CAAC;EAC1C,IAAIsB,OAAO,GAAG7B,cAAc,CAAC8B,WAAW,CAACH,SAAS,CAACrB,KAAK,EAAEqB,SAAS,CAAC;EACpE;EACA,IAAII,IAAI,GAAG,IAAI;EAEf,IAAI,CAACd,iBAAiB,EAAE;EAExB,IAAI,CAACe,IAAI,CAAC,YAAY,EAAE;IACtBrB,KAAK,EAAEgB;EACT,CAAC,CAAC;EAEF,IAAID,EAAE,EAAE;IACN,IAAI,CAACrB,MAAM,CACRc,MAAM,CAACU,OAAO,CAAC,CACfI,IAAI,CAAC,UAAUC,OAAO,EAAE;MACvBH,IAAI,CAACd,iBAAiB,EAAE;MACxB,IAAIc,IAAI,CAACd,iBAAiB,KAAK,CAAC,EAAE;QAChCc,IAAI,CAACC,IAAI,CAAC,kBAAkB,CAAC;MAC/B;MAEAN,EAAE,CAAC,IAAI,EAAE,IAAIxB,aAAa,CAACyB,SAAS,EAAEO,OAAO,CAACC,OAAO,CAAC,EAAER,SAAS,CAAC;IACpE,CAAC,CAAC,CACDS,KAAK,CAAC,UAAUC,GAAG,EAAE;MACpBN,IAAI,CAACd,iBAAiB,EAAE;MACxB,IAAIc,IAAI,CAACd,iBAAiB,KAAK,CAAC,EAAE;QAChCc,IAAI,CAACC,IAAI,CAAC,kBAAkB,CAAC;MAC/B;MAEAN,EAAE,CAACW,GAAG,EAAE,IAAI,EAAEV,SAAS,CAAC;IAC1B,CAAC,CAAC;IAEJ,OAAOW,SAAS;EAClB;EAEA,OAAO,IAAI,CAACjC,MAAM,CAACc,MAAM,CAACU,OAAO,CAAC,CAACI,IAAI,CACrC,UAAUC,OAAO,EAAE;IACjBH,IAAI,CAACd,iBAAiB,EAAE;IACxB,IAAIc,IAAI,CAACd,iBAAiB,KAAK,CAAC,EAAEc,IAAI,CAACC,IAAI,CAAC,kBAAkB,CAAC;IAC/D,OAAO;MACLE,OAAO,EAAE,IAAIhC,aAAa,CAACyB,SAAS,EAAEO,OAAO,CAACC,OAAO,CAAC;MACtDxB,KAAK,EAAEgB,SAAS;MAChBY,iBAAiB,EAAEL;IACrB,CAAC;EACH,CAAC,EACD,UAAUM,CAAC,EAAE;IACXT,IAAI,CAACd,iBAAiB,EAAE;IACxB,IAAIc,IAAI,CAACd,iBAAiB,KAAK,CAAC,EAAEc,IAAI,CAACC,IAAI,CAAC,kBAAkB,CAAC;IAC/D,MAAMQ,CAAC;EACT,CACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApC,mBAAmB,CAACc,SAAS,CAACuB,WAAW,GAAG,UAAUlC,OAAO,EAAE;EAC7D;EACAmC,OAAO,CAACC,IAAI,CAAC,uDAAuD,CAAC;EACrE,IAAIhC,KAAK,GAAG,IAAI,CAACA,KAAK;EACtB,IAAIiC,aAAa,GAAG,IAAI,CAAC5B,cAAc,CAAC,CAAC,CAAC;EAC1C,IAAI,CAAC4B,aAAa,EAAE;IAClB,OAAOC,OAAO,CAACC,OAAO,CAAC,EAAE,CAAC;EAC5B;EACA,IAAIC,YAAY,GAAGH,aAAa,CAACI,gBAAgB,CAACrC,KAAK,CAAC;EACxD,IAAIsC,IAAI,GAAGpD,KAAK,CACd;IACEqD,uBAAuB,EAAE3C,OAAO,CAAC2C,uBAAuB;IACxDC,MAAM,EAAE5C,OAAO,CAAC4C;EAClB,CAAC,EACD;IACEC,MAAM,EAAErD,IAAI,CAACC,cAAc,CAACwB,oBAAoB,CAACuB,YAAY,CAAC,EAAE,CAC9D,qBAAqB,EACrB,aAAa,EACb,8BAA8B,EAC9B,qBAAqB,CACtB;EACH,CACF,CAAC;EAED,IAAIM,YAAY,GACd,6GAA6G;EAC/G,IAAI,OAAO,IAAI,CAAChD,MAAM,CAACiD,SAAS,KAAK,UAAU,EAAE;IAC/C,MAAM,IAAIC,KAAK,CAACF,YAAY,CAAC;EAC/B;EACA,IAAI/C,KAAK,GAAG,IAAI,CAACD,MAAM,CAACiD,SAAS,CAACP,YAAY,CAACzC,KAAK,CAAC;EACrD,IAAI,OAAOA,KAAK,CAACmC,WAAW,KAAK,UAAU,EAAE;IAC3C,MAAM,IAAIc,KAAK,CAACF,YAAY,CAAC;EAC/B;EACA,OAAO/C,KAAK,CAACmC,WAAW,CAACM,YAAY,CAACS,KAAK,EAAEjD,OAAO,CAACkD,cAAc,EAAER,IAAI,CAAC;AAC5E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA7C,mBAAmB,CAACc,SAAS,CAACwC,oBAAoB,GAAG,UACnDC,KAAK,EACLH,KAAK,EACLI,YAAY,EACZC,SAAS,EACT;EACA,IAAIC,aAAa,GAAG,OAAO,IAAI,CAACzD,MAAM,CAACqD,oBAAoB,KAAK,UAAU;EAC1E,IAAIK,kBAAkB,GAAG,OAAO,IAAI,CAAC1D,MAAM,CAACiD,SAAS,KAAK,UAAU;EACpE,IACE,CAACQ,aAAa,IACd,CAACC,kBAAkB,IACnB,OAAO,IAAI,CAAC1D,MAAM,CAACc,MAAM,KAAK,UAAU,EACxC;IACA,MAAM,IAAIoC,KAAK,CACb,uKACF,CAAC;EACH;EAEA,IAAI5C,KAAK,GAAG,IAAI,CAACA,KAAK,CAACiB,kBAAkB,CAACiC,SAAS,IAAI,CAAC,CAAC,CAAC;EAC1D,IAAIG,aAAa,GAAGrD,KAAK,CAACsD,kBAAkB,CAACN,KAAK,CAAC;EACnD,IAAIO,YAAY,GAAGlE,cAAc,CAACmE,sBAAsB,CACtDR,KAAK,EACLH,KAAK,EACLI,YAAY,EACZjD,KACF,CAAC;EAED,IAAI,CAACM,iBAAiB,EAAE;EACxB;EACA,IAAIc,IAAI,GAAG,IAAI;EACf,IAAIqC,2BAA2B;EAC/B;EACA,IAAIN,aAAa,EAAE;IACjBM,2BAA2B,GAAG,IAAI,CAAC/D,MAAM,CAACqD,oBAAoB,CAAC,CAC7D;MAAEW,SAAS,EAAE1D,KAAK,CAACL,KAAK;MAAE8C,MAAM,EAAEc;IAAa,CAAC,CACjD,CAAC;IACF;EACF,CAAC,MAAM,IAAIH,kBAAkB,EAAE;IAC7BK,2BAA2B,GAAG,IAAI,CAAC/D,MAAM,CACtCiD,SAAS,CAAC3C,KAAK,CAACL,KAAK,CAAC,CACtBoD,oBAAoB,CAACQ,YAAY,CAAC;IACrC;EACF,CAAC,MAAM;IACL;IACA,OAAOA,YAAY,CAACI,SAAS;IAC7BF,2BAA2B,GAAG,IAAI,CAAC/D,MAAM,CACtCc,MAAM,CAAC,CACN;MACEoD,IAAI,EAAE,OAAO;MACbZ,KAAK,EAAEA,KAAK;MACZU,SAAS,EAAE1D,KAAK,CAACL,KAAK;MACtB8C,MAAM,EAAEc;IACV,CAAC,CACF,CAAC,CACDjC,IAAI,CAAC,SAASuC,eAAeA,CAACC,QAAQ,EAAE;MACvC,OAAOA,QAAQ,CAACtC,OAAO,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC;EACN;EAEA,IAAI,CAACH,IAAI,CAAC,sBAAsB,EAAE;IAChCrB,KAAK,EAAEA,KAAK;IACZgD,KAAK,EAAEA,KAAK;IACZH,KAAK,EAAEA;EACT,CAAC,CAAC;EAEF,OAAOY,2BAA2B,CAACnC,IAAI,CACrC,SAASyC,YAAYA,CAACxC,OAAO,EAAE;IAC7BH,IAAI,CAACd,iBAAiB,EAAE;IACxB,IAAIc,IAAI,CAACd,iBAAiB,KAAK,CAAC,EAAEc,IAAI,CAACC,IAAI,CAAC,kBAAkB,CAAC;IAE/DE,OAAO,GAAGyC,KAAK,CAACC,OAAO,CAAC1C,OAAO,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO;IAEvDA,OAAO,CAAC2C,SAAS,CAACC,OAAO,CAAC,UAAUC,CAAC,EAAE;MACrCA,CAAC,CAACC,YAAY,GAAGrF,gBAAgB,CAACoF,CAAC,CAACE,KAAK,CAAC;MAC1CF,CAAC,CAACG,SAAS,GAAGlB,aAAa,GACvBrD,KAAK,CAACwE,yBAAyB,CAACxB,KAAK,EAAEoB,CAAC,CAACC,YAAY,CAAC,GACtDrE,KAAK,CAACyE,cAAc,CAACzB,KAAK,EAAEoB,CAAC,CAACC,YAAY,CAAC;IACjD,CAAC,CAAC;IAEF,OAAO9C,OAAO;EAChB,CAAC,EACD,UAAUM,CAAC,EAAE;IACXT,IAAI,CAACd,iBAAiB,EAAE;IACxB,IAAIc,IAAI,CAACd,iBAAiB,KAAK,CAAC,EAAEc,IAAI,CAACC,IAAI,CAAC,kBAAkB,CAAC;IAC/D,MAAMQ,CAAC;EACT,CACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApC,mBAAmB,CAACc,SAAS,CAACmE,QAAQ,GAAG,UAAUC,CAAC,EAAE;EACpD,IAAI,CAACC,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACH,QAAQ,CAACC,CAAC,CAAC;IACzCG,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACwE,gBAAgB,GAAG,UAAUC,IAAI,EAAE;EAC/D,IAAI,CAACJ,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACE,gBAAgB,CAACC,IAAI,CAAC;IACpDF,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAAC0E,SAAS,GAAG,YAAY;EACpD,IAAI,CAACL,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACI,SAAS,CAAC,CAAC;IACzCH,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAAC2E,6BAA6B,GAAG,UAC5DlC,KAAK,EACLsB,KAAK,EACL;EACA,IAAI,CAACM,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACK,6BAA6B,CAAClC,KAAK,EAAEsB,KAAK,CAAC;IACzEQ,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAAC4E,oBAAoB,GAAG,YAAY;EAC/D,OAAO,IAAI,CAACD,6BAA6B,CAACE,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;AAClE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5F,mBAAmB,CAACc,SAAS,CAAC+E,8BAA8B,GAAG,UAC7DtC,KAAK,EACLuC,IAAI,EACJ;EACA,IAAI,CAACX,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACS,8BAA8B,CAACtC,KAAK,EAAEuC,IAAI,CAAC;IACzET,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACiF,oBAAoB,GAAG,UACnDC,SAAS,EACTC,QAAQ,EACRpB,KAAK,EACL;EACA,IAAI,CAACM,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CACd6E,SAAS,CAAC,CAAC,CACXW,oBAAoB,CAACC,SAAS,EAAEC,QAAQ,EAAEpB,KAAK,CAAC;IACnDQ,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACoF,kBAAkB,GAAG,UAAU3C,KAAK,EAAEsB,KAAK,EAAE;EACzE,IAAI,CAACM,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACc,kBAAkB,CAAC3C,KAAK,EAAEsB,KAAK,CAAC;IAC9DQ,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACqF,SAAS,GAAG,YAAY;EACpD,OAAO,IAAI,CAACD,kBAAkB,CAACP,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;AACvD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5F,mBAAmB,CAACc,SAAS,CAACsF,iBAAiB,GAAG,UAAU7C,KAAK,EAAEsB,KAAK,EAAE;EACxE,IAAI,CAACM,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACiB,oBAAoB,CAAC9C,KAAK,EAAEsB,KAAK,CAAC;IAChEQ,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACwF,UAAU,GAAG,YAAY;EACrD,OAAO,IAAI,CAACF,iBAAiB,CAACT,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5F,mBAAmB,CAACc,SAAS,CAACyF,MAAM,GAAG,UAAUC,GAAG,EAAE;EACpD,IAAI,CAACrB,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACqB,gBAAgB,CAACD,GAAG,CAAC;IACnDnB,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAAC4F,uBAAuB,GAAG,UACtDV,SAAS,EACTC,QAAQ,EACRpB,KAAK,EACL;EACA,IAAI,CAACM,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CACd6E,SAAS,CAAC,CAAC,CACXsB,uBAAuB,CAACV,SAAS,EAAEC,QAAQ,EAAEpB,KAAK,CAAC;IACtDQ,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAAC6F,gCAAgC,GAAG,UAC/DpD,KAAK,EACLsB,KAAK,EACL;EACA,IAAI,CAACM,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CACd6E,SAAS,CAAC,CAAC,CACXuB,gCAAgC,CAACpD,KAAK,EAAEsB,KAAK,CAAC;IACjDQ,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAAC8F,uBAAuB,GAAG,YAAY;EAClE,OAAO,IAAI,CAACD,gCAAgC,CAAChB,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;AACrE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5F,mBAAmB,CAACc,SAAS,CAAC+F,iCAAiC,GAAG,UAChEtD,KAAK,EACL;EACA,IAAI,CAAC4B,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACyB,iCAAiC,CAACtD,KAAK,CAAC;IACtE8B,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACgG,qBAAqB,GAAG,UAAUvD,KAAK,EAAEsB,KAAK,EAAE;EAC5E,IAAI,CAACM,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAAC0B,qBAAqB,CAACvD,KAAK,EAAEsB,KAAK,CAAC;IACjEQ,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACiG,YAAY,GAAG,YAAY;EACvD,OAAO,IAAI,CAACD,qBAAqB,CAACnB,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5F,mBAAmB,CAACc,SAAS,CAACkG,oBAAoB,GAAG,UAAUzD,KAAK,EAAEsB,KAAK,EAAE;EAC3E,IAAI,CAACM,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAAC6B,uBAAuB,CAAC1D,KAAK,EAAEsB,KAAK,CAAC;IACnEQ,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACoG,aAAa,GAAG,YAAY;EACxD,OAAO,IAAI,CAACF,oBAAoB,CAACrB,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;AACzD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5F,mBAAmB,CAACc,SAAS,CAACqG,SAAS,GAAG,UAAUX,GAAG,EAAE;EACvD,IAAI,CAACrB,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACgC,mBAAmB,CAACZ,GAAG,CAAC;IACtDnB,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACuG,oBAAoB,GAAG,UAAU9D,KAAK,EAAEsB,KAAK,EAAE;EAC3E,IAAI,CAACM,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACkC,4BAA4B,CAAC/D,KAAK,EAAEsB,KAAK,CAAC;IACxEQ,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACyG,aAAa,GAAG,YAAY;EACxD,OAAO,IAAI,CAACF,oBAAoB,CAAC1B,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;AACzD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5F,mBAAmB,CAACc,SAAS,CAAC0G,gBAAgB,GAAG,UAAUjE,KAAK,EAAEsB,KAAK,EAAE;EACvE,OAAO,IAAI,CAAC4C,qBAAqB,CAAClE,KAAK,EAAEsB,KAAK,CAAC;AACjD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA7E,mBAAmB,CAACc,SAAS,CAAC2G,qBAAqB,GAAG,UAAUlE,KAAK,EAAEsB,KAAK,EAAE;EAC5E,IAAI,CAACM,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACqC,qBAAqB,CAAClE,KAAK,EAAEsB,KAAK,CAAC;IACjEQ,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAAC4G,YAAY,GAAG,YAAY;EACvD,OAAO,IAAI,CAACD,qBAAqB,CAAC9B,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5F,mBAAmB,CAACc,SAAS,CAAC6G,SAAS,GAAG,UAAUnB,GAAG,EAAE;EACvD,IAAI,CAACrB,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAACwC,mBAAmB,CAACpB,GAAG,CAAC;IACtDnB,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAAC+G,QAAQ,GAAG,YAAY;EACnD,IAAIC,IAAI,GAAG,IAAI,CAACvH,KAAK,CAACuH,IAAI,IAAI,CAAC;EAC/B,OAAO,IAAI,CAACC,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9H,mBAAmB,CAACc,SAAS,CAACkH,YAAY,GAAG,YAAY;EACvD,IAAIF,IAAI,GAAG,IAAI,CAACvH,KAAK,CAACuH,IAAI,IAAI,CAAC;EAC/B,OAAO,IAAI,CAACC,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,cAAcA,CAACH,IAAI,EAAE;EAC5B,IAAIA,IAAI,GAAG,CAAC,EAAE,MAAM,IAAI3E,KAAK,CAAC,yBAAyB,CAAC;EAExD,IAAI,CAACgC,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAACwH,OAAO,CAACD,IAAI,CAAC;IAC/BzC,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACmH,cAAc,GAAGA,cAAc;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjI,mBAAmB,CAACc,SAAS,CAACiH,OAAO,GAAGE,cAAc;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjI,mBAAmB,CAACc,SAAS,CAACoH,QAAQ,GAAG,UAAU3C,IAAI,EAAE;EACvD,IAAI,CAACJ,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAAC8C,QAAQ,CAAC3C,IAAI,CAAC;IAC5CF,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACqH,iBAAiB,GAAG,UAAUC,SAAS,EAAEvD,KAAK,EAAE;EAC5E,IAAI,CAACM,OAAO,CAAC;IACX5E,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC6E,SAAS,CAAC,CAAC,CAAC+C,iBAAiB,CAACC,SAAS,EAAEvD,KAAK,CAAC;IACjEQ,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACuH,QAAQ,GAAG,UAAUC,QAAQ,EAAE;EAC3D,IAAI,CAACnD,OAAO,CAAC;IACX5E,KAAK,EAAEV,gBAAgB,CAACW,IAAI,CAAC8H,QAAQ,CAAC;IACtCjD,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACyH,yCAAyC,GACrE,UAAUD,QAAQ,EAAE;EAClB,IAAI,CAAC/H,KAAK,GAAG,IAAIV,gBAAgB,CAACyI,QAAQ,CAAC;EAC3C,OAAO,IAAI;AACb,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtI,mBAAmB,CAACc,SAAS,CAAC0H,cAAc,GAAG,UAAUxC,SAAS,EAAE;EAClE,IAAItG,aAAa,CAAC,IAAI,CAACa,KAAK,CAACkI,qBAAqB,CAACzC,SAAS,CAAC,CAAC,EAAE;IAC9D,OAAO,IAAI;EACb,CAAC,MAAM,IAAI,IAAI,CAACzF,KAAK,CAACmI,kBAAkB,CAAC1C,SAAS,CAAC,EAAE;IACnD,OAAO,IAAI,CAACzF,KAAK,CAACyE,cAAc,CAACgB,SAAS,CAAC;EAC7C,CAAC,MAAM,IAAI,IAAI,CAACzF,KAAK,CAACsD,kBAAkB,CAACmC,SAAS,CAAC,EAAE;IACnD,OAAO,IAAI,CAACzF,KAAK,CAACwE,yBAAyB,CAACiB,SAAS,CAAC;EACxD,CAAC,MAAM,IAAI,IAAI,CAACzF,KAAK,CAACoI,mBAAmB,CAAC3C,SAAS,CAAC,EAAE;IACpD,OAAO,IAAI,CAACzF,KAAK,CAACqI,0BAA0B,CAAC5C,SAAS,CAAC;EACzD;;EAEA;EACA;EACA;EACA;EACA;EACA,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhG,mBAAmB,CAACc,SAAS,CAAC+H,UAAU,GAAG,UAAUtF,KAAK,EAAEsB,KAAK,EAAE;EACjE,OAAO,IAAI,CAACtE,KAAK,CAACuI,gBAAgB,CAACvF,KAAK,EAAEsB,KAAK,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA7E,mBAAmB,CAACc,SAAS,CAACiI,oBAAoB,GAAG,UAAUxF,KAAK,EAAEsB,KAAK,EAAE;EAC3E,OAAO,IAAI,CAACtE,KAAK,CAACwE,yBAAyB,CAACxB,KAAK,EAAEsB,KAAK,CAAC;AAC3D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA7E,mBAAmB,CAACc,SAAS,CAACkI,MAAM,GAAG,UAAUxC,GAAG,EAAE;EACpD,OAAO,IAAI,CAACjG,KAAK,CAAC0I,YAAY,CAACzC,GAAG,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACAxG,mBAAmB,CAACc,SAAS,CAACmI,YAAY,GAAG,YAAY;EACvD,OAAO,IAAI,CAACC,iBAAiB,CAACvD,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA5F,mBAAmB,CAACc,SAAS,CAACqI,QAAQ,GAAG,YAAY;EACnD,OAAO,IAAI,CAAC5I,KAAK,CAACL,KAAK;AACzB,CAAC;AAED,SAASkJ,cAAcA,CAAA,EAAG;EACxB,OAAO,IAAI,CAAC7I,KAAK,CAACuH,IAAI;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA9H,mBAAmB,CAACc,SAAS,CAACsI,cAAc,GAAGA,cAAc;AAC7D;AACA;AACA;AACA;AACA;AACApJ,mBAAmB,CAACc,SAAS,CAACuI,OAAO,GAAGD,cAAc;;AAEtD;AACA;AACA;AACA;AACA;AACApJ,mBAAmB,CAACc,SAAS,CAACwI,OAAO,GAAG,YAAY;EAClD,OAAO,IAAI,CAAC/I,KAAK,CAACgJ,cAAc;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvJ,mBAAmB,CAACc,SAAS,CAAC0I,cAAc,GAAG,UAAUtF,SAAS,EAAE;EAClE,IAAIuF,WAAW,GAAG,EAAE;EAEpB,IAAI,IAAI,CAAClJ,KAAK,CAACmI,kBAAkB,CAACxE,SAAS,CAAC,EAAE;IAC5C,IAAIwF,eAAe,GAAG,IAAI,CAACnJ,KAAK,CAACoJ,yBAAyB,CAACzF,SAAS,CAAC;IAErEwF,eAAe,CAAChF,OAAO,CAAC,UAAUkF,CAAC,EAAE;MACnCH,WAAW,CAACI,IAAI,CAAC;QACfhF,KAAK,EAAE+E,CAAC;QACRzF,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAI2F,kBAAkB,GAAG,IAAI,CAACvJ,KAAK,CAACwJ,qBAAqB,CAAC7F,SAAS,CAAC;IAEpE4F,kBAAkB,CAACpF,OAAO,CAAC,UAAUkF,CAAC,EAAE;MACtCH,WAAW,CAACI,IAAI,CAAC;QACfhF,KAAK,EAAE+E,CAAC;QACRzF,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,MAAM,IAAI,IAAI,CAAC5D,KAAK,CAACsD,kBAAkB,CAACK,SAAS,CAAC,EAAE;IACnD,IAAI8F,sBAAsB,GACxB,IAAI,CAACzJ,KAAK,CAAC0J,yBAAyB,CAAC/F,SAAS,CAAC;IAEjD8F,sBAAsB,CAACtF,OAAO,CAAC,UAAUkF,CAAC,EAAE;MAC1CH,WAAW,CAACI,IAAI,CAAC;QACfhF,KAAK,EAAE+E,CAAC;QACRzF,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,IAAI+F,kBAAkB,GAAG,IAAI,CAAC3J,KAAK,CAACkI,qBAAqB,CAACvE,SAAS,CAAC;EAEpEiG,MAAM,CAACC,IAAI,CAACF,kBAAkB,CAAC,CAACxF,OAAO,CAAC,UAAUuB,QAAQ,EAAE;IAC1D,IAAIpB,KAAK,GAAGqF,kBAAkB,CAACjE,QAAQ,CAAC;IAExCwD,WAAW,CAACI,IAAI,CAAC;MACfhF,KAAK,EAAEA,KAAK;MACZoB,QAAQ,EAAEA,QAAQ;MAClB9B,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOsF,WAAW;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAzJ,mBAAmB,CAACc,SAAS,CAACuJ,oBAAoB,GAAG,UACnDrE,SAAS,EACTC,QAAQ,EACR;EACA,OAAO,IAAI,CAAC1F,KAAK,CAAC8J,oBAAoB,CAACrE,SAAS,EAAEC,QAAQ,CAAC;AAC7D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAjG,mBAAmB,CAACc,SAAS,CAACwJ,8BAA8B,GAAG,UAC7DpG,SAAS,EACT;EACA,OAAO,IAAI,CAAC3D,KAAK,CAAC+J,8BAA8B,CAACpG,SAAS,CAAC;AAC7D,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlE,mBAAmB,CAACc,SAAS,CAACE,OAAO,GAAG,UAAUb,OAAO,EAAE;EACzD,IAAII,KAAK,GAAG,IAAI,CAACA,KAAK;EACtB,IAAIgK,MAAM,GAAG,EAAE;EACf,IAAIC,WAAW,GAAG,EAAE;EAEpB,IAAI,CAACrK,OAAO,CAACc,sBAAsB,EAAE;IACnCuJ,WAAW,GAAG5K,cAAc,CAAC8B,WAAW,CAACnB,KAAK,CAACL,KAAK,EAAEK,KAAK,CAAC;IAE5DgK,MAAM,CAACV,IAAI,CAAC;MACVtJ,KAAK,EAAEA,KAAK;MACZkK,YAAY,EAAED,WAAW,CAACE,MAAM;MAChCC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAI,CAAC/I,IAAI,CAAC,QAAQ,EAAE;MAClBrB,KAAK,EAAEA,KAAK;MACZwB,OAAO,EAAE,IAAI,CAACtB;IAChB,CAAC,CAAC;EACJ;EAEA,IAAImK,cAAc,GAAG,IAAI,CAAChK,cAAc,CAACiK,GAAG,CAAC,UAAUrI,aAAa,EAAE;IACpE,IAAIG,YAAY,GAAGH,aAAa,CAACI,gBAAgB,CAACrC,KAAK,CAAC;IACxD,IAAIuK,mBAAmB,GAAGnI,YAAY,CAACzC,KAAK,GACxCN,cAAc,CAAC8B,WAAW,CAACiB,YAAY,CAACzC,KAAK,EAAEyC,YAAY,CAAC,GAC5D,EAAE;IAEN4H,MAAM,CAACV,IAAI,CAAC;MACVtJ,KAAK,EAAEoC,YAAY;MACnB8H,YAAY,EAAEK,mBAAmB,CAACJ,MAAM;MACxCC,MAAM,EAAEnI;IACV,CAAC,CAAC;IAEFA,aAAa,CAACZ,IAAI,CAAC,QAAQ,EAAE;MAC3BrB,KAAK,EAAEoC,YAAY;MACnBZ,OAAO,EAAES,aAAa,CAAC/B;IACzB,CAAC,CAAC;IAEF,OAAOqK,mBAAmB;EAC5B,CAAC,CAAC;EAEF,IAAIrJ,OAAO,GAAG8C,KAAK,CAACzD,SAAS,CAACiK,MAAM,CAACpF,KAAK,CAAC6E,WAAW,EAAEI,cAAc,CAAC;EAEvE,IAAII,OAAO,GAAG,IAAI,CAACtK,QAAQ,EAAE;EAC7B,IAAI,CAACG,iBAAiB,EAAE;EAExB,IAAI,CAACY,OAAO,CAACiJ,MAAM,EAAE;IACnB,OAAOjI,OAAO,CAACC,OAAO,CAAC;MAAEX,OAAO,EAAE;IAAG,CAAC,CAAC,CAACF,IAAI,CAC1C,IAAI,CAACoJ,wBAAwB,CAACC,IAAI,CAAC,IAAI,EAAEX,MAAM,EAAES,OAAO,CAC1D,CAAC;EACH;EAEA,IAAI;IACF,IAAI,CAAC/K,MAAM,CACRc,MAAM,CAACU,OAAO,CAAC,CACfI,IAAI,CAAC,IAAI,CAACoJ,wBAAwB,CAACC,IAAI,CAAC,IAAI,EAAEX,MAAM,EAAES,OAAO,CAAC,CAAC,CAC/DhJ,KAAK,CAAC,IAAI,CAACmJ,qBAAqB,CAACD,IAAI,CAAC,IAAI,EAAEF,OAAO,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACA,IAAI,CAACxJ,IAAI,CAAC,OAAO,EAAE;MACjBwJ,KAAK,EAAEA;IACT,CAAC,CAAC;EACJ;EAEA,OAAOlJ,SAAS;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlC,mBAAmB,CAACc,SAAS,CAACmK,wBAAwB,GAAG,UACvDV,MAAM,EACNS,OAAO,EACPlJ,OAAO,EACP;EACA;;EAEA,IAAIkJ,OAAO,GAAG,IAAI,CAACrK,oBAAoB,EAAE;IACvC;IACA;EACF;EAEA,IAAI,CAACE,iBAAiB,IAAImK,OAAO,GAAG,IAAI,CAACrK,oBAAoB;EAC7D,IAAI,CAACA,oBAAoB,GAAGqK,OAAO;EAEnC,IAAI,IAAI,CAACnK,iBAAiB,KAAK,CAAC,EAAE,IAAI,CAACe,IAAI,CAAC,kBAAkB,CAAC;EAE/D,IAAIG,OAAO,GAAGD,OAAO,CAACC,OAAO,CAACsJ,KAAK,CAAC,CAAC;EAErCd,MAAM,CAAC7F,OAAO,CAAC,UAAU4G,CAAC,EAAE;IAC1B,IAAI/K,KAAK,GAAG+K,CAAC,CAAC/K,KAAK;IACnB,IAAIkK,YAAY,GAAGa,CAAC,CAACb,YAAY;IACjC,IAAIE,MAAM,GAAGW,CAAC,CAACX,MAAM;IACrB,IAAIY,eAAe,GAAGxJ,OAAO,CAACyJ,MAAM,CAAC,CAAC,EAAEf,YAAY,CAAC;IAErD,IAAI,CAAClK,KAAK,CAACL,KAAK,EAAE;MAChByK,MAAM,CAAC/I,IAAI,CAAC,QAAQ,EAAE;QACpBG,OAAO,EAAE,IAAI;QACbxB,KAAK,EAAEA;MACT,CAAC,CAAC;MACF;IACF;IAEAoK,MAAM,CAAClK,WAAW,GAAG,IAAIX,aAAa,CAACS,KAAK,EAAEgL,eAAe,CAAC;IAE9DZ,MAAM,CAAC/I,IAAI,CAAC,QAAQ,EAAE;MACpBG,OAAO,EAAE4I,MAAM,CAAClK,WAAW;MAC3BF,KAAK,EAAEA;IACT,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAEDP,mBAAmB,CAACc,SAAS,CAACqK,qBAAqB,GAAG,UACpDH,OAAO,EACPI,KAAK,EACL;EACA,IAAIJ,OAAO,GAAG,IAAI,CAACrK,oBAAoB,EAAE;IACvC;IACA;EACF;EAEA,IAAI,CAACE,iBAAiB,IAAImK,OAAO,GAAG,IAAI,CAACrK,oBAAoB;EAC7D,IAAI,CAACA,oBAAoB,GAAGqK,OAAO;EAEnC,IAAI,CAACpJ,IAAI,CAAC,OAAO,EAAE;IACjBwJ,KAAK,EAAEA;EACT,CAAC,CAAC;EAEF,IAAI,IAAI,CAACvK,iBAAiB,KAAK,CAAC,EAAE,IAAI,CAACe,IAAI,CAAC,kBAAkB,CAAC;AACjE,CAAC;AAED5B,mBAAmB,CAACc,SAAS,CAAC2K,kBAAkB,GAAG,UACjDrI,KAAK,EACLsI,YAAY,EACZC,cAAc,EACdC,UAAU,EACV;EACA,OACExI,KAAK,IACLsI,YAAY,CAAChB,MAAM,KAAK,CAAC,IACzBiB,cAAc,CAACjB,MAAM,KAAK,CAAC,IAC3BkB,UAAU,CAAClB,MAAM,KAAK,CAAC;AAE3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA1K,mBAAmB,CAACc,SAAS,CAAC+K,0BAA0B,GAAG,UAAUtI,KAAK,EAAE;EAC1E,OACE,IAAI,CAAChD,KAAK,CAACyJ,sBAAsB,CAACzG,KAAK,CAAC,IACxC,IAAI,CAAChD,KAAK,CAACyJ,sBAAsB,CAACzG,KAAK,CAAC,CAACmH,MAAM,GAAG,CAAC;AAEvD,CAAC;AAED1K,mBAAmB,CAACc,SAAS,CAACqE,OAAO,GAAG,UAAU2G,KAAK,EAAE;EACvD,IAAIvL,KAAK,GAAGuL,KAAK,CAACvL,KAAK;EACvB,IAAI8E,WAAW,GAAGyG,KAAK,CAACzG,WAAW;EAEnC,IAAI9E,KAAK,KAAK,IAAI,CAACA,KAAK,EAAE;IACxB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAElB,IAAI,CAACqB,IAAI,CAAC,QAAQ,EAAE;MAClBrB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBwB,OAAO,EAAE,IAAI,CAACtB,WAAW;MACzB4E,WAAW,EAAEA;IACf,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACiL,UAAU,GAAG,YAAY;EACrD,IAAI,IAAI,CAAC9L,MAAM,CAAC8L,UAAU,EAAE,IAAI,CAAC9L,MAAM,CAAC8L,UAAU,CAAC,CAAC;EACpD,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA/L,mBAAmB,CAACc,SAAS,CAACT,SAAS,GAAG,UAAU2L,SAAS,EAAE;EAC7D,IAAI,IAAI,CAAC/L,MAAM,KAAK+L,SAAS,EAAE,OAAO,IAAI;EAE1C,IAAI,OAAOA,SAAS,CAAC5L,eAAe,KAAK,UAAU,EAAE;IACnD4L,SAAS,CAAC5L,eAAe,CAAC,aAAa,GAAGL,OAAO,GAAG,GAAG,CAAC;EAC1D;EACA,IAAI,CAACE,MAAM,GAAG+L,SAAS;EAEvB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACAhM,mBAAmB,CAACc,SAAS,CAACmL,SAAS,GAAG,YAAY;EACpD,OAAO,IAAI,CAAChM,MAAM;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,mBAAmB,CAACc,SAAS,CAACoL,MAAM,GAAG,UAAUC,EAAE,EAAE;EACnD,IAAI3J,aAAa,GAAG,IAAIlD,aAAa,CAAC,IAAI,EAAE6M,EAAE,CAAC;EAC/C,IAAI,CAACvL,cAAc,CAACiJ,IAAI,CAACrH,aAAa,CAAC;EACvC,OAAOA,aAAa;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxC,mBAAmB,CAACc,SAAS,CAACsL,mBAAmB,GAAG,UAAU5J,aAAa,EAAE;EAC3E,IAAI6J,GAAG,GAAG,IAAI,CAACzL,cAAc,CAAC0L,OAAO,CAAC9J,aAAa,CAAC;EACpD,IAAI6J,GAAG,KAAK,CAAC,CAAC,EAAE,MAAM,IAAIlJ,KAAK,CAAC,iCAAiC,CAAC;EAClE,IAAI,CAACvC,cAAc,CAAC4K,MAAM,CAACa,GAAG,EAAE,CAAC,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACArM,mBAAmB,CAACc,SAAS,CAACyL,kBAAkB,GAAG,YAAY;EAC7D,OAAO,IAAI,CAAC1L,iBAAiB,GAAG,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA2L,MAAM,CAACC,OAAO,GAAGzM,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}