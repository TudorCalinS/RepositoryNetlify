{"ast":null,"code":"import createConnector from \"../core/createConnector.js\";\nimport { getResults } from \"../core/indexUtils.js\";\nimport { addAbsolutePositions, addQueryID } from \"../core/utils.js\";\n\n/**\r\n * connectHits connector provides the logic to create connected\r\n * components that will render the results retrieved from\r\n * Algolia.\r\n *\r\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\r\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\r\n * prop to a [Configure](guide/Search_parameters.html) widget.\r\n *\r\n * **Warning:** you will need to use the **objectID** property available on every hit as a key\r\n * when iterating over them. This will ensure you have the best possible UI experience\r\n * especially on slow networks.\r\n * @name connectHits\r\n * @kind connector\r\n * @providedPropType {array.<object>} hits - the records that matched the search state\r\n * @example\r\n * import React from 'react';\r\n * import algoliasearch from 'algoliasearch/lite';\r\n * import { InstantSearch, Highlight, connectHits } from 'react-instantsearch-dom';\r\n *\r\n * const searchClient = algoliasearch(\r\n *   'latency',\r\n *   '6be0576ff61c053d5f9a3225e2a90f76'\r\n * );\r\n * const CustomHits = connectHits(({ hits }) => (\r\n *   <div>\r\n *     {hits.map(hit =>\r\n *       <p key={hit.objectID}>\r\n *         <Highlight attribute=\"name\" hit={hit} />\r\n *       </p>\r\n *     )}\r\n *   </div>\r\n * ));\r\n *\r\n * const App = () => (\r\n *   <InstantSearch\r\n *     searchClient={searchClient}\r\n *     indexName=\"instant_search\"\r\n *   >\r\n *     <CustomHits />\r\n *   </InstantSearch>\r\n * );\r\n */\nexport default createConnector({\n  displayName: 'AlgoliaHits',\n  $$type: 'ais.hits',\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    if (!results) {\n      return {\n        hits: []\n      };\n    }\n    var hitsWithPositions = addAbsolutePositions(results.hits, results.hitsPerPage, results.page);\n    var hitsWithPositionsAndQueryID = addQueryID(hitsWithPositions, results.queryID);\n    return {\n      hits: hitsWithPositionsAndQueryID\n    };\n  },\n  /*\r\n   * Hits needs to be considered as a widget to trigger a search,\r\n   * even if no other widgets are used.\r\n   *\r\n   * To be considered as a widget you need either:\r\n   * - getSearchParameters\r\n   * - getMetadata\r\n   * - transitionState\r\n   *\r\n   * See: createConnector.tsx\r\n   */\n  getSearchParameters: function getSearchParameters(searchParameters) {\n    return searchParameters;\n  }\n});","map":{"version":3,"names":["createConnector","getResults","addAbsolutePositions","addQueryID","displayName","$$type","getProvidedProps","props","searchState","searchResults","results","ais","contextValue","multiIndexContext","indexContextValue","hits","hitsWithPositions","hitsPerPage","page","hitsWithPositionsAndQueryID","queryID","getSearchParameters","searchParameters"],"sources":["C:/Users/tudor/propr/RepositoryNetlify/node_modules/react-instantsearch-core/dist/es/connectors/connectHits.js"],"sourcesContent":["import createConnector from \"../core/createConnector.js\";\r\nimport { getResults } from \"../core/indexUtils.js\";\r\nimport { addAbsolutePositions, addQueryID } from \"../core/utils.js\";\r\n\r\n/**\r\n * connectHits connector provides the logic to create connected\r\n * components that will render the results retrieved from\r\n * Algolia.\r\n *\r\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\r\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\r\n * prop to a [Configure](guide/Search_parameters.html) widget.\r\n *\r\n * **Warning:** you will need to use the **objectID** property available on every hit as a key\r\n * when iterating over them. This will ensure you have the best possible UI experience\r\n * especially on slow networks.\r\n * @name connectHits\r\n * @kind connector\r\n * @providedPropType {array.<object>} hits - the records that matched the search state\r\n * @example\r\n * import React from 'react';\r\n * import algoliasearch from 'algoliasearch/lite';\r\n * import { InstantSearch, Highlight, connectHits } from 'react-instantsearch-dom';\r\n *\r\n * const searchClient = algoliasearch(\r\n *   'latency',\r\n *   '6be0576ff61c053d5f9a3225e2a90f76'\r\n * );\r\n * const CustomHits = connectHits(({ hits }) => (\r\n *   <div>\r\n *     {hits.map(hit =>\r\n *       <p key={hit.objectID}>\r\n *         <Highlight attribute=\"name\" hit={hit} />\r\n *       </p>\r\n *     )}\r\n *   </div>\r\n * ));\r\n *\r\n * const App = () => (\r\n *   <InstantSearch\r\n *     searchClient={searchClient}\r\n *     indexName=\"instant_search\"\r\n *   >\r\n *     <CustomHits />\r\n *   </InstantSearch>\r\n * );\r\n */\r\nexport default createConnector({\r\n  displayName: 'AlgoliaHits',\r\n  $$type: 'ais.hits',\r\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\r\n    var results = getResults(searchResults, {\r\n      ais: props.contextValue,\r\n      multiIndexContext: props.indexContextValue\r\n    });\r\n    if (!results) {\r\n      return {\r\n        hits: []\r\n      };\r\n    }\r\n    var hitsWithPositions = addAbsolutePositions(results.hits, results.hitsPerPage, results.page);\r\n    var hitsWithPositionsAndQueryID = addQueryID(hitsWithPositions, results.queryID);\r\n    return {\r\n      hits: hitsWithPositionsAndQueryID\r\n    };\r\n  },\r\n  /*\r\n   * Hits needs to be considered as a widget to trigger a search,\r\n   * even if no other widgets are used.\r\n   *\r\n   * To be considered as a widget you need either:\r\n   * - getSearchParameters\r\n   * - getMetadata\r\n   * - transitionState\r\n   *\r\n   * See: createConnector.tsx\r\n   */\r\n  getSearchParameters: function getSearchParameters(searchParameters) {\r\n    return searchParameters;\r\n  }\r\n});"],"mappings":"AAAA,OAAOA,eAAe,MAAM,4BAA4B;AACxD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,oBAAoB,EAAEC,UAAU,QAAQ,kBAAkB;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeH,eAAe,CAAC;EAC7BI,WAAW,EAAE,aAAa;EAC1BC,MAAM,EAAE,UAAU;EAClBC,gBAAgB,EAAE,SAASA,gBAAgBA,CAACC,KAAK,EAAEC,WAAW,EAAEC,aAAa,EAAE;IAC7E,IAAIC,OAAO,GAAGT,UAAU,CAACQ,aAAa,EAAE;MACtCE,GAAG,EAAEJ,KAAK,CAACK,YAAY;MACvBC,iBAAiB,EAAEN,KAAK,CAACO;IAC3B,CAAC,CAAC;IACF,IAAI,CAACJ,OAAO,EAAE;MACZ,OAAO;QACLK,IAAI,EAAE;MACR,CAAC;IACH;IACA,IAAIC,iBAAiB,GAAGd,oBAAoB,CAACQ,OAAO,CAACK,IAAI,EAAEL,OAAO,CAACO,WAAW,EAAEP,OAAO,CAACQ,IAAI,CAAC;IAC7F,IAAIC,2BAA2B,GAAGhB,UAAU,CAACa,iBAAiB,EAAEN,OAAO,CAACU,OAAO,CAAC;IAChF,OAAO;MACLL,IAAI,EAAEI;IACR,CAAC;EACH,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,mBAAmB,EAAE,SAASA,mBAAmBA,CAACC,gBAAgB,EAAE;IAClE,OAAOA,gBAAgB;EACzB;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}