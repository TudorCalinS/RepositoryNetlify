{"ast":null,"code":"import { getPropertyByPath } from \"./utils.js\";\nexport var HIGHLIGHT_TAGS = {\n  highlightPreTag: \"<ais-highlight-0000000000>\",\n  highlightPostTag: \"</ais-highlight-0000000000>\"\n};\n\n/**\r\n * Parses an highlighted attribute into an array of objects with the string value, and\r\n * a boolean that indicated if this part is highlighted.\r\n *\r\n * @param {string} preTag - string used to identify the start of an highlighted value\r\n * @param {string} postTag - string used to identify the end of an highlighted value\r\n * @param {string} highlightedValue - highlighted attribute as returned by Algolia highlight feature\r\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\r\n */\nfunction parseHighlightedAttribute(_ref) {\n  var preTag = _ref.preTag,\n    postTag = _ref.postTag,\n    _ref$highlightedValue = _ref.highlightedValue,\n    highlightedValue = _ref$highlightedValue === void 0 ? '' : _ref$highlightedValue;\n  var splitByPreTag = highlightedValue.split(preTag);\n  var firstValue = splitByPreTag.shift();\n  var elements = firstValue === '' ? [] : [{\n    value: firstValue,\n    isHighlighted: false\n  }];\n  if (postTag === preTag) {\n    var isHighlighted = true;\n    splitByPreTag.forEach(function (split) {\n      elements.push({\n        value: split,\n        isHighlighted: isHighlighted\n      });\n      isHighlighted = !isHighlighted;\n    });\n  } else {\n    splitByPreTag.forEach(function (split) {\n      var splitByPostTag = split.split(postTag);\n      elements.push({\n        value: splitByPostTag[0],\n        isHighlighted: true\n      });\n      if (splitByPostTag[1] !== '') {\n        elements.push({\n          value: splitByPostTag[1],\n          isHighlighted: false\n        });\n      }\n    });\n  }\n  return elements;\n}\n\n/**\r\n * Find an highlighted attribute given an `attribute` and an `highlightProperty`, parses it,\r\n * and provided an array of objects with the string value and a boolean if this\r\n * value is highlighted.\r\n *\r\n * In order to use this feature, highlight must be activated in the configuration of\r\n * the index. The `preTag` and `postTag` attributes are respectively highlightPreTag and\r\n * highlightPostTag in Algolia configuration.\r\n *\r\n * @param {string} preTag - string used to identify the start of an highlighted value\r\n * @param {string} postTag - string used to identify the end of an highlighted value\r\n * @param {string} highlightProperty - the property that contains the highlight structure in the results\r\n * @param {string} attribute - the highlighted attribute to look for\r\n * @param {object} hit - the actual hit returned by Algolia.\r\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\r\n */\nexport function parseAlgoliaHit(_ref2) {\n  var _ref2$preTag = _ref2.preTag,\n    preTag = _ref2$preTag === void 0 ? '<em>' : _ref2$preTag,\n    _ref2$postTag = _ref2.postTag,\n    postTag = _ref2$postTag === void 0 ? '</em>' : _ref2$postTag,\n    highlightProperty = _ref2.highlightProperty,\n    attribute = _ref2.attribute,\n    hit = _ref2.hit;\n  if (!hit) throw new Error('`hit`, the matching record, must be provided');\n  var highlightObject = getPropertyByPath(hit[highlightProperty], attribute) || {};\n  if (Array.isArray(highlightObject)) {\n    return highlightObject.map(function (item) {\n      return parseHighlightedAttribute({\n        preTag: preTag,\n        postTag: postTag,\n        highlightedValue: item.value\n      });\n    });\n  }\n  return parseHighlightedAttribute({\n    preTag: preTag,\n    postTag: postTag,\n    highlightedValue: highlightObject.value\n  });\n}","map":{"version":3,"names":["getPropertyByPath","HIGHLIGHT_TAGS","highlightPreTag","highlightPostTag","parseHighlightedAttribute","_ref","preTag","postTag","_ref$highlightedValue","highlightedValue","splitByPreTag","split","firstValue","shift","elements","value","isHighlighted","forEach","push","splitByPostTag","parseAlgoliaHit","_ref2","_ref2$preTag","_ref2$postTag","highlightProperty","attribute","hit","Error","highlightObject","Array","isArray","map","item"],"sources":["C:/Users/tudor/propr/RepositoryNetlify/node_modules/react-instantsearch-core/dist/es/core/highlight.js"],"sourcesContent":["import { getPropertyByPath } from \"./utils.js\";\r\nexport var HIGHLIGHT_TAGS = {\r\n  highlightPreTag: \"<ais-highlight-0000000000>\",\r\n  highlightPostTag: \"</ais-highlight-0000000000>\"\r\n};\r\n\r\n/**\r\n * Parses an highlighted attribute into an array of objects with the string value, and\r\n * a boolean that indicated if this part is highlighted.\r\n *\r\n * @param {string} preTag - string used to identify the start of an highlighted value\r\n * @param {string} postTag - string used to identify the end of an highlighted value\r\n * @param {string} highlightedValue - highlighted attribute as returned by Algolia highlight feature\r\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\r\n */\r\nfunction parseHighlightedAttribute(_ref) {\r\n  var preTag = _ref.preTag,\r\n    postTag = _ref.postTag,\r\n    _ref$highlightedValue = _ref.highlightedValue,\r\n    highlightedValue = _ref$highlightedValue === void 0 ? '' : _ref$highlightedValue;\r\n  var splitByPreTag = highlightedValue.split(preTag);\r\n  var firstValue = splitByPreTag.shift();\r\n  var elements = firstValue === '' ? [] : [{\r\n    value: firstValue,\r\n    isHighlighted: false\r\n  }];\r\n  if (postTag === preTag) {\r\n    var isHighlighted = true;\r\n    splitByPreTag.forEach(function (split) {\r\n      elements.push({\r\n        value: split,\r\n        isHighlighted: isHighlighted\r\n      });\r\n      isHighlighted = !isHighlighted;\r\n    });\r\n  } else {\r\n    splitByPreTag.forEach(function (split) {\r\n      var splitByPostTag = split.split(postTag);\r\n      elements.push({\r\n        value: splitByPostTag[0],\r\n        isHighlighted: true\r\n      });\r\n      if (splitByPostTag[1] !== '') {\r\n        elements.push({\r\n          value: splitByPostTag[1],\r\n          isHighlighted: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Find an highlighted attribute given an `attribute` and an `highlightProperty`, parses it,\r\n * and provided an array of objects with the string value and a boolean if this\r\n * value is highlighted.\r\n *\r\n * In order to use this feature, highlight must be activated in the configuration of\r\n * the index. The `preTag` and `postTag` attributes are respectively highlightPreTag and\r\n * highlightPostTag in Algolia configuration.\r\n *\r\n * @param {string} preTag - string used to identify the start of an highlighted value\r\n * @param {string} postTag - string used to identify the end of an highlighted value\r\n * @param {string} highlightProperty - the property that contains the highlight structure in the results\r\n * @param {string} attribute - the highlighted attribute to look for\r\n * @param {object} hit - the actual hit returned by Algolia.\r\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\r\n */\r\nexport function parseAlgoliaHit(_ref2) {\r\n  var _ref2$preTag = _ref2.preTag,\r\n    preTag = _ref2$preTag === void 0 ? '<em>' : _ref2$preTag,\r\n    _ref2$postTag = _ref2.postTag,\r\n    postTag = _ref2$postTag === void 0 ? '</em>' : _ref2$postTag,\r\n    highlightProperty = _ref2.highlightProperty,\r\n    attribute = _ref2.attribute,\r\n    hit = _ref2.hit;\r\n  if (!hit) throw new Error('`hit`, the matching record, must be provided');\r\n  var highlightObject = getPropertyByPath(hit[highlightProperty], attribute) || {};\r\n  if (Array.isArray(highlightObject)) {\r\n    return highlightObject.map(function (item) {\r\n      return parseHighlightedAttribute({\r\n        preTag: preTag,\r\n        postTag: postTag,\r\n        highlightedValue: item.value\r\n      });\r\n    });\r\n  }\r\n  return parseHighlightedAttribute({\r\n    preTag: preTag,\r\n    postTag: postTag,\r\n    highlightedValue: highlightObject.value\r\n  });\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}