{"ast":null,"code":"import { defer } from \"./utils.js\";\nexport default function createWidgetsManager(onWidgetsUpdate) {\n  var widgets = [];\n  // Is an update scheduled?\n  var scheduled = false;\n\n  // The state manager's updates need to be batched since more than one\n  // component can register or unregister widgets during the same tick.\n  function scheduleUpdate() {\n    if (scheduled) {\n      return;\n    }\n    scheduled = true;\n    defer(function () {\n      scheduled = false;\n      onWidgetsUpdate();\n    });\n  }\n  return {\n    registerWidget: function registerWidget(widget) {\n      widgets.push(widget);\n      scheduleUpdate();\n      return function unregisterWidget() {\n        widgets.splice(widgets.indexOf(widget), 1);\n        scheduleUpdate();\n      };\n    },\n    update: scheduleUpdate,\n    getWidgets: function getWidgets() {\n      return widgets;\n    }\n  };\n}","map":{"version":3,"names":["defer","createWidgetsManager","onWidgetsUpdate","widgets","scheduled","scheduleUpdate","registerWidget","widget","push","unregisterWidget","splice","indexOf","update","getWidgets"],"sources":["C:/Users/tudor/propr/RepositoryNetlify/node_modules/react-instantsearch-core/dist/es/core/createWidgetsManager.js"],"sourcesContent":["import { defer } from \"./utils.js\";\r\nexport default function createWidgetsManager(onWidgetsUpdate) {\r\n  var widgets = [];\r\n  // Is an update scheduled?\r\n  var scheduled = false;\r\n\r\n  // The state manager's updates need to be batched since more than one\r\n  // component can register or unregister widgets during the same tick.\r\n  function scheduleUpdate() {\r\n    if (scheduled) {\r\n      return;\r\n    }\r\n    scheduled = true;\r\n    defer(function () {\r\n      scheduled = false;\r\n      onWidgetsUpdate();\r\n    });\r\n  }\r\n  return {\r\n    registerWidget: function registerWidget(widget) {\r\n      widgets.push(widget);\r\n      scheduleUpdate();\r\n      return function unregisterWidget() {\r\n        widgets.splice(widgets.indexOf(widget), 1);\r\n        scheduleUpdate();\r\n      };\r\n    },\r\n    update: scheduleUpdate,\r\n    getWidgets: function getWidgets() {\r\n      return widgets;\r\n    }\r\n  };\r\n}"],"mappings":"AAAA,SAASA,KAAK,QAAQ,YAAY;AAClC,eAAe,SAASC,oBAAoBA,CAACC,eAAe,EAAE;EAC5D,IAAIC,OAAO,GAAG,EAAE;EAChB;EACA,IAAIC,SAAS,GAAG,KAAK;;EAErB;EACA;EACA,SAASC,cAAcA,CAAA,EAAG;IACxB,IAAID,SAAS,EAAE;MACb;IACF;IACAA,SAAS,GAAG,IAAI;IAChBJ,KAAK,CAAC,YAAY;MAChBI,SAAS,GAAG,KAAK;MACjBF,eAAe,CAAC,CAAC;IACnB,CAAC,CAAC;EACJ;EACA,OAAO;IACLI,cAAc,EAAE,SAASA,cAAcA,CAACC,MAAM,EAAE;MAC9CJ,OAAO,CAACK,IAAI,CAACD,MAAM,CAAC;MACpBF,cAAc,CAAC,CAAC;MAChB,OAAO,SAASI,gBAAgBA,CAAA,EAAG;QACjCN,OAAO,CAACO,MAAM,CAACP,OAAO,CAACQ,OAAO,CAACJ,MAAM,CAAC,EAAE,CAAC,CAAC;QAC1CF,cAAc,CAAC,CAAC;MAClB,CAAC;IACH,CAAC;IACDO,MAAM,EAAEP,cAAc;IACtBQ,UAAU,EAAE,SAASA,UAAUA,CAAA,EAAG;MAChC,OAAOV,OAAO;IAChB;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}