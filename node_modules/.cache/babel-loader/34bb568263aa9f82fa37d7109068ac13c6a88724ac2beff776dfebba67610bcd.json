{"ast":null,"code":"import { connectToggleRefinement } from 'react-instantsearch-core';\nimport ToggleRefinement from \"../components/ToggleRefinement.js\";\n\n/**\r\n * The ToggleRefinement provides an on/off filtering feature based on an attribute value.\r\n * @name ToggleRefinement\r\n * @kind widget\r\n * @requirements To use this widget, you'll need an attribute to toggle on.\r\n *\r\n * You can't toggle on null or not-null values. If you want to address this particular use-case you'll need to compute an\r\n * extra boolean attribute saying if the value exists or not. See this [thread](https://discourse.algolia.com/t/how-to-create-a-toggle-for-the-absence-of-a-string-attribute/2460) for more details.\r\n *\r\n * @propType {string} attribute - Name of the attribute on which to apply the `value` refinement. Required when `value` is present.\r\n * @propType {string} label - Label for the toggle.\r\n * @propType {any} value - Value of the refinement to apply on `attribute` when checked.\r\n * @propType {boolean} [defaultRefinement=false] - Default state of the widget. Should the toggle be checked by default?\r\n * @themeKey ais-ToggleRefinement - the root div of the widget\r\n * @themeKey ais-ToggleRefinement-list - the list of toggles\r\n * @themeKey ais-ToggleRefinement-item - the toggle list item\r\n * @themeKey ais-ToggleRefinement-label - the label of each toggle item\r\n * @themeKey ais-ToggleRefinement-checkbox - the checkbox input of each toggle item\r\n * @themeKey ais-ToggleRefinement-labelText - the label text of each toggle item\r\n * @example\r\n * import React from 'react';\r\n * import algoliasearch from 'algoliasearch/lite';\r\n * import { InstantSearch, ToggleRefinement } from 'react-instantsearch-dom';\r\n *\r\n * const searchClient = algoliasearch(\r\n *   'latency',\r\n *   '6be0576ff61c053d5f9a3225e2a90f76'\r\n * );\r\n *\r\n * const App = () => (\r\n *   <InstantSearch\r\n *     searchClient={searchClient}\r\n *     indexName=\"instant_search\"\r\n *   >\r\n *     <ToggleRefinement\r\n *       attribute=\"free_shipping\"\r\n *       label=\"Free Shipping\"\r\n *       value={true}\r\n *     />\r\n *   </InstantSearch>\r\n * );\r\n */\n\nexport default connectToggleRefinement(ToggleRefinement, {\n  $$widgetType: 'ais.toggleRefinement'\n});","map":{"version":3,"names":["connectToggleRefinement","ToggleRefinement","$$widgetType"],"sources":["C:/Users/tudor/propr/RepositoryNetlify/node_modules/react-instantsearch-dom/dist/es/widgets/ToggleRefinement.js"],"sourcesContent":["import { connectToggleRefinement } from 'react-instantsearch-core';\r\nimport ToggleRefinement from \"../components/ToggleRefinement.js\";\r\n\r\n/**\r\n * The ToggleRefinement provides an on/off filtering feature based on an attribute value.\r\n * @name ToggleRefinement\r\n * @kind widget\r\n * @requirements To use this widget, you'll need an attribute to toggle on.\r\n *\r\n * You can't toggle on null or not-null values. If you want to address this particular use-case you'll need to compute an\r\n * extra boolean attribute saying if the value exists or not. See this [thread](https://discourse.algolia.com/t/how-to-create-a-toggle-for-the-absence-of-a-string-attribute/2460) for more details.\r\n *\r\n * @propType {string} attribute - Name of the attribute on which to apply the `value` refinement. Required when `value` is present.\r\n * @propType {string} label - Label for the toggle.\r\n * @propType {any} value - Value of the refinement to apply on `attribute` when checked.\r\n * @propType {boolean} [defaultRefinement=false] - Default state of the widget. Should the toggle be checked by default?\r\n * @themeKey ais-ToggleRefinement - the root div of the widget\r\n * @themeKey ais-ToggleRefinement-list - the list of toggles\r\n * @themeKey ais-ToggleRefinement-item - the toggle list item\r\n * @themeKey ais-ToggleRefinement-label - the label of each toggle item\r\n * @themeKey ais-ToggleRefinement-checkbox - the checkbox input of each toggle item\r\n * @themeKey ais-ToggleRefinement-labelText - the label text of each toggle item\r\n * @example\r\n * import React from 'react';\r\n * import algoliasearch from 'algoliasearch/lite';\r\n * import { InstantSearch, ToggleRefinement } from 'react-instantsearch-dom';\r\n *\r\n * const searchClient = algoliasearch(\r\n *   'latency',\r\n *   '6be0576ff61c053d5f9a3225e2a90f76'\r\n * );\r\n *\r\n * const App = () => (\r\n *   <InstantSearch\r\n *     searchClient={searchClient}\r\n *     indexName=\"instant_search\"\r\n *   >\r\n *     <ToggleRefinement\r\n *       attribute=\"free_shipping\"\r\n *       label=\"Free Shipping\"\r\n *       value={true}\r\n *     />\r\n *   </InstantSearch>\r\n * );\r\n */\r\n\r\nexport default connectToggleRefinement(ToggleRefinement, {\r\n  $$widgetType: 'ais.toggleRefinement'\r\n});"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,0BAA0B;AAClE,OAAOC,gBAAgB,MAAM,mCAAmC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeD,uBAAuB,CAACC,gBAAgB,EAAE;EACvDC,YAAY,EAAE;AAChB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}