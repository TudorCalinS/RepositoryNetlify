{"ast":null,"code":"import createConnector from \"../core/createConnector.js\";\nimport { HIGHLIGHT_TAGS, parseAlgoliaHit } from \"../core/highlight.js\";\nvar highlight = function highlight(_ref) {\n  var attribute = _ref.attribute,\n    hit = _ref.hit,\n    highlightProperty = _ref.highlightProperty,\n    _ref$preTag = _ref.preTag,\n    preTag = _ref$preTag === void 0 ? HIGHLIGHT_TAGS.highlightPreTag : _ref$preTag,\n    _ref$postTag = _ref.postTag,\n    postTag = _ref$postTag === void 0 ? HIGHLIGHT_TAGS.highlightPostTag : _ref$postTag;\n  return parseAlgoliaHit({\n    attribute: attribute,\n    highlightProperty: highlightProperty,\n    hit: hit,\n    preTag: preTag,\n    postTag: postTag\n  });\n};\n\n/**\r\n * connectHighlight connector provides the logic to create an highlighter\r\n * component that will retrieve, parse and render an highlighted attribute\r\n * from an Algolia hit.\r\n * @name connectHighlight\r\n * @kind connector\r\n * @category connector\r\n * @providedPropType {function} highlight - function to retrieve and parse an attribute from a hit. It takes a configuration object with 3 attributes: `highlightProperty` which is the property that contains the highlight structure from the records, `attribute` which is the name of the attribute (it can be either a string or an array of strings) to look for and `hit` which is the hit from Algolia. It returns an array of objects `{value: string, isHighlighted: boolean}`. If the element that corresponds to the attribute is an array of strings, it will return a nested array of objects.\r\n * @example\r\n * import React from 'react';\r\n * import algoliasearch from 'algoliasearch/lite';\r\n * import { InstantSearch, SearchBox, Hits, connectHighlight } from 'react-instantsearch-dom';\r\n *\r\n * const searchClient = algoliasearch(\r\n *   'latency',\r\n *   '6be0576ff61c053d5f9a3225e2a90f76'\r\n * );\r\n *\r\n * const CustomHighlight = connectHighlight(\r\n *   ({ highlight, attribute, hit, highlightProperty }) => {\r\n *     const highlights = highlight({\r\n *       highlightProperty: '_highlightResult',\r\n *       attribute,\r\n *       hit\r\n *     });\r\n *\r\n *     return highlights.map(part => part.isHighlighted ? (\r\n *       <mark>{part.value}</mark>\r\n *     ) : (\r\n *       <span>{part.value}</span>\r\n *     ));\r\n *   }\r\n * );\r\n *\r\n * const Hit = ({ hit }) => (\r\n *   <p>\r\n *     <CustomHighlight attribute=\"name\" hit={hit} />\r\n *   </p>\r\n * );\r\n *\r\n * const App = () => (\r\n *   <InstantSearch\r\n *     searchClient={searchClient}\r\n *     indexName=\"instant_search\"\r\n *   >\r\n *     <SearchBox defaultRefinement=\"pho\" />\r\n *     <Hits hitComponent={Hit} />\r\n *   </InstantSearch>\r\n * );\r\n */\nexport default createConnector({\n  displayName: 'AlgoliaHighlighter',\n  $$type: 'ais.highlighter',\n  propTypes: {},\n  getProvidedProps: function getProvidedProps() {\n    return {\n      highlight: highlight\n    };\n  }\n});","map":{"version":3,"names":["createConnector","HIGHLIGHT_TAGS","parseAlgoliaHit","highlight","_ref","attribute","hit","highlightProperty","_ref$preTag","preTag","highlightPreTag","_ref$postTag","postTag","highlightPostTag","displayName","$$type","propTypes","getProvidedProps"],"sources":["C:/Users/tudor/propr/RepositoryNetlify/node_modules/react-instantsearch-core/dist/es/connectors/connectHighlight.js"],"sourcesContent":["import createConnector from \"../core/createConnector.js\";\r\nimport { HIGHLIGHT_TAGS, parseAlgoliaHit } from \"../core/highlight.js\";\r\nvar highlight = function highlight(_ref) {\r\n  var attribute = _ref.attribute,\r\n    hit = _ref.hit,\r\n    highlightProperty = _ref.highlightProperty,\r\n    _ref$preTag = _ref.preTag,\r\n    preTag = _ref$preTag === void 0 ? HIGHLIGHT_TAGS.highlightPreTag : _ref$preTag,\r\n    _ref$postTag = _ref.postTag,\r\n    postTag = _ref$postTag === void 0 ? HIGHLIGHT_TAGS.highlightPostTag : _ref$postTag;\r\n  return parseAlgoliaHit({\r\n    attribute: attribute,\r\n    highlightProperty: highlightProperty,\r\n    hit: hit,\r\n    preTag: preTag,\r\n    postTag: postTag\r\n  });\r\n};\r\n\r\n/**\r\n * connectHighlight connector provides the logic to create an highlighter\r\n * component that will retrieve, parse and render an highlighted attribute\r\n * from an Algolia hit.\r\n * @name connectHighlight\r\n * @kind connector\r\n * @category connector\r\n * @providedPropType {function} highlight - function to retrieve and parse an attribute from a hit. It takes a configuration object with 3 attributes: `highlightProperty` which is the property that contains the highlight structure from the records, `attribute` which is the name of the attribute (it can be either a string or an array of strings) to look for and `hit` which is the hit from Algolia. It returns an array of objects `{value: string, isHighlighted: boolean}`. If the element that corresponds to the attribute is an array of strings, it will return a nested array of objects.\r\n * @example\r\n * import React from 'react';\r\n * import algoliasearch from 'algoliasearch/lite';\r\n * import { InstantSearch, SearchBox, Hits, connectHighlight } from 'react-instantsearch-dom';\r\n *\r\n * const searchClient = algoliasearch(\r\n *   'latency',\r\n *   '6be0576ff61c053d5f9a3225e2a90f76'\r\n * );\r\n *\r\n * const CustomHighlight = connectHighlight(\r\n *   ({ highlight, attribute, hit, highlightProperty }) => {\r\n *     const highlights = highlight({\r\n *       highlightProperty: '_highlightResult',\r\n *       attribute,\r\n *       hit\r\n *     });\r\n *\r\n *     return highlights.map(part => part.isHighlighted ? (\r\n *       <mark>{part.value}</mark>\r\n *     ) : (\r\n *       <span>{part.value}</span>\r\n *     ));\r\n *   }\r\n * );\r\n *\r\n * const Hit = ({ hit }) => (\r\n *   <p>\r\n *     <CustomHighlight attribute=\"name\" hit={hit} />\r\n *   </p>\r\n * );\r\n *\r\n * const App = () => (\r\n *   <InstantSearch\r\n *     searchClient={searchClient}\r\n *     indexName=\"instant_search\"\r\n *   >\r\n *     <SearchBox defaultRefinement=\"pho\" />\r\n *     <Hits hitComponent={Hit} />\r\n *   </InstantSearch>\r\n * );\r\n */\r\nexport default createConnector({\r\n  displayName: 'AlgoliaHighlighter',\r\n  $$type: 'ais.highlighter',\r\n  propTypes: {},\r\n  getProvidedProps: function getProvidedProps() {\r\n    return {\r\n      highlight: highlight\r\n    };\r\n  }\r\n});"],"mappings":"AAAA,OAAOA,eAAe,MAAM,4BAA4B;AACxD,SAASC,cAAc,EAAEC,eAAe,QAAQ,sBAAsB;AACtE,IAAIC,SAAS,GAAG,SAASA,SAASA,CAACC,IAAI,EAAE;EACvC,IAAIC,SAAS,GAAGD,IAAI,CAACC,SAAS;IAC5BC,GAAG,GAAGF,IAAI,CAACE,GAAG;IACdC,iBAAiB,GAAGH,IAAI,CAACG,iBAAiB;IAC1CC,WAAW,GAAGJ,IAAI,CAACK,MAAM;IACzBA,MAAM,GAAGD,WAAW,KAAK,KAAK,CAAC,GAAGP,cAAc,CAACS,eAAe,GAAGF,WAAW;IAC9EG,YAAY,GAAGP,IAAI,CAACQ,OAAO;IAC3BA,OAAO,GAAGD,YAAY,KAAK,KAAK,CAAC,GAAGV,cAAc,CAACY,gBAAgB,GAAGF,YAAY;EACpF,OAAOT,eAAe,CAAC;IACrBG,SAAS,EAAEA,SAAS;IACpBE,iBAAiB,EAAEA,iBAAiB;IACpCD,GAAG,EAAEA,GAAG;IACRG,MAAM,EAAEA,MAAM;IACdG,OAAO,EAAEA;EACX,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeZ,eAAe,CAAC;EAC7Bc,WAAW,EAAE,oBAAoB;EACjCC,MAAM,EAAE,iBAAiB;EACzBC,SAAS,EAAE,CAAC,CAAC;EACbC,gBAAgB,EAAE,SAASA,gBAAgBA,CAAA,EAAG;IAC5C,OAAO;MACLd,SAAS,EAAEA;IACb,CAAC;EACH;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}