{"ast":null,"code":"import { connectInfiniteHits } from 'react-instantsearch-core';\nimport InfiniteHits from \"../components/InfiniteHits.js\";\n\n/**\r\n * Displays an infinite list of hits along with a **load more** button.\r\n *\r\n * To configure the number of hits being shown, use the [HitsPerPage widget](widgets/HitsPerPage.html),\r\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or the [Configure widget](widgets/Configure.html).\r\n *\r\n * @name InfiniteHits\r\n * @kind widget\r\n * @propType {Component} [hitComponent] - Component used for rendering each hit from\r\n *   the results. If it is not provided the rendering defaults to displaying the\r\n *   hit in its JSON form. The component will be called with a `hit` prop.\r\n * @themeKey ais-InfiniteHits - the root div of the widget\r\n * @themeKey ais-InfiniteHits-list - the list of hits\r\n * @themeKey ais-InfiniteHits-item - the hit list item\r\n * @themeKey ais-InfiniteHits-loadMore - the button used to display more results\r\n * @themeKey ais-InfiniteHits-loadMore--disabled - the disabled button used to display more results\r\n * @translationKey loadMore - the label of load more button\r\n * @example\r\n * import React from 'react';\r\n * import algoliasearch from 'algoliasearch/lite';\r\n * import { InstantSearch, InfiniteHits } from 'react-instantsearch-dom';\r\n *\r\n * const searchClient = algoliasearch(\r\n *   'latency',\r\n *   '6be0576ff61c053d5f9a3225e2a90f76'\r\n * );\r\n *\r\n * const App = () => (\r\n *   <InstantSearch\r\n *     searchClient={searchClient}\r\n *     indexName=\"instant_search\"\r\n *   >\r\n *     <InfiniteHits />\r\n *   </InstantSearch>\r\n * );\r\n */\n\nexport default connectInfiniteHits(InfiniteHits, {\n  $$widgetType: 'ais.infiniteHits'\n});","map":{"version":3,"names":["connectInfiniteHits","InfiniteHits","$$widgetType"],"sources":["C:/Users/tudor/propr/RepositoryNetlify/node_modules/react-instantsearch-dom/dist/es/widgets/InfiniteHits.js"],"sourcesContent":["import { connectInfiniteHits } from 'react-instantsearch-core';\r\nimport InfiniteHits from \"../components/InfiniteHits.js\";\r\n\r\n/**\r\n * Displays an infinite list of hits along with a **load more** button.\r\n *\r\n * To configure the number of hits being shown, use the [HitsPerPage widget](widgets/HitsPerPage.html),\r\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or the [Configure widget](widgets/Configure.html).\r\n *\r\n * @name InfiniteHits\r\n * @kind widget\r\n * @propType {Component} [hitComponent] - Component used for rendering each hit from\r\n *   the results. If it is not provided the rendering defaults to displaying the\r\n *   hit in its JSON form. The component will be called with a `hit` prop.\r\n * @themeKey ais-InfiniteHits - the root div of the widget\r\n * @themeKey ais-InfiniteHits-list - the list of hits\r\n * @themeKey ais-InfiniteHits-item - the hit list item\r\n * @themeKey ais-InfiniteHits-loadMore - the button used to display more results\r\n * @themeKey ais-InfiniteHits-loadMore--disabled - the disabled button used to display more results\r\n * @translationKey loadMore - the label of load more button\r\n * @example\r\n * import React from 'react';\r\n * import algoliasearch from 'algoliasearch/lite';\r\n * import { InstantSearch, InfiniteHits } from 'react-instantsearch-dom';\r\n *\r\n * const searchClient = algoliasearch(\r\n *   'latency',\r\n *   '6be0576ff61c053d5f9a3225e2a90f76'\r\n * );\r\n *\r\n * const App = () => (\r\n *   <InstantSearch\r\n *     searchClient={searchClient}\r\n *     indexName=\"instant_search\"\r\n *   >\r\n *     <InfiniteHits />\r\n *   </InstantSearch>\r\n * );\r\n */\r\n\r\nexport default connectInfiniteHits(InfiniteHits, {\r\n  $$widgetType: 'ais.infiniteHits'\r\n});"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAOC,YAAY,MAAM,+BAA+B;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeD,mBAAmB,CAACC,YAAY,EAAE;EAC/CC,YAAY,EAAE;AAChB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}