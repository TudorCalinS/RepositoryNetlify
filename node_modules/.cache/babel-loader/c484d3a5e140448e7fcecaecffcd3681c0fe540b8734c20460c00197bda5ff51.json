{"ast":null,"code":"'use strict';\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar find = require('../functions/find');\nvar intersection = require('../functions/intersection');\nvar merge = require('../functions/merge');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar omit = require('../functions/omit');\nvar valToNumber = require('../functions/valToNumber');\nvar isValidUserToken = require('../utils/isValidUserToken');\nvar RefinementList = require('./RefinementList');\n\n/**\r\n * isEqual, but only for numeric refinement values, possible values:\r\n * - 5\r\n * - [5]\r\n * - [[5]]\r\n * - [[5,5],[4]]\r\n * @param {any} a numeric refinement value\r\n * @param {any} b numeric refinement value\r\n * @return {boolean} true if the values are equal\r\n */\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every(function (el, i) {\n      return isEqualNumericRefinement(b[i], el);\n    });\n  }\n  return a === b;\n}\n\n/**\r\n * like _.find but using deep equality to be able to use it\r\n * to find arrays.\r\n * @private\r\n * @param {any[]} array array to search into (elements are base or array of base)\r\n * @param {any} searchedValue the value we're looking for (base or array of base)\r\n * @return {any} the searched value or undefined\r\n */\nfunction findArray(array, searchedValue) {\n  return find(array, function (currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n\n/**\r\n * The facet list is the structure used to store the list of values used to\r\n * filter a single attribute.\r\n * @typedef {string[]} SearchParameters.FacetList\r\n */\n\n/**\r\n * Structure to store numeric filters with the operator as the key. The supported operators\r\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\r\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\r\n */\n\n/**\r\n * SearchParameters is the data structure that contains all the information\r\n * usable for making a search to Algolia API. It doesn't do the search itself,\r\n * nor does it contains logic about the parameters.\r\n * It is an immutable object, therefore it has been created in a way that each\r\n * changes does not change the object itself but returns a copy with the\r\n * modification.\r\n * This object should probably not be instantiated outside of the helper. It will\r\n * be provided when needed. This object is documented for reference as you'll\r\n * get it from events generated by the {@link AlgoliaSearchHelper}.\r\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\r\n * @constructor\r\n * @classdesc contains all the parameters of a search\r\n * @param {object|SearchParameters} newParameters existing parameters or partial object\r\n * for the properties of a new SearchParameters\r\n * @see SearchParameters.make\r\n * @example <caption>SearchParameters of the first query in\r\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\r\n{\r\n   \"query\": \"\",\r\n   \"disjunctiveFacets\": [\r\n      \"customerReviewCount\",\r\n      \"category\",\r\n      \"salePrice_range\",\r\n      \"manufacturer\"\r\n  ],\r\n   \"maxValuesPerFacet\": 30,\r\n   \"page\": 0,\r\n   \"hitsPerPage\": 10,\r\n   \"facets\": [\r\n      \"type\",\r\n      \"shipping\"\r\n  ]\r\n}\r\n */\nfunction SearchParameters(newParameters) {\n  var params = newParameters ? SearchParameters._parseNumbers(newParameters) : {};\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    // eslint-disable-next-line no-console\n    console.warn('[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}');\n  }\n  /**\r\n   * This attribute contains the list of all the conjunctive facets\r\n   * used. This list will be added to requested facets in the\r\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\r\n   * @member {string[]}\r\n   */\n  this.facets = params.facets || [];\n  /**\r\n   * This attribute contains the list of all the disjunctive facets\r\n   * used. This list will be added to requested facets in the\r\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\r\n   * @member {string[]}\r\n   */\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\r\n   * This attribute contains the list of all the hierarchical facets\r\n   * used. This list will be added to requested facets in the\r\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\r\n   * Hierarchical facets are a sub type of disjunctive facets that\r\n   * let you filter faceted attributes hierarchically.\r\n   * @member {string[]|object[]}\r\n   */\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\n\n  // Refinements\n  /**\r\n   * This attribute contains all the filters that need to be\r\n   * applied on the conjunctive facets. Each facet must be properly\r\n   * defined in the `facets` attribute.\r\n   *\r\n   * The key is the name of the facet, and the `FacetList` contains all\r\n   * filters selected for the associated facet name.\r\n   *\r\n   * When querying algolia, the values stored in this attribute will\r\n   * be translated into the `facetFilters` attribute.\r\n   * @member {Object.<string, SearchParameters.FacetList>}\r\n   */\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\r\n   * This attribute contains all the filters that need to be\r\n   * excluded from the conjunctive facets. Each facet must be properly\r\n   * defined in the `facets` attribute.\r\n   *\r\n   * The key is the name of the facet, and the `FacetList` contains all\r\n   * filters excluded for the associated facet name.\r\n   *\r\n   * When querying algolia, the values stored in this attribute will\r\n   * be translated into the `facetFilters` attribute.\r\n   * @member {Object.<string, SearchParameters.FacetList>}\r\n   */\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\r\n   * This attribute contains all the filters that need to be\r\n   * applied on the disjunctive facets. Each facet must be properly\r\n   * defined in the `disjunctiveFacets` attribute.\r\n   *\r\n   * The key is the name of the facet, and the `FacetList` contains all\r\n   * filters selected for the associated facet name.\r\n   *\r\n   * When querying algolia, the values stored in this attribute will\r\n   * be translated into the `facetFilters` attribute.\r\n   * @member {Object.<string, SearchParameters.FacetList>}\r\n   */\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\r\n   * This attribute contains all the filters that need to be\r\n   * applied on the numeric attributes.\r\n   *\r\n   * The key is the name of the attribute, and the value is the\r\n   * filters to apply to this attribute.\r\n   *\r\n   * When querying algolia, the values stored in this attribute will\r\n   * be translated into the `numericFilters` attribute.\r\n   * @member {Object.<string, SearchParameters.OperatorList>}\r\n   */\n  this.numericRefinements = params.numericRefinements || {};\n  /**\r\n   * This attribute contains all the tags used to refine the query.\r\n   *\r\n   * When querying algolia, the values stored in this attribute will\r\n   * be translated into the `tagFilters` attribute.\r\n   * @member {string[]}\r\n   */\n  this.tagRefinements = params.tagRefinements || [];\n  /**\r\n   * This attribute contains all the filters that need to be\r\n   * applied on the hierarchical facets. Each facet must be properly\r\n   * defined in the `hierarchicalFacets` attribute.\r\n   *\r\n   * The key is the name of the facet, and the `FacetList` contains all\r\n   * filters selected for the associated facet name. The FacetList values\r\n   * are structured as a string that contain the values for each level\r\n   * separated by the configured separator.\r\n   *\r\n   * When querying algolia, the values stored in this attribute will\r\n   * be translated into the `facetFilters` attribute.\r\n   * @member {Object.<string, SearchParameters.FacetList>}\r\n   */\n  this.hierarchicalFacetsRefinements = params.hierarchicalFacetsRefinements || {};\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  Object.keys(params).forEach(function (paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n\n/**\r\n * List all the properties in SearchParameters and therefore all the known Algolia properties\r\n * This doesn't contain any beta/hidden features.\r\n * @private\r\n */\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n\n/**\r\n * @private\r\n * @param {object} partialState full or part of a state\r\n * @return {object} a new object with the number keys as number\r\n */\nSearchParameters._parseNumbers = function (partialState) {\n  // Do not parse numbers again in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n  var numbers = {};\n  var numberKeys = ['aroundPrecision', 'aroundRadius', 'getRankingInfo', 'minWordSizefor2Typos', 'minWordSizefor1Typo', 'page', 'maxValuesPerFacet', 'distinct', 'minimumAroundRadius', 'hitsPerPage', 'minProximity'];\n  numberKeys.forEach(function (k) {\n    var value = partialState[k];\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      // global isNaN is ok to use here, value is only number or NaN\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  });\n\n  // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function (geoRect) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function (value) {\n          return parseFloat(value);\n        });\n      }\n      return geoRect;\n    });\n  }\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function (attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function (v) {\n          if (Array.isArray(v)) {\n            return v.map(function (vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n  return merge({}, partialState, numbers);\n};\n\n/**\r\n * Factory for SearchParameters\r\n * @param {object|SearchParameters} newParameters existing parameters or partial\r\n * object for the properties of a new SearchParameters\r\n * @return {SearchParameters} frozen instance of SearchParameters\r\n */\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function (facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length > 0 && currentRefinement[0].indexOf(facet.rootPath) !== 0) {\n        instance = instance.clearRefinements(facet.name);\n      }\n\n      // get it again in case it has been cleared\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(facet.name, facet.rootPath);\n      }\n    }\n  });\n  return instance;\n};\n\n/**\r\n * Validates the new parameters based on the previous state\r\n * @param {SearchParameters} currentState the current state\r\n * @param {object|SearchParameters} parameters the new parameters to set\r\n * @return {Error|null} Error if the modification is invalid, null otherwise\r\n */\nSearchParameters.validate = function (currentState, parameters) {\n  var params = parameters || {};\n  if (currentState.tagFilters && params.tagRefinements && params.tagRefinements.length > 0) {\n    return new Error('[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' + 'an error, if it is really what you want, you should first clear the tags with clearTags method.');\n  }\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error('[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' + 'an error, if it is not, you should first clear the tags with clearTags method.');\n  }\n  if (currentState.numericFilters && params.numericRefinements && objectHasKeys(params.numericRefinements)) {\n    return new Error(\"[Numeric filters] Can't switch from the advanced to the managed API. It\" + ' is probably an error, if this is really what you want, you have to first' + ' clear the numeric filters.');\n  }\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\"[Numeric filters] Can't switch from the managed API to the advanced. It\" + ' is probably an error, if this is really what you want, you have to first' + ' clear the numeric filters.');\n  }\n  return null;\n};\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n  /**\r\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\r\n   * @method\r\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\r\n   * - If not given, means to clear all the filters.\r\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\r\n   * - If `function`, means to clear all the refinements that return truthy values.\r\n   * @return {SearchParameters} new instance with filters cleared\r\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(this.facetsRefinements, attribute, 'conjunctiveFacet'),\n      facetsExcludes: RefinementList.clearRefinement(this.facetsExcludes, attribute, 'exclude'),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(this.disjunctiveFacetsRefinements, attribute, 'disjunctiveFacet'),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(this.hierarchicalFacetsRefinements, attribute, 'hierarchicalFacet')\n    };\n    if (patch.numericRefinements === this.numericRefinements && patch.facetsRefinements === this.facetsRefinements && patch.facetsExcludes === this.facetsExcludes && patch.disjunctiveFacetsRefinements === this.disjunctiveFacetsRefinements && patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements) {\n      return this;\n    }\n    return this.setQueryParameters(patch);\n  },\n  /**\r\n   * Remove all the refined tags from the SearchParameters\r\n   * @method\r\n   * @return {SearchParameters} new instance with tags cleared\r\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0) return this;\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: []\n    });\n  },\n  /**\r\n   * Set the index.\r\n   * @method\r\n   * @param {string} index the index name\r\n   * @return {SearchParameters} new instance\r\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n    return this.setQueryParameters({\n      index: index\n    });\n  },\n  /**\r\n   * Query setter\r\n   * @method\r\n   * @param {string} newQuery value for the new query\r\n   * @return {SearchParameters} new instance\r\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n    return this.setQueryParameters({\n      query: newQuery\n    });\n  },\n  /**\r\n   * Page setter\r\n   * @method\r\n   * @param {number} newPage new page number\r\n   * @return {SearchParameters} new instance\r\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n    return this.setQueryParameters({\n      page: newPage\n    });\n  },\n  /**\r\n   * Facets setter\r\n   * The facets are the simple facets, used for conjunctive (and) faceting.\r\n   * @method\r\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\r\n   * @return {SearchParameters} new instance\r\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets\n    });\n  },\n  /**\r\n   * Disjunctive facets setter\r\n   * Change the list of disjunctive (or) facets the helper chan handle.\r\n   * @method\r\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\r\n   * @return {SearchParameters} new instance\r\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets\n    });\n  },\n  /**\r\n   * HitsPerPage setter\r\n   * Hits per page represents the number of hits retrieved for this query\r\n   * @method\r\n   * @param {number} n number of hits retrieved per page of results\r\n   * @return {SearchParameters} new instance\r\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n    return this.setQueryParameters({\n      hitsPerPage: n\n    });\n  },\n  /**\r\n   * typoTolerance setter\r\n   * Set the value of typoTolerance\r\n   * @method\r\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\r\n   * @return {SearchParameters} new instance\r\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance\n    });\n  },\n  /**\r\n   * Add a numeric filter for a given attribute\r\n   * When value is an array, they are combined with OR\r\n   * When value is a single value, it will combined with AND\r\n   * @method\r\n   * @param {string} attribute attribute to set the filter on\r\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\r\n   * @param {number | number[]} value value of the filter\r\n   * @return {SearchParameters} new instance\r\n   * @example\r\n   * // for price = 50 or 40\r\n   * state.addNumericRefinement('price', '=', [50, 40]);\r\n   * @example\r\n   * // for size = 38 and 40\r\n   * state.addNumericRefinement('size', '=', 38);\r\n   * state.addNumericRefinement('size', '=', 40);\r\n   */\n  addNumericRefinement: function (attribute, operator, value) {\n    var val = valToNumber(value);\n    if (this.isNumericRefined(attribute, operator, val)) return this;\n    var mod = merge({}, this.numericRefinements);\n    mod[attribute] = merge({}, mod[attribute]);\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice();\n      // Add the element. Concat can't be used here because value can be an array.\n      mod[attribute][operator].push(val);\n    } else {\n      mod[attribute][operator] = [val];\n    }\n    return this.setQueryParameters({\n      numericRefinements: mod\n    });\n  },\n  /**\r\n   * Get the list of conjunctive refinements for a single facet\r\n   * @param {string} facetName name of the attribute used for faceting\r\n   * @return {string[]} list of refinements\r\n   */\n  getConjunctiveRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsRefinements[facetName] || [];\n  },\n  /**\r\n   * Get the list of disjunctive refinements for a single facet\r\n   * @param {string} facetName name of the attribute used for faceting\r\n   * @return {string[]} list of refinements\r\n   */\n  getDisjunctiveRefinements: function (facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n  /**\r\n   * Get the list of hierarchical refinements for a single facet\r\n   * @param {string} facetName name of the attribute used for faceting\r\n   * @return {string[]} list of refinements\r\n   */\n  getHierarchicalRefinement: function (facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n  /**\r\n   * Get the list of exclude refinements for a single facet\r\n   * @param {string} facetName name of the attribute used for faceting\r\n   * @return {string[]} list of refinements\r\n   */\n  getExcludeRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsExcludes[facetName] || [];\n  },\n  /**\r\n   * Remove all the numeric filter for a given (attribute, operator)\r\n   * @method\r\n   * @param {string} attribute attribute to set the filter on\r\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\r\n   * @param {number} [number] the value to be removed\r\n   * @return {SearchParameters} new instance\r\n   */\n  removeNumericRefinement: function (attribute, operator, number) {\n    var paramValue = number;\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (value, key) {\n          return key === attribute && value.op === operator && isEqualNumericRefinement(value.val, valToNumber(paramValue));\n        })\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (value, key) {\n          return key === attribute && value.op === operator;\n        })\n      });\n    }\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function (value, key) {\n        return key === attribute;\n      })\n    });\n  },\n  /**\r\n   * Get the list of numeric refinements for a single facet\r\n   * @param {string} facetName name of the attribute used for faceting\r\n   * @return {SearchParameters.OperatorList} list of refinements\r\n   */\n  getNumericRefinements: function (facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n  /**\r\n   * Return the current refinement for the (attribute, operator)\r\n   * @param {string} attribute attribute in the record\r\n   * @param {string} operator operator applied on the refined values\r\n   * @return {Array.<number|number[]>} refined values\r\n   */\n  getNumericRefinement: function (attribute, operator) {\n    return this.numericRefinements[attribute] && this.numericRefinements[attribute][operator];\n  },\n  /**\r\n   * Clear numeric filters.\r\n   * @method\r\n   * @private\r\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\r\n   * - If not given, means to clear all the filters.\r\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\r\n   * - If `function`, means to clear all the refinements that return truthy values.\r\n   * @return {Object.<string, OperatorList>} new numeric refinements\r\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(function (memo, key) {\n        var operators = numericRefinements[key];\n        var operatorList = {};\n        operators = operators || {};\n        Object.keys(operators).forEach(function (operator) {\n          var values = operators[operator] || [];\n          var outValues = [];\n          values.forEach(function (value) {\n            var predicateResult = attribute({\n              val: value,\n              op: operator\n            }, key, 'numeric');\n            if (!predicateResult) outValues.push(value);\n          });\n          if (outValues.length !== values.length) {\n            hasChanged = true;\n          }\n          operatorList[operator] = outValues;\n        });\n        memo[key] = operatorList;\n        return memo;\n      }, {});\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n\n    // We return nothing if the attribute is not undefined, a string or a function,\n    // as it is not a valid value for a refinement\n    return undefined;\n  },\n  /**\r\n   * Add a facet to the facets attribute of the helper configuration, if it\r\n   * isn't already present.\r\n   * @method\r\n   * @param {string} facet facet name to add\r\n   * @return {SearchParameters} new instance\r\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet])\n    });\n  },\n  /**\r\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\r\n   * configuration, if it isn't already present.\r\n   * @method\r\n   * @param {string} facet disjunctive facet name to add\r\n   * @return {SearchParameters} new instance\r\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet])\n    });\n  },\n  /**\r\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\r\n   * configuration.\r\n   * @method\r\n   * @param {object} hierarchicalFacet hierarchical facet to add\r\n   * @return {SearchParameters} new instance\r\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\r\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error('Cannot declare two hierarchical facets with the same name: `' + hierarchicalFacet.name + '`');\n    }\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet])\n    });\n  },\n  /**\r\n   * Add a refinement on a \"normal\" facet\r\n   * @method\r\n   * @param {string} facet attribute to apply the faceting on\r\n   * @param {string} value value of the attribute (will be converted to string)\r\n   * @return {SearchParameters} new instance\r\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\r\n   * Exclude a value from a \"normal\" facet\r\n   * @method\r\n   * @param {string} facet attribute to apply the exclusion on\r\n   * @param {string} value value of the attribute (will be converted to string)\r\n   * @return {SearchParameters} new instance\r\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\r\n   * Adds a refinement on a disjunctive facet.\r\n   * @method\r\n   * @param {string} facet attribute to apply the faceting on\r\n   * @param {string} value value of the attribute (will be converted to string)\r\n   * @return {SearchParameters} new instance\r\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\r\n   * addTagRefinement adds a tag to the list used to filter the results\r\n   * @param {string} tag tag to be added\r\n   * @return {SearchParameters} new instance\r\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag)\n    };\n    return this.setQueryParameters(modification);\n  },\n  /**\r\n   * Remove a facet from the facets attribute of the helper configuration, if it\r\n   * is present.\r\n   * @method\r\n   * @param {string} facet facet name to remove\r\n   * @return {SearchParameters} new instance\r\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function (f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\r\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\r\n   * helper configuration, if it is present.\r\n   * @method\r\n   * @param {string} facet disjunctive facet name to remove\r\n   * @return {SearchParameters} new instance\r\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function (f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\r\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\r\n   * helper configuration, if it is present.\r\n   * @method\r\n   * @param {string} facet hierarchical facet name to remove\r\n   * @return {SearchParameters} new instance\r\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function (f) {\n        return f.name !== facet;\n      })\n    });\n  },\n  /**\r\n   * Remove a refinement set on facet. If a value is provided, it will clear the\r\n   * refinement for the given value, otherwise it will clear all the refinement\r\n   * values for the faceted attribute.\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {string} [value] value used to filter\r\n   * @return {SearchParameters} new instance\r\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\r\n   * Remove a negative refinement on a facet\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {string} value value used to filter\r\n   * @return {SearchParameters} new instance\r\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\r\n   * Remove a refinement on a disjunctive facet\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {string} value value used to filter\r\n   * @return {SearchParameters} new instance\r\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\r\n   * Remove a tag from the list of tag refinements\r\n   * @method\r\n   * @param {string} tag the tag to remove\r\n   * @return {SearchParameters} new instance\r\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function (t) {\n        return t !== tag;\n      })\n    };\n    return this.setQueryParameters(modification);\n  },\n  /**\r\n   * Generic toggle refinement method to use with facet, disjunctive facets\r\n   * and hierarchical facets\r\n   * @param  {string} facet the facet to refine\r\n   * @param  {string} value the associated value\r\n   * @return {SearchParameters} new instance\r\n   * @throws will throw an error if the facet is not declared in the settings of the helper\r\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\r\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n  /**\r\n   * Generic toggle refinement method to use with facet, disjunctive facets\r\n   * and hierarchical facets\r\n   * @param  {string} facet the facet to refine\r\n   * @param  {string} value the associated value\r\n   * @return {SearchParameters} new instance\r\n   * @throws will throw an error if the facet is not declared in the settings of the helper\r\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n    throw new Error('Cannot refine the undeclared facet ' + facet + '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets');\n  },\n  /**\r\n   * Switch the refinement applied over a facet/value\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {value} value value used for filtering\r\n   * @return {SearchParameters} new instance\r\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\r\n   * Switch the refinement applied over a facet/value\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {value} value value used for filtering\r\n   * @return {SearchParameters} new instance\r\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\r\n   * Switch the refinement applied over a facet/value\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {value} value value used for filtering\r\n   * @return {SearchParameters} new instance\r\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\r\n   * Switch the refinement applied over a facet/value\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {value} value value used for filtering\r\n   * @return {SearchParameters} new instance\r\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration');\n    }\n    var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facet));\n    var mod = {};\n    var upOneOrMultipleLevel = this.hierarchicalFacetsRefinements[facet] !== undefined && this.hierarchicalFacetsRefinements[facet].length > 0 && (\n    // remove current refinement:\n    // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n    this.hierarchicalFacetsRefinements[facet][0] === value ||\n    // remove a parent refinement of the current refinement:\n    //  - refinement was 'beer > IPA > Flying dog'\n    //  - call is toggleRefine('beer > IPA')\n    //  - refinement should be `beer`\n    this.hierarchicalFacetsRefinements[facet][0].indexOf(value + separator) === 0);\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n  /**\r\n   * Adds a refinement on a hierarchical facet.\r\n   * @param {string} facet the facet name\r\n   * @param {string} path the hierarchical facet path\r\n   * @return {SearchParameter} the new state\r\n   * @throws Error if the facet is not defined or if the facet is refined\r\n   */\n  addHierarchicalFacetRefinement: function (facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration.');\n    }\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n  /**\r\n   * Removes the refinement set on a hierarchical facet.\r\n   * @param {string} facet the facet name\r\n   * @return {SearchParameter} the new state\r\n   * @throws Error if the facet is not defined or if the facet is not refined\r\n   */\n  removeHierarchicalFacetRefinement: function (facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n  /**\r\n   * Switch the tag refinement\r\n   * @method\r\n   * @param {string} tag the tag to remove or add\r\n   * @return {SearchParameters} new instance\r\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n    return this.addTagRefinement(tag);\n  },\n  /**\r\n   * Test if the facet name is from one of the disjunctive facets\r\n   * @method\r\n   * @param {string} facet facet name to test\r\n   * @return {boolean} true if facet is a disjunctive facet\r\n   */\n  isDisjunctiveFacet: function (facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n  /**\r\n   * Test if the facet name is from one of the hierarchical facets\r\n   * @method\r\n   * @param {string} facetName facet name to test\r\n   * @return {boolean} true if facetName is a hierarchical facet\r\n   */\n  isHierarchicalFacet: function (facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n  /**\r\n   * Test if the facet name is from one of the conjunctive/normal facets\r\n   * @method\r\n   * @param {string} facet facet name to test\r\n   * @return {boolean} true if facet is a conjunctive facet\r\n   */\n  isConjunctiveFacet: function (facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n  /**\r\n   * Returns true if the facet is refined, either for a specific value or in\r\n   * general.\r\n   * @method\r\n   * @param {string} facet name of the attribute for used for faceting\r\n   * @param {string} value, optional value. If passed will test that this value\r\n   * is filtering the given facet.\r\n   * @return {boolean} returns true if refined\r\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n  /**\r\n   * Returns true if the facet contains exclusions or if a specific value is\r\n   * excluded.\r\n   *\r\n   * @method\r\n   * @param {string} facet name of the attribute for used for faceting\r\n   * @param {string} [value] optional value. If passed will test that this value\r\n   * is filtering the given facet.\r\n   * @return {boolean} returns true if refined\r\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n  /**\r\n   * Returns true if the facet contains a refinement, or if a value passed is a\r\n   * refinement for the facet.\r\n   * @method\r\n   * @param {string} facet name of the attribute for used for faceting\r\n   * @param {string} value optional, will test if the value is used for refinement\r\n   * if there is one, otherwise will test if the facet contains any refinement\r\n   * @return {boolean} true if the facet is refined\r\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value);\n  },\n  /**\r\n   * Returns true if the facet contains a refinement, or if a value passed is a\r\n   * refinement for the facet.\r\n   * @method\r\n   * @param {string} facet name of the attribute for used for faceting\r\n   * @param {string} value optional, will test if the value is used for refinement\r\n   * if there is one, otherwise will test if the facet contains any refinement\r\n   * @return {boolean} true if the facet is refined\r\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n    var refinements = this.getHierarchicalRefinement(facet);\n    if (!value) {\n      return refinements.length > 0;\n    }\n    return refinements.indexOf(value) !== -1;\n  },\n  /**\r\n   * Test if the triple (attribute, operator, value) is already refined.\r\n   * If only the attribute and the operator are provided, it tests if the\r\n   * contains any refinement value.\r\n   * @method\r\n   * @param {string} attribute attribute for which the refinement is applied\r\n   * @param {string} [operator] operator of the refinement\r\n   * @param {string} [value] value of the refinement\r\n   * @return {boolean} true if it is refined\r\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return Boolean(this.numericRefinements[attribute]);\n    }\n    var isOperatorDefined = this.numericRefinements[attribute] && this.numericRefinements[attribute][operator] !== undefined;\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined = findArray(this.numericRefinements[attribute][operator], parsedValue) !== undefined;\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n  /**\r\n   * Returns true if the tag refined, false otherwise\r\n   * @method\r\n   * @param {string} tag the tag to check\r\n   * @return {boolean} true if tag is refined\r\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n  /**\r\n   * Returns the list of all disjunctive facets refined\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {value} value value used for filtering\r\n   * @return {string[]} returns the list of refinements\r\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n\n    // attributes used for numeric filter can also be disjunctive\n    var disjunctiveNumericRefinedFacets = intersection(Object.keys(this.numericRefinements).filter(function (facet) {\n      return Object.keys(self.numericRefinements[facet]).length > 0;\n    }), this.disjunctiveFacets);\n    return Object.keys(this.disjunctiveFacetsRefinements).filter(function (facet) {\n      return self.disjunctiveFacetsRefinements[facet].length > 0;\n    }).concat(disjunctiveNumericRefinedFacets).concat(this.getRefinedHierarchicalFacets()).sort();\n  },\n  /**\r\n   * Returns the list of all disjunctive facets refined\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {value} value value used for filtering\r\n   * @return {string[]} returns the list of refinements\r\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    return intersection(\n    // enforce the order between the two arrays,\n    // so that refinement name index === hierarchical facet index\n    this.hierarchicalFacets.map(function (facet) {\n      return facet.name;\n    }), Object.keys(this.hierarchicalFacetsRefinements).filter(function (facet) {\n      return self.hierarchicalFacetsRefinements[facet].length > 0;\n    })).sort();\n  },\n  /**\r\n   * Returned the list of all disjunctive facets not refined\r\n   * @method\r\n   * @return {string[]} returns the list of facets that are not refined\r\n   */\n  getUnrefinedDisjunctiveFacets: function () {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n    return this.disjunctiveFacets.filter(function (f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n  managedParameters: ['index', 'facets', 'disjunctiveFacets', 'facetsRefinements', 'hierarchicalFacets', 'facetsExcludes', 'disjunctiveFacetsRefinements', 'numericRefinements', 'tagRefinements', 'hierarchicalFacetsRefinements'],\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n    var queryParams = {};\n\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    Object.keys(this).forEach(function (paramName) {\n      var paramValue = self[paramName];\n      if (managedParameters.indexOf(paramName) === -1 && paramValue !== undefined) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n    return queryParams;\n  },\n  /**\r\n   * Let the user set a specific value for a given parameter. Will return the\r\n   * same instance if the parameter is invalid or if the value is the same as the\r\n   * previous one.\r\n   * @method\r\n   * @param {string} parameter the parameter name\r\n   * @param {any} value the value to be set, must be compliant with the definition\r\n   * of the attribute on the object\r\n   * @return {SearchParameters} the updated state\r\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n    var modification = {};\n    modification[parameter] = value;\n    return this.setQueryParameters(modification);\n  },\n  /**\r\n   * Let the user set any of the parameters with a plain object.\r\n   * @method\r\n   * @param {object} params all the keys and the values to be updated\r\n   * @return {SearchParameters} a new updated instance\r\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n    var error = SearchParameters.validate(this, params);\n    if (error) {\n      throw error;\n    }\n\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n    var previousPlainObject = Object.keys(this).reduce(function (acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(function (previous, key) {\n      var isPreviousValueDefined = previous[key] !== undefined;\n      var isNextValueDefined = nextWithNumbers[key] !== undefined;\n      if (isPreviousValueDefined && !isNextValueDefined) {\n        return omit(previous, [key]);\n      }\n      if (isNextValueDefined) {\n        previous[key] = nextWithNumbers[key];\n      }\n      return previous;\n    }, previousPlainObject);\n    return new this.constructor(nextPlainObject);\n  },\n  /**\r\n   * Returns a new instance with the page reset. Two scenarios possible:\r\n   * the page is omitted -> return the given instance\r\n   * the page is set -> return a new instance with a page of 0\r\n   * @return {SearchParameters} a new updated instance\r\n   */\n  resetPage: function () {\n    if (this.page === undefined) {\n      return this;\n    }\n    return this.setPage(0);\n  },\n  /**\r\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\r\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\r\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\r\n   */\n  _getHierarchicalFacetSortBy: function (hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n  /**\r\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\r\n   * @private\r\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\r\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\r\n   */\n  _getHierarchicalFacetSeparator: function (hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n  /**\r\n   * Helper function to get the hierarchicalFacet prefix path or null\r\n   * @private\r\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\r\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\r\n   */\n  _getHierarchicalRootPath: function (hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n  /**\r\n   * Helper function to check if we show the parent level of the hierarchicalFacet\r\n   * @private\r\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\r\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\r\n   */\n  _getHierarchicalShowParentLevel: function (hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n    return true;\n  },\n  /**\r\n   * Helper function to get the hierarchicalFacet by it's name\r\n   * @param  {string} hierarchicalFacetName the hierarchicalFacet name\r\n   * @return {object} a hierarchicalFacet\r\n   */\n  getHierarchicalFacetByName: function (hierarchicalFacetName) {\n    return find(this.hierarchicalFacets, function (f) {\n      return f.name === hierarchicalFacetName;\n    });\n  },\n  /**\r\n   * Get the current breadcrumb for a hierarchical facet, as an array\r\n   * @param  {string} facetName Hierarchical facet name\r\n   * @return {array.<string>} the path as an array of string\r\n   */\n  getHierarchicalFacetBreadcrumb: function (facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n    var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facetName));\n    var path = refinement.split(separator);\n    return path.map(function (part) {\n      return part.trim();\n    });\n  },\n  toString: function () {\n    return JSON.stringify(this, null, 2);\n  }\n};\n\n/**\r\n * Callback used for clearRefinement method\r\n * @callback SearchParameters.clearCallback\r\n * @param {OperatorList|FacetList} value the value of the filter\r\n * @param {string} key the current attribute name\r\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\r\n * depending on the type of facet\r\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\r\n */\nmodule.exports = SearchParameters;","map":{"version":3,"names":["defaultsPure","require","find","intersection","merge","objectHasKeys","omit","valToNumber","isValidUserToken","RefinementList","isEqualNumericRefinement","a","b","Array","isArray","length","every","el","i","findArray","array","searchedValue","currentValue","SearchParameters","newParameters","params","_parseNumbers","userToken","undefined","console","warn","facets","disjunctiveFacets","hierarchicalFacets","facetsRefinements","facetsExcludes","disjunctiveFacetsRefinements","numericRefinements","tagRefinements","hierarchicalFacetsRefinements","self","Object","keys","forEach","paramName","isKeyKnown","PARAMETERS","indexOf","isValueDefined","partialState","numbers","numberKeys","k","value","parsedValue","parseFloat","isNaN","insideBoundingBox","map","geoRect","attribute","operators","operator","values","parsedValues","v","vPrime","make","makeSearchParameters","instance","facet","rootPath","currentRefinement","getHierarchicalRefinement","name","clearRefinements","toggleHierarchicalFacetRefinement","validate","currentState","parameters","tagFilters","Error","numericFilters","prototype","constructor","patch","_clearNumericRefinements","clearRefinement","setQueryParameters","clearTags","setIndex","index","setQuery","newQuery","query","setPage","newPage","page","setFacets","setDisjunctiveFacets","setHitsPerPage","n","hitsPerPage","setTypoTolerance","typoTolerance","addNumericRefinement","val","isNumericRefined","mod","slice","push","getConjunctiveRefinements","facetName","isConjunctiveFacet","getDisjunctiveRefinements","isDisjunctiveFacet","getExcludeRefinements","removeNumericRefinement","number","paramValue","key","op","getNumericRefinements","getNumericRefinement","hasChanged","newNumericRefinements","reduce","memo","operatorList","outValues","predicateResult","addFacet","concat","addDisjunctiveFacet","addHierarchicalFacet","hierarchicalFacet","isHierarchicalFacet","addFacetRefinement","isRefined","addRefinement","addExcludeRefinement","addDisjunctiveFacetRefinement","addTagRefinement","tag","isTagRefined","modification","removeFacet","filter","f","removeDisjunctiveFacet","removeHierarchicalFacet","removeFacetRefinement","removeRefinement","removeExcludeRefinement","removeDisjunctiveFacetRefinement","removeTagRefinement","t","toggleRefinement","toggleFacetRefinement","toggleConjunctiveFacetRefinement","toggleDisjunctiveFacetRefinement","toggleExcludeFacetRefinement","separator","_getHierarchicalFacetSeparator","getHierarchicalFacetByName","upOneOrMultipleLevel","lastIndexOf","addHierarchicalFacetRefinement","path","isHierarchicalFacetRefined","removeHierarchicalFacetRefinement","toggleTagRefinement","isFacetRefined","isExcludeRefined","isDisjunctiveFacetRefined","refinements","Boolean","isOperatorDefined","isAttributeValueDefined","getRefinedDisjunctiveFacets","disjunctiveNumericRefinedFacets","getRefinedHierarchicalFacets","sort","getUnrefinedDisjunctiveFacets","refinedFacets","managedParameters","getQueryParams","queryParams","setQueryParameter","setParameter","parameter","error","nextWithNumbers","previousPlainObject","acc","nextPlainObject","previous","isPreviousValueDefined","isNextValueDefined","resetPage","_getHierarchicalFacetSortBy","sortBy","_getHierarchicalRootPath","_getHierarchicalShowParentLevel","showParentLevel","hierarchicalFacetName","getHierarchicalFacetBreadcrumb","refinement","split","part","trim","toString","JSON","stringify","module","exports"],"sources":["C:/Users/tudor/propr/RepositoryNetlify/node_modules/react-instantsearch-core/node_modules/algoliasearch-helper/src/SearchParameters/index.js"],"sourcesContent":["'use strict';\r\n\r\nvar defaultsPure = require('../functions/defaultsPure');\r\nvar find = require('../functions/find');\r\nvar intersection = require('../functions/intersection');\r\nvar merge = require('../functions/merge');\r\nvar objectHasKeys = require('../functions/objectHasKeys');\r\nvar omit = require('../functions/omit');\r\nvar valToNumber = require('../functions/valToNumber');\r\nvar isValidUserToken = require('../utils/isValidUserToken');\r\n\r\nvar RefinementList = require('./RefinementList');\r\n\r\n/**\r\n * isEqual, but only for numeric refinement values, possible values:\r\n * - 5\r\n * - [5]\r\n * - [[5]]\r\n * - [[5,5],[4]]\r\n * @param {any} a numeric refinement value\r\n * @param {any} b numeric refinement value\r\n * @return {boolean} true if the values are equal\r\n */\r\nfunction isEqualNumericRefinement(a, b) {\r\n  if (Array.isArray(a) && Array.isArray(b)) {\r\n    return (\r\n      a.length === b.length &&\r\n      a.every(function (el, i) {\r\n        return isEqualNumericRefinement(b[i], el);\r\n      })\r\n    );\r\n  }\r\n  return a === b;\r\n}\r\n\r\n/**\r\n * like _.find but using deep equality to be able to use it\r\n * to find arrays.\r\n * @private\r\n * @param {any[]} array array to search into (elements are base or array of base)\r\n * @param {any} searchedValue the value we're looking for (base or array of base)\r\n * @return {any} the searched value or undefined\r\n */\r\nfunction findArray(array, searchedValue) {\r\n  return find(array, function (currentValue) {\r\n    return isEqualNumericRefinement(currentValue, searchedValue);\r\n  });\r\n}\r\n\r\n/**\r\n * The facet list is the structure used to store the list of values used to\r\n * filter a single attribute.\r\n * @typedef {string[]} SearchParameters.FacetList\r\n */\r\n\r\n/**\r\n * Structure to store numeric filters with the operator as the key. The supported operators\r\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\r\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\r\n */\r\n\r\n/**\r\n * SearchParameters is the data structure that contains all the information\r\n * usable for making a search to Algolia API. It doesn't do the search itself,\r\n * nor does it contains logic about the parameters.\r\n * It is an immutable object, therefore it has been created in a way that each\r\n * changes does not change the object itself but returns a copy with the\r\n * modification.\r\n * This object should probably not be instantiated outside of the helper. It will\r\n * be provided when needed. This object is documented for reference as you'll\r\n * get it from events generated by the {@link AlgoliaSearchHelper}.\r\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\r\n * @constructor\r\n * @classdesc contains all the parameters of a search\r\n * @param {object|SearchParameters} newParameters existing parameters or partial object\r\n * for the properties of a new SearchParameters\r\n * @see SearchParameters.make\r\n * @example <caption>SearchParameters of the first query in\r\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\r\n{\r\n   \"query\": \"\",\r\n   \"disjunctiveFacets\": [\r\n      \"customerReviewCount\",\r\n      \"category\",\r\n      \"salePrice_range\",\r\n      \"manufacturer\"\r\n  ],\r\n   \"maxValuesPerFacet\": 30,\r\n   \"page\": 0,\r\n   \"hitsPerPage\": 10,\r\n   \"facets\": [\r\n      \"type\",\r\n      \"shipping\"\r\n  ]\r\n}\r\n */\r\nfunction SearchParameters(newParameters) {\r\n  var params = newParameters\r\n    ? SearchParameters._parseNumbers(newParameters)\r\n    : {};\r\n\r\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\r\n    // eslint-disable-next-line no-console\r\n    console.warn(\r\n      '[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}'\r\n    );\r\n  }\r\n  /**\r\n   * This attribute contains the list of all the conjunctive facets\r\n   * used. This list will be added to requested facets in the\r\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\r\n   * @member {string[]}\r\n   */\r\n  this.facets = params.facets || [];\r\n  /**\r\n   * This attribute contains the list of all the disjunctive facets\r\n   * used. This list will be added to requested facets in the\r\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\r\n   * @member {string[]}\r\n   */\r\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\r\n  /**\r\n   * This attribute contains the list of all the hierarchical facets\r\n   * used. This list will be added to requested facets in the\r\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\r\n   * Hierarchical facets are a sub type of disjunctive facets that\r\n   * let you filter faceted attributes hierarchically.\r\n   * @member {string[]|object[]}\r\n   */\r\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\r\n\r\n  // Refinements\r\n  /**\r\n   * This attribute contains all the filters that need to be\r\n   * applied on the conjunctive facets. Each facet must be properly\r\n   * defined in the `facets` attribute.\r\n   *\r\n   * The key is the name of the facet, and the `FacetList` contains all\r\n   * filters selected for the associated facet name.\r\n   *\r\n   * When querying algolia, the values stored in this attribute will\r\n   * be translated into the `facetFilters` attribute.\r\n   * @member {Object.<string, SearchParameters.FacetList>}\r\n   */\r\n  this.facetsRefinements = params.facetsRefinements || {};\r\n  /**\r\n   * This attribute contains all the filters that need to be\r\n   * excluded from the conjunctive facets. Each facet must be properly\r\n   * defined in the `facets` attribute.\r\n   *\r\n   * The key is the name of the facet, and the `FacetList` contains all\r\n   * filters excluded for the associated facet name.\r\n   *\r\n   * When querying algolia, the values stored in this attribute will\r\n   * be translated into the `facetFilters` attribute.\r\n   * @member {Object.<string, SearchParameters.FacetList>}\r\n   */\r\n  this.facetsExcludes = params.facetsExcludes || {};\r\n  /**\r\n   * This attribute contains all the filters that need to be\r\n   * applied on the disjunctive facets. Each facet must be properly\r\n   * defined in the `disjunctiveFacets` attribute.\r\n   *\r\n   * The key is the name of the facet, and the `FacetList` contains all\r\n   * filters selected for the associated facet name.\r\n   *\r\n   * When querying algolia, the values stored in this attribute will\r\n   * be translated into the `facetFilters` attribute.\r\n   * @member {Object.<string, SearchParameters.FacetList>}\r\n   */\r\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\r\n  /**\r\n   * This attribute contains all the filters that need to be\r\n   * applied on the numeric attributes.\r\n   *\r\n   * The key is the name of the attribute, and the value is the\r\n   * filters to apply to this attribute.\r\n   *\r\n   * When querying algolia, the values stored in this attribute will\r\n   * be translated into the `numericFilters` attribute.\r\n   * @member {Object.<string, SearchParameters.OperatorList>}\r\n   */\r\n  this.numericRefinements = params.numericRefinements || {};\r\n  /**\r\n   * This attribute contains all the tags used to refine the query.\r\n   *\r\n   * When querying algolia, the values stored in this attribute will\r\n   * be translated into the `tagFilters` attribute.\r\n   * @member {string[]}\r\n   */\r\n  this.tagRefinements = params.tagRefinements || [];\r\n  /**\r\n   * This attribute contains all the filters that need to be\r\n   * applied on the hierarchical facets. Each facet must be properly\r\n   * defined in the `hierarchicalFacets` attribute.\r\n   *\r\n   * The key is the name of the facet, and the `FacetList` contains all\r\n   * filters selected for the associated facet name. The FacetList values\r\n   * are structured as a string that contain the values for each level\r\n   * separated by the configured separator.\r\n   *\r\n   * When querying algolia, the values stored in this attribute will\r\n   * be translated into the `facetFilters` attribute.\r\n   * @member {Object.<string, SearchParameters.FacetList>}\r\n   */\r\n  this.hierarchicalFacetsRefinements =\r\n    params.hierarchicalFacetsRefinements || {};\r\n\r\n  // eslint-disable-next-line consistent-this\r\n  var self = this;\r\n  Object.keys(params).forEach(function (paramName) {\r\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\r\n    var isValueDefined = params[paramName] !== undefined;\r\n\r\n    if (!isKeyKnown && isValueDefined) {\r\n      self[paramName] = params[paramName];\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * List all the properties in SearchParameters and therefore all the known Algolia properties\r\n * This doesn't contain any beta/hidden features.\r\n * @private\r\n */\r\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\r\n\r\n/**\r\n * @private\r\n * @param {object} partialState full or part of a state\r\n * @return {object} a new object with the number keys as number\r\n */\r\nSearchParameters._parseNumbers = function (partialState) {\r\n  // Do not parse numbers again in SearchParameters, they ought to be parsed already\r\n  if (partialState instanceof SearchParameters) return partialState;\r\n\r\n  var numbers = {};\r\n\r\n  var numberKeys = [\r\n    'aroundPrecision',\r\n    'aroundRadius',\r\n    'getRankingInfo',\r\n    'minWordSizefor2Typos',\r\n    'minWordSizefor1Typo',\r\n    'page',\r\n    'maxValuesPerFacet',\r\n    'distinct',\r\n    'minimumAroundRadius',\r\n    'hitsPerPage',\r\n    'minProximity',\r\n  ];\r\n\r\n  numberKeys.forEach(function (k) {\r\n    var value = partialState[k];\r\n    if (typeof value === 'string') {\r\n      var parsedValue = parseFloat(value);\r\n      // global isNaN is ok to use here, value is only number or NaN\r\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\r\n    }\r\n  });\r\n\r\n  // there's two formats of insideBoundingBox, we need to parse\r\n  // the one which is an array of float geo rectangles\r\n  if (Array.isArray(partialState.insideBoundingBox)) {\r\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function (\r\n      geoRect\r\n    ) {\r\n      if (Array.isArray(geoRect)) {\r\n        return geoRect.map(function (value) {\r\n          return parseFloat(value);\r\n        });\r\n      }\r\n      return geoRect;\r\n    });\r\n  }\r\n\r\n  if (partialState.numericRefinements) {\r\n    var numericRefinements = {};\r\n    Object.keys(partialState.numericRefinements).forEach(function (attribute) {\r\n      var operators = partialState.numericRefinements[attribute] || {};\r\n      numericRefinements[attribute] = {};\r\n      Object.keys(operators).forEach(function (operator) {\r\n        var values = operators[operator];\r\n        var parsedValues = values.map(function (v) {\r\n          if (Array.isArray(v)) {\r\n            return v.map(function (vPrime) {\r\n              if (typeof vPrime === 'string') {\r\n                return parseFloat(vPrime);\r\n              }\r\n              return vPrime;\r\n            });\r\n          } else if (typeof v === 'string') {\r\n            return parseFloat(v);\r\n          }\r\n          return v;\r\n        });\r\n        numericRefinements[attribute][operator] = parsedValues;\r\n      });\r\n    });\r\n    numbers.numericRefinements = numericRefinements;\r\n  }\r\n\r\n  return merge({}, partialState, numbers);\r\n};\r\n\r\n/**\r\n * Factory for SearchParameters\r\n * @param {object|SearchParameters} newParameters existing parameters or partial\r\n * object for the properties of a new SearchParameters\r\n * @return {SearchParameters} frozen instance of SearchParameters\r\n */\r\nSearchParameters.make = function makeSearchParameters(newParameters) {\r\n  var instance = new SearchParameters(newParameters);\r\n\r\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\r\n  hierarchicalFacets.forEach(function (facet) {\r\n    if (facet.rootPath) {\r\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\r\n\r\n      if (\r\n        currentRefinement.length > 0 &&\r\n        currentRefinement[0].indexOf(facet.rootPath) !== 0\r\n      ) {\r\n        instance = instance.clearRefinements(facet.name);\r\n      }\r\n\r\n      // get it again in case it has been cleared\r\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\r\n      if (currentRefinement.length === 0) {\r\n        instance = instance.toggleHierarchicalFacetRefinement(\r\n          facet.name,\r\n          facet.rootPath\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return instance;\r\n};\r\n\r\n/**\r\n * Validates the new parameters based on the previous state\r\n * @param {SearchParameters} currentState the current state\r\n * @param {object|SearchParameters} parameters the new parameters to set\r\n * @return {Error|null} Error if the modification is invalid, null otherwise\r\n */\r\nSearchParameters.validate = function (currentState, parameters) {\r\n  var params = parameters || {};\r\n\r\n  if (\r\n    currentState.tagFilters &&\r\n    params.tagRefinements &&\r\n    params.tagRefinements.length > 0\r\n  ) {\r\n    return new Error(\r\n      '[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' +\r\n        'an error, if it is really what you want, you should first clear the tags with clearTags method.'\r\n    );\r\n  }\r\n\r\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\r\n    return new Error(\r\n      '[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' +\r\n        'an error, if it is not, you should first clear the tags with clearTags method.'\r\n    );\r\n  }\r\n\r\n  if (\r\n    currentState.numericFilters &&\r\n    params.numericRefinements &&\r\n    objectHasKeys(params.numericRefinements)\r\n  ) {\r\n    return new Error(\r\n      \"[Numeric filters] Can't switch from the advanced to the managed API. It\" +\r\n        ' is probably an error, if this is really what you want, you have to first' +\r\n        ' clear the numeric filters.'\r\n    );\r\n  }\r\n\r\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\r\n    return new Error(\r\n      \"[Numeric filters] Can't switch from the managed API to the advanced. It\" +\r\n        ' is probably an error, if this is really what you want, you have to first' +\r\n        ' clear the numeric filters.'\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nSearchParameters.prototype = {\r\n  constructor: SearchParameters,\r\n\r\n  /**\r\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\r\n   * @method\r\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\r\n   * - If not given, means to clear all the filters.\r\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\r\n   * - If `function`, means to clear all the refinements that return truthy values.\r\n   * @return {SearchParameters} new instance with filters cleared\r\n   */\r\n  clearRefinements: function clearRefinements(attribute) {\r\n    var patch = {\r\n      numericRefinements: this._clearNumericRefinements(attribute),\r\n      facetsRefinements: RefinementList.clearRefinement(\r\n        this.facetsRefinements,\r\n        attribute,\r\n        'conjunctiveFacet'\r\n      ),\r\n      facetsExcludes: RefinementList.clearRefinement(\r\n        this.facetsExcludes,\r\n        attribute,\r\n        'exclude'\r\n      ),\r\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(\r\n        this.disjunctiveFacetsRefinements,\r\n        attribute,\r\n        'disjunctiveFacet'\r\n      ),\r\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(\r\n        this.hierarchicalFacetsRefinements,\r\n        attribute,\r\n        'hierarchicalFacet'\r\n      ),\r\n    };\r\n    if (\r\n      patch.numericRefinements === this.numericRefinements &&\r\n      patch.facetsRefinements === this.facetsRefinements &&\r\n      patch.facetsExcludes === this.facetsExcludes &&\r\n      patch.disjunctiveFacetsRefinements ===\r\n        this.disjunctiveFacetsRefinements &&\r\n      patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements\r\n    ) {\r\n      return this;\r\n    }\r\n    return this.setQueryParameters(patch);\r\n  },\r\n  /**\r\n   * Remove all the refined tags from the SearchParameters\r\n   * @method\r\n   * @return {SearchParameters} new instance with tags cleared\r\n   */\r\n  clearTags: function clearTags() {\r\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0)\r\n      return this;\r\n\r\n    return this.setQueryParameters({\r\n      tagFilters: undefined,\r\n      tagRefinements: [],\r\n    });\r\n  },\r\n  /**\r\n   * Set the index.\r\n   * @method\r\n   * @param {string} index the index name\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  setIndex: function setIndex(index) {\r\n    if (index === this.index) return this;\r\n\r\n    return this.setQueryParameters({\r\n      index: index,\r\n    });\r\n  },\r\n  /**\r\n   * Query setter\r\n   * @method\r\n   * @param {string} newQuery value for the new query\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  setQuery: function setQuery(newQuery) {\r\n    if (newQuery === this.query) return this;\r\n\r\n    return this.setQueryParameters({\r\n      query: newQuery,\r\n    });\r\n  },\r\n  /**\r\n   * Page setter\r\n   * @method\r\n   * @param {number} newPage new page number\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  setPage: function setPage(newPage) {\r\n    if (newPage === this.page) return this;\r\n\r\n    return this.setQueryParameters({\r\n      page: newPage,\r\n    });\r\n  },\r\n  /**\r\n   * Facets setter\r\n   * The facets are the simple facets, used for conjunctive (and) faceting.\r\n   * @method\r\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  setFacets: function setFacets(facets) {\r\n    return this.setQueryParameters({\r\n      facets: facets,\r\n    });\r\n  },\r\n  /**\r\n   * Disjunctive facets setter\r\n   * Change the list of disjunctive (or) facets the helper chan handle.\r\n   * @method\r\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\r\n    return this.setQueryParameters({\r\n      disjunctiveFacets: facets,\r\n    });\r\n  },\r\n  /**\r\n   * HitsPerPage setter\r\n   * Hits per page represents the number of hits retrieved for this query\r\n   * @method\r\n   * @param {number} n number of hits retrieved per page of results\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  setHitsPerPage: function setHitsPerPage(n) {\r\n    if (this.hitsPerPage === n) return this;\r\n\r\n    return this.setQueryParameters({\r\n      hitsPerPage: n,\r\n    });\r\n  },\r\n  /**\r\n   * typoTolerance setter\r\n   * Set the value of typoTolerance\r\n   * @method\r\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\r\n    if (this.typoTolerance === typoTolerance) return this;\r\n\r\n    return this.setQueryParameters({\r\n      typoTolerance: typoTolerance,\r\n    });\r\n  },\r\n  /**\r\n   * Add a numeric filter for a given attribute\r\n   * When value is an array, they are combined with OR\r\n   * When value is a single value, it will combined with AND\r\n   * @method\r\n   * @param {string} attribute attribute to set the filter on\r\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\r\n   * @param {number | number[]} value value of the filter\r\n   * @return {SearchParameters} new instance\r\n   * @example\r\n   * // for price = 50 or 40\r\n   * state.addNumericRefinement('price', '=', [50, 40]);\r\n   * @example\r\n   * // for size = 38 and 40\r\n   * state.addNumericRefinement('size', '=', 38);\r\n   * state.addNumericRefinement('size', '=', 40);\r\n   */\r\n  addNumericRefinement: function (attribute, operator, value) {\r\n    var val = valToNumber(value);\r\n\r\n    if (this.isNumericRefined(attribute, operator, val)) return this;\r\n\r\n    var mod = merge({}, this.numericRefinements);\r\n\r\n    mod[attribute] = merge({}, mod[attribute]);\r\n\r\n    if (mod[attribute][operator]) {\r\n      // Array copy\r\n      mod[attribute][operator] = mod[attribute][operator].slice();\r\n      // Add the element. Concat can't be used here because value can be an array.\r\n      mod[attribute][operator].push(val);\r\n    } else {\r\n      mod[attribute][operator] = [val];\r\n    }\r\n\r\n    return this.setQueryParameters({\r\n      numericRefinements: mod,\r\n    });\r\n  },\r\n  /**\r\n   * Get the list of conjunctive refinements for a single facet\r\n   * @param {string} facetName name of the attribute used for faceting\r\n   * @return {string[]} list of refinements\r\n   */\r\n  getConjunctiveRefinements: function (facetName) {\r\n    if (!this.isConjunctiveFacet(facetName)) {\r\n      return [];\r\n    }\r\n    return this.facetsRefinements[facetName] || [];\r\n  },\r\n  /**\r\n   * Get the list of disjunctive refinements for a single facet\r\n   * @param {string} facetName name of the attribute used for faceting\r\n   * @return {string[]} list of refinements\r\n   */\r\n  getDisjunctiveRefinements: function (facetName) {\r\n    if (!this.isDisjunctiveFacet(facetName)) {\r\n      return [];\r\n    }\r\n    return this.disjunctiveFacetsRefinements[facetName] || [];\r\n  },\r\n  /**\r\n   * Get the list of hierarchical refinements for a single facet\r\n   * @param {string} facetName name of the attribute used for faceting\r\n   * @return {string[]} list of refinements\r\n   */\r\n  getHierarchicalRefinement: function (facetName) {\r\n    // we send an array but we currently do not support multiple\r\n    // hierarchicalRefinements for a hierarchicalFacet\r\n    return this.hierarchicalFacetsRefinements[facetName] || [];\r\n  },\r\n  /**\r\n   * Get the list of exclude refinements for a single facet\r\n   * @param {string} facetName name of the attribute used for faceting\r\n   * @return {string[]} list of refinements\r\n   */\r\n  getExcludeRefinements: function (facetName) {\r\n    if (!this.isConjunctiveFacet(facetName)) {\r\n      return [];\r\n    }\r\n    return this.facetsExcludes[facetName] || [];\r\n  },\r\n\r\n  /**\r\n   * Remove all the numeric filter for a given (attribute, operator)\r\n   * @method\r\n   * @param {string} attribute attribute to set the filter on\r\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\r\n   * @param {number} [number] the value to be removed\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  removeNumericRefinement: function (attribute, operator, number) {\r\n    var paramValue = number;\r\n    if (paramValue !== undefined) {\r\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\r\n        return this;\r\n      }\r\n      return this.setQueryParameters({\r\n        numericRefinements: this._clearNumericRefinements(function (\r\n          value,\r\n          key\r\n        ) {\r\n          return (\r\n            key === attribute &&\r\n            value.op === operator &&\r\n            isEqualNumericRefinement(value.val, valToNumber(paramValue))\r\n          );\r\n        }),\r\n      });\r\n    } else if (operator !== undefined) {\r\n      if (!this.isNumericRefined(attribute, operator)) return this;\r\n      return this.setQueryParameters({\r\n        numericRefinements: this._clearNumericRefinements(function (\r\n          value,\r\n          key\r\n        ) {\r\n          return key === attribute && value.op === operator;\r\n        }),\r\n      });\r\n    }\r\n\r\n    if (!this.isNumericRefined(attribute)) return this;\r\n    return this.setQueryParameters({\r\n      numericRefinements: this._clearNumericRefinements(function (value, key) {\r\n        return key === attribute;\r\n      }),\r\n    });\r\n  },\r\n  /**\r\n   * Get the list of numeric refinements for a single facet\r\n   * @param {string} facetName name of the attribute used for faceting\r\n   * @return {SearchParameters.OperatorList} list of refinements\r\n   */\r\n  getNumericRefinements: function (facetName) {\r\n    return this.numericRefinements[facetName] || {};\r\n  },\r\n  /**\r\n   * Return the current refinement for the (attribute, operator)\r\n   * @param {string} attribute attribute in the record\r\n   * @param {string} operator operator applied on the refined values\r\n   * @return {Array.<number|number[]>} refined values\r\n   */\r\n  getNumericRefinement: function (attribute, operator) {\r\n    return (\r\n      this.numericRefinements[attribute] &&\r\n      this.numericRefinements[attribute][operator]\r\n    );\r\n  },\r\n  /**\r\n   * Clear numeric filters.\r\n   * @method\r\n   * @private\r\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\r\n   * - If not given, means to clear all the filters.\r\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\r\n   * - If `function`, means to clear all the refinements that return truthy values.\r\n   * @return {Object.<string, OperatorList>} new numeric refinements\r\n   */\r\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\r\n    if (attribute === undefined) {\r\n      if (!objectHasKeys(this.numericRefinements)) {\r\n        return this.numericRefinements;\r\n      }\r\n      return {};\r\n    } else if (typeof attribute === 'string') {\r\n      return omit(this.numericRefinements, [attribute]);\r\n    } else if (typeof attribute === 'function') {\r\n      var hasChanged = false;\r\n      var numericRefinements = this.numericRefinements;\r\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(\r\n        function (memo, key) {\r\n          var operators = numericRefinements[key];\r\n          var operatorList = {};\r\n\r\n          operators = operators || {};\r\n          Object.keys(operators).forEach(function (operator) {\r\n            var values = operators[operator] || [];\r\n            var outValues = [];\r\n            values.forEach(function (value) {\r\n              var predicateResult = attribute(\r\n                { val: value, op: operator },\r\n                key,\r\n                'numeric'\r\n              );\r\n              if (!predicateResult) outValues.push(value);\r\n            });\r\n            if (outValues.length !== values.length) {\r\n              hasChanged = true;\r\n            }\r\n            operatorList[operator] = outValues;\r\n          });\r\n\r\n          memo[key] = operatorList;\r\n\r\n          return memo;\r\n        },\r\n        {}\r\n      );\r\n\r\n      if (hasChanged) return newNumericRefinements;\r\n      return this.numericRefinements;\r\n    }\r\n\r\n    // We return nothing if the attribute is not undefined, a string or a function,\r\n    // as it is not a valid value for a refinement\r\n    return undefined;\r\n  },\r\n  /**\r\n   * Add a facet to the facets attribute of the helper configuration, if it\r\n   * isn't already present.\r\n   * @method\r\n   * @param {string} facet facet name to add\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  addFacet: function addFacet(facet) {\r\n    if (this.isConjunctiveFacet(facet)) {\r\n      return this;\r\n    }\r\n\r\n    return this.setQueryParameters({\r\n      facets: this.facets.concat([facet]),\r\n    });\r\n  },\r\n  /**\r\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\r\n   * configuration, if it isn't already present.\r\n   * @method\r\n   * @param {string} facet disjunctive facet name to add\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\r\n    if (this.isDisjunctiveFacet(facet)) {\r\n      return this;\r\n    }\r\n\r\n    return this.setQueryParameters({\r\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet]),\r\n    });\r\n  },\r\n  /**\r\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\r\n   * configuration.\r\n   * @method\r\n   * @param {object} hierarchicalFacet hierarchical facet to add\r\n   * @return {SearchParameters} new instance\r\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\r\n   */\r\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\r\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\r\n      throw new Error(\r\n        'Cannot declare two hierarchical facets with the same name: `' +\r\n          hierarchicalFacet.name +\r\n          '`'\r\n      );\r\n    }\r\n\r\n    return this.setQueryParameters({\r\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet]),\r\n    });\r\n  },\r\n  /**\r\n   * Add a refinement on a \"normal\" facet\r\n   * @method\r\n   * @param {string} facet attribute to apply the faceting on\r\n   * @param {string} value value of the attribute (will be converted to string)\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  addFacetRefinement: function addFacetRefinement(facet, value) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      throw new Error(\r\n        facet +\r\n          ' is not defined in the facets attribute of the helper configuration'\r\n      );\r\n    }\r\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value))\r\n      return this;\r\n\r\n    return this.setQueryParameters({\r\n      facetsRefinements: RefinementList.addRefinement(\r\n        this.facetsRefinements,\r\n        facet,\r\n        value\r\n      ),\r\n    });\r\n  },\r\n  /**\r\n   * Exclude a value from a \"normal\" facet\r\n   * @method\r\n   * @param {string} facet attribute to apply the exclusion on\r\n   * @param {string} value value of the attribute (will be converted to string)\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      throw new Error(\r\n        facet +\r\n          ' is not defined in the facets attribute of the helper configuration'\r\n      );\r\n    }\r\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value))\r\n      return this;\r\n\r\n    return this.setQueryParameters({\r\n      facetsExcludes: RefinementList.addRefinement(\r\n        this.facetsExcludes,\r\n        facet,\r\n        value\r\n      ),\r\n    });\r\n  },\r\n  /**\r\n   * Adds a refinement on a disjunctive facet.\r\n   * @method\r\n   * @param {string} facet attribute to apply the faceting on\r\n   * @param {string} value value of the attribute (will be converted to string)\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(\r\n    facet,\r\n    value\r\n  ) {\r\n    if (!this.isDisjunctiveFacet(facet)) {\r\n      throw new Error(\r\n        facet +\r\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\r\n      );\r\n    }\r\n\r\n    if (\r\n      RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)\r\n    )\r\n      return this;\r\n\r\n    return this.setQueryParameters({\r\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(\r\n        this.disjunctiveFacetsRefinements,\r\n        facet,\r\n        value\r\n      ),\r\n    });\r\n  },\r\n  /**\r\n   * addTagRefinement adds a tag to the list used to filter the results\r\n   * @param {string} tag tag to be added\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  addTagRefinement: function addTagRefinement(tag) {\r\n    if (this.isTagRefined(tag)) return this;\r\n\r\n    var modification = {\r\n      tagRefinements: this.tagRefinements.concat(tag),\r\n    };\r\n\r\n    return this.setQueryParameters(modification);\r\n  },\r\n  /**\r\n   * Remove a facet from the facets attribute of the helper configuration, if it\r\n   * is present.\r\n   * @method\r\n   * @param {string} facet facet name to remove\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  removeFacet: function removeFacet(facet) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      return this;\r\n    }\r\n\r\n    return this.clearRefinements(facet).setQueryParameters({\r\n      facets: this.facets.filter(function (f) {\r\n        return f !== facet;\r\n      }),\r\n    });\r\n  },\r\n  /**\r\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\r\n   * helper configuration, if it is present.\r\n   * @method\r\n   * @param {string} facet disjunctive facet name to remove\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\r\n    if (!this.isDisjunctiveFacet(facet)) {\r\n      return this;\r\n    }\r\n\r\n    return this.clearRefinements(facet).setQueryParameters({\r\n      disjunctiveFacets: this.disjunctiveFacets.filter(function (f) {\r\n        return f !== facet;\r\n      }),\r\n    });\r\n  },\r\n  /**\r\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\r\n   * helper configuration, if it is present.\r\n   * @method\r\n   * @param {string} facet hierarchical facet name to remove\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\r\n    if (!this.isHierarchicalFacet(facet)) {\r\n      return this;\r\n    }\r\n\r\n    return this.clearRefinements(facet).setQueryParameters({\r\n      hierarchicalFacets: this.hierarchicalFacets.filter(function (f) {\r\n        return f.name !== facet;\r\n      }),\r\n    });\r\n  },\r\n  /**\r\n   * Remove a refinement set on facet. If a value is provided, it will clear the\r\n   * refinement for the given value, otherwise it will clear all the refinement\r\n   * values for the faceted attribute.\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {string} [value] value used to filter\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      throw new Error(\r\n        facet +\r\n          ' is not defined in the facets attribute of the helper configuration'\r\n      );\r\n    }\r\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value))\r\n      return this;\r\n\r\n    return this.setQueryParameters({\r\n      facetsRefinements: RefinementList.removeRefinement(\r\n        this.facetsRefinements,\r\n        facet,\r\n        value\r\n      ),\r\n    });\r\n  },\r\n  /**\r\n   * Remove a negative refinement on a facet\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {string} value value used to filter\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      throw new Error(\r\n        facet +\r\n          ' is not defined in the facets attribute of the helper configuration'\r\n      );\r\n    }\r\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value))\r\n      return this;\r\n\r\n    return this.setQueryParameters({\r\n      facetsExcludes: RefinementList.removeRefinement(\r\n        this.facetsExcludes,\r\n        facet,\r\n        value\r\n      ),\r\n    });\r\n  },\r\n  /**\r\n   * Remove a refinement on a disjunctive facet\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {string} value value used to filter\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(\r\n    facet,\r\n    value\r\n  ) {\r\n    if (!this.isDisjunctiveFacet(facet)) {\r\n      throw new Error(\r\n        facet +\r\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\r\n      );\r\n    }\r\n    if (\r\n      !RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)\r\n    )\r\n      return this;\r\n\r\n    return this.setQueryParameters({\r\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(\r\n        this.disjunctiveFacetsRefinements,\r\n        facet,\r\n        value\r\n      ),\r\n    });\r\n  },\r\n  /**\r\n   * Remove a tag from the list of tag refinements\r\n   * @method\r\n   * @param {string} tag the tag to remove\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  removeTagRefinement: function removeTagRefinement(tag) {\r\n    if (!this.isTagRefined(tag)) return this;\r\n\r\n    var modification = {\r\n      tagRefinements: this.tagRefinements.filter(function (t) {\r\n        return t !== tag;\r\n      }),\r\n    };\r\n\r\n    return this.setQueryParameters(modification);\r\n  },\r\n  /**\r\n   * Generic toggle refinement method to use with facet, disjunctive facets\r\n   * and hierarchical facets\r\n   * @param  {string} facet the facet to refine\r\n   * @param  {string} value the associated value\r\n   * @return {SearchParameters} new instance\r\n   * @throws will throw an error if the facet is not declared in the settings of the helper\r\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\r\n   */\r\n  toggleRefinement: function toggleRefinement(facet, value) {\r\n    return this.toggleFacetRefinement(facet, value);\r\n  },\r\n  /**\r\n   * Generic toggle refinement method to use with facet, disjunctive facets\r\n   * and hierarchical facets\r\n   * @param  {string} facet the facet to refine\r\n   * @param  {string} value the associated value\r\n   * @return {SearchParameters} new instance\r\n   * @throws will throw an error if the facet is not declared in the settings of the helper\r\n   */\r\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\r\n    if (this.isHierarchicalFacet(facet)) {\r\n      return this.toggleHierarchicalFacetRefinement(facet, value);\r\n    } else if (this.isConjunctiveFacet(facet)) {\r\n      return this.toggleConjunctiveFacetRefinement(facet, value);\r\n    } else if (this.isDisjunctiveFacet(facet)) {\r\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\r\n    }\r\n\r\n    throw new Error(\r\n      'Cannot refine the undeclared facet ' +\r\n        facet +\r\n        '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets'\r\n    );\r\n  },\r\n  /**\r\n   * Switch the refinement applied over a facet/value\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {value} value value used for filtering\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(\r\n    facet,\r\n    value\r\n  ) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      throw new Error(\r\n        facet +\r\n          ' is not defined in the facets attribute of the helper configuration'\r\n      );\r\n    }\r\n\r\n    return this.setQueryParameters({\r\n      facetsRefinements: RefinementList.toggleRefinement(\r\n        this.facetsRefinements,\r\n        facet,\r\n        value\r\n      ),\r\n    });\r\n  },\r\n  /**\r\n   * Switch the refinement applied over a facet/value\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {value} value value used for filtering\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(\r\n    facet,\r\n    value\r\n  ) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      throw new Error(\r\n        facet +\r\n          ' is not defined in the facets attribute of the helper configuration'\r\n      );\r\n    }\r\n\r\n    return this.setQueryParameters({\r\n      facetsExcludes: RefinementList.toggleRefinement(\r\n        this.facetsExcludes,\r\n        facet,\r\n        value\r\n      ),\r\n    });\r\n  },\r\n  /**\r\n   * Switch the refinement applied over a facet/value\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {value} value value used for filtering\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(\r\n    facet,\r\n    value\r\n  ) {\r\n    if (!this.isDisjunctiveFacet(facet)) {\r\n      throw new Error(\r\n        facet +\r\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\r\n      );\r\n    }\r\n\r\n    return this.setQueryParameters({\r\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(\r\n        this.disjunctiveFacetsRefinements,\r\n        facet,\r\n        value\r\n      ),\r\n    });\r\n  },\r\n  /**\r\n   * Switch the refinement applied over a facet/value\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {value} value value used for filtering\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(\r\n    facet,\r\n    value\r\n  ) {\r\n    if (!this.isHierarchicalFacet(facet)) {\r\n      throw new Error(\r\n        facet +\r\n          ' is not defined in the hierarchicalFacets attribute of the helper configuration'\r\n      );\r\n    }\r\n\r\n    var separator = this._getHierarchicalFacetSeparator(\r\n      this.getHierarchicalFacetByName(facet)\r\n    );\r\n\r\n    var mod = {};\r\n\r\n    var upOneOrMultipleLevel =\r\n      this.hierarchicalFacetsRefinements[facet] !== undefined &&\r\n      this.hierarchicalFacetsRefinements[facet].length > 0 &&\r\n      // remove current refinement:\r\n      // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\r\n      (this.hierarchicalFacetsRefinements[facet][0] === value ||\r\n        // remove a parent refinement of the current refinement:\r\n        //  - refinement was 'beer > IPA > Flying dog'\r\n        //  - call is toggleRefine('beer > IPA')\r\n        //  - refinement should be `beer`\r\n        this.hierarchicalFacetsRefinements[facet][0].indexOf(\r\n          value + separator\r\n        ) === 0);\r\n\r\n    if (upOneOrMultipleLevel) {\r\n      if (value.indexOf(separator) === -1) {\r\n        // go back to root level\r\n        mod[facet] = [];\r\n      } else {\r\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\r\n      }\r\n    } else {\r\n      mod[facet] = [value];\r\n    }\r\n\r\n    return this.setQueryParameters({\r\n      hierarchicalFacetsRefinements: defaultsPure(\r\n        {},\r\n        mod,\r\n        this.hierarchicalFacetsRefinements\r\n      ),\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Adds a refinement on a hierarchical facet.\r\n   * @param {string} facet the facet name\r\n   * @param {string} path the hierarchical facet path\r\n   * @return {SearchParameter} the new state\r\n   * @throws Error if the facet is not defined or if the facet is refined\r\n   */\r\n  addHierarchicalFacetRefinement: function (facet, path) {\r\n    if (this.isHierarchicalFacetRefined(facet)) {\r\n      throw new Error(facet + ' is already refined.');\r\n    }\r\n    if (!this.isHierarchicalFacet(facet)) {\r\n      throw new Error(\r\n        facet +\r\n          ' is not defined in the hierarchicalFacets attribute of the helper configuration.'\r\n      );\r\n    }\r\n    var mod = {};\r\n    mod[facet] = [path];\r\n    return this.setQueryParameters({\r\n      hierarchicalFacetsRefinements: defaultsPure(\r\n        {},\r\n        mod,\r\n        this.hierarchicalFacetsRefinements\r\n      ),\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Removes the refinement set on a hierarchical facet.\r\n   * @param {string} facet the facet name\r\n   * @return {SearchParameter} the new state\r\n   * @throws Error if the facet is not defined or if the facet is not refined\r\n   */\r\n  removeHierarchicalFacetRefinement: function (facet) {\r\n    if (!this.isHierarchicalFacetRefined(facet)) {\r\n      return this;\r\n    }\r\n    var mod = {};\r\n    mod[facet] = [];\r\n    return this.setQueryParameters({\r\n      hierarchicalFacetsRefinements: defaultsPure(\r\n        {},\r\n        mod,\r\n        this.hierarchicalFacetsRefinements\r\n      ),\r\n    });\r\n  },\r\n  /**\r\n   * Switch the tag refinement\r\n   * @method\r\n   * @param {string} tag the tag to remove or add\r\n   * @return {SearchParameters} new instance\r\n   */\r\n  toggleTagRefinement: function toggleTagRefinement(tag) {\r\n    if (this.isTagRefined(tag)) {\r\n      return this.removeTagRefinement(tag);\r\n    }\r\n\r\n    return this.addTagRefinement(tag);\r\n  },\r\n  /**\r\n   * Test if the facet name is from one of the disjunctive facets\r\n   * @method\r\n   * @param {string} facet facet name to test\r\n   * @return {boolean} true if facet is a disjunctive facet\r\n   */\r\n  isDisjunctiveFacet: function (facet) {\r\n    return this.disjunctiveFacets.indexOf(facet) > -1;\r\n  },\r\n  /**\r\n   * Test if the facet name is from one of the hierarchical facets\r\n   * @method\r\n   * @param {string} facetName facet name to test\r\n   * @return {boolean} true if facetName is a hierarchical facet\r\n   */\r\n  isHierarchicalFacet: function (facetName) {\r\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\r\n  },\r\n  /**\r\n   * Test if the facet name is from one of the conjunctive/normal facets\r\n   * @method\r\n   * @param {string} facet facet name to test\r\n   * @return {boolean} true if facet is a conjunctive facet\r\n   */\r\n  isConjunctiveFacet: function (facet) {\r\n    return this.facets.indexOf(facet) > -1;\r\n  },\r\n  /**\r\n   * Returns true if the facet is refined, either for a specific value or in\r\n   * general.\r\n   * @method\r\n   * @param {string} facet name of the attribute for used for faceting\r\n   * @param {string} value, optional value. If passed will test that this value\r\n   * is filtering the given facet.\r\n   * @return {boolean} returns true if refined\r\n   */\r\n  isFacetRefined: function isFacetRefined(facet, value) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      return false;\r\n    }\r\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\r\n  },\r\n  /**\r\n   * Returns true if the facet contains exclusions or if a specific value is\r\n   * excluded.\r\n   *\r\n   * @method\r\n   * @param {string} facet name of the attribute for used for faceting\r\n   * @param {string} [value] optional value. If passed will test that this value\r\n   * is filtering the given facet.\r\n   * @return {boolean} returns true if refined\r\n   */\r\n  isExcludeRefined: function isExcludeRefined(facet, value) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      return false;\r\n    }\r\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\r\n  },\r\n  /**\r\n   * Returns true if the facet contains a refinement, or if a value passed is a\r\n   * refinement for the facet.\r\n   * @method\r\n   * @param {string} facet name of the attribute for used for faceting\r\n   * @param {string} value optional, will test if the value is used for refinement\r\n   * if there is one, otherwise will test if the facet contains any refinement\r\n   * @return {boolean} true if the facet is refined\r\n   */\r\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\r\n    if (!this.isDisjunctiveFacet(facet)) {\r\n      return false;\r\n    }\r\n    return RefinementList.isRefined(\r\n      this.disjunctiveFacetsRefinements,\r\n      facet,\r\n      value\r\n    );\r\n  },\r\n  /**\r\n   * Returns true if the facet contains a refinement, or if a value passed is a\r\n   * refinement for the facet.\r\n   * @method\r\n   * @param {string} facet name of the attribute for used for faceting\r\n   * @param {string} value optional, will test if the value is used for refinement\r\n   * if there is one, otherwise will test if the facet contains any refinement\r\n   * @return {boolean} true if the facet is refined\r\n   */\r\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(\r\n    facet,\r\n    value\r\n  ) {\r\n    if (!this.isHierarchicalFacet(facet)) {\r\n      return false;\r\n    }\r\n\r\n    var refinements = this.getHierarchicalRefinement(facet);\r\n\r\n    if (!value) {\r\n      return refinements.length > 0;\r\n    }\r\n\r\n    return refinements.indexOf(value) !== -1;\r\n  },\r\n  /**\r\n   * Test if the triple (attribute, operator, value) is already refined.\r\n   * If only the attribute and the operator are provided, it tests if the\r\n   * contains any refinement value.\r\n   * @method\r\n   * @param {string} attribute attribute for which the refinement is applied\r\n   * @param {string} [operator] operator of the refinement\r\n   * @param {string} [value] value of the refinement\r\n   * @return {boolean} true if it is refined\r\n   */\r\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\r\n    if (value === undefined && operator === undefined) {\r\n      return Boolean(this.numericRefinements[attribute]);\r\n    }\r\n\r\n    var isOperatorDefined =\r\n      this.numericRefinements[attribute] &&\r\n      this.numericRefinements[attribute][operator] !== undefined;\r\n\r\n    if (value === undefined || !isOperatorDefined) {\r\n      return isOperatorDefined;\r\n    }\r\n\r\n    var parsedValue = valToNumber(value);\r\n    var isAttributeValueDefined =\r\n      findArray(this.numericRefinements[attribute][operator], parsedValue) !==\r\n      undefined;\r\n\r\n    return isOperatorDefined && isAttributeValueDefined;\r\n  },\r\n  /**\r\n   * Returns true if the tag refined, false otherwise\r\n   * @method\r\n   * @param {string} tag the tag to check\r\n   * @return {boolean} true if tag is refined\r\n   */\r\n  isTagRefined: function isTagRefined(tag) {\r\n    return this.tagRefinements.indexOf(tag) !== -1;\r\n  },\r\n  /**\r\n   * Returns the list of all disjunctive facets refined\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {value} value value used for filtering\r\n   * @return {string[]} returns the list of refinements\r\n   */\r\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\r\n    // eslint-disable-next-line consistent-this\r\n    var self = this;\r\n\r\n    // attributes used for numeric filter can also be disjunctive\r\n    var disjunctiveNumericRefinedFacets = intersection(\r\n      Object.keys(this.numericRefinements).filter(function (facet) {\r\n        return Object.keys(self.numericRefinements[facet]).length > 0;\r\n      }),\r\n      this.disjunctiveFacets\r\n    );\r\n\r\n    return Object.keys(this.disjunctiveFacetsRefinements)\r\n      .filter(function (facet) {\r\n        return self.disjunctiveFacetsRefinements[facet].length > 0;\r\n      })\r\n      .concat(disjunctiveNumericRefinedFacets)\r\n      .concat(this.getRefinedHierarchicalFacets())\r\n      .sort();\r\n  },\r\n  /**\r\n   * Returns the list of all disjunctive facets refined\r\n   * @method\r\n   * @param {string} facet name of the attribute used for faceting\r\n   * @param {value} value value used for filtering\r\n   * @return {string[]} returns the list of refinements\r\n   */\r\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\r\n    // eslint-disable-next-line consistent-this\r\n    var self = this;\r\n    return intersection(\r\n      // enforce the order between the two arrays,\r\n      // so that refinement name index === hierarchical facet index\r\n      this.hierarchicalFacets.map(function (facet) {\r\n        return facet.name;\r\n      }),\r\n      Object.keys(this.hierarchicalFacetsRefinements).filter(function (facet) {\r\n        return self.hierarchicalFacetsRefinements[facet].length > 0;\r\n      })\r\n    ).sort();\r\n  },\r\n  /**\r\n   * Returned the list of all disjunctive facets not refined\r\n   * @method\r\n   * @return {string[]} returns the list of facets that are not refined\r\n   */\r\n  getUnrefinedDisjunctiveFacets: function () {\r\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\r\n\r\n    return this.disjunctiveFacets.filter(function (f) {\r\n      return refinedFacets.indexOf(f) === -1;\r\n    });\r\n  },\r\n\r\n  managedParameters: [\r\n    'index',\r\n\r\n    'facets',\r\n    'disjunctiveFacets',\r\n    'facetsRefinements',\r\n    'hierarchicalFacets',\r\n    'facetsExcludes',\r\n\r\n    'disjunctiveFacetsRefinements',\r\n    'numericRefinements',\r\n    'tagRefinements',\r\n    'hierarchicalFacetsRefinements',\r\n  ],\r\n\r\n  getQueryParams: function getQueryParams() {\r\n    var managedParameters = this.managedParameters;\r\n\r\n    var queryParams = {};\r\n\r\n    // eslint-disable-next-line consistent-this\r\n    var self = this;\r\n    Object.keys(this).forEach(function (paramName) {\r\n      var paramValue = self[paramName];\r\n      if (\r\n        managedParameters.indexOf(paramName) === -1 &&\r\n        paramValue !== undefined\r\n      ) {\r\n        queryParams[paramName] = paramValue;\r\n      }\r\n    });\r\n\r\n    return queryParams;\r\n  },\r\n  /**\r\n   * Let the user set a specific value for a given parameter. Will return the\r\n   * same instance if the parameter is invalid or if the value is the same as the\r\n   * previous one.\r\n   * @method\r\n   * @param {string} parameter the parameter name\r\n   * @param {any} value the value to be set, must be compliant with the definition\r\n   * of the attribute on the object\r\n   * @return {SearchParameters} the updated state\r\n   */\r\n  setQueryParameter: function setParameter(parameter, value) {\r\n    if (this[parameter] === value) return this;\r\n\r\n    var modification = {};\r\n\r\n    modification[parameter] = value;\r\n\r\n    return this.setQueryParameters(modification);\r\n  },\r\n  /**\r\n   * Let the user set any of the parameters with a plain object.\r\n   * @method\r\n   * @param {object} params all the keys and the values to be updated\r\n   * @return {SearchParameters} a new updated instance\r\n   */\r\n  setQueryParameters: function setQueryParameters(params) {\r\n    if (!params) return this;\r\n\r\n    var error = SearchParameters.validate(this, params);\r\n\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    // eslint-disable-next-line consistent-this\r\n    var self = this;\r\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\r\n    var previousPlainObject = Object.keys(this).reduce(function (acc, key) {\r\n      acc[key] = self[key];\r\n      return acc;\r\n    }, {});\r\n\r\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(function (\r\n      previous,\r\n      key\r\n    ) {\r\n      var isPreviousValueDefined = previous[key] !== undefined;\r\n      var isNextValueDefined = nextWithNumbers[key] !== undefined;\r\n\r\n      if (isPreviousValueDefined && !isNextValueDefined) {\r\n        return omit(previous, [key]);\r\n      }\r\n\r\n      if (isNextValueDefined) {\r\n        previous[key] = nextWithNumbers[key];\r\n      }\r\n\r\n      return previous;\r\n    },\r\n    previousPlainObject);\r\n\r\n    return new this.constructor(nextPlainObject);\r\n  },\r\n\r\n  /**\r\n   * Returns a new instance with the page reset. Two scenarios possible:\r\n   * the page is omitted -> return the given instance\r\n   * the page is set -> return a new instance with a page of 0\r\n   * @return {SearchParameters} a new updated instance\r\n   */\r\n  resetPage: function () {\r\n    if (this.page === undefined) {\r\n      return this;\r\n    }\r\n\r\n    return this.setPage(0);\r\n  },\r\n\r\n  /**\r\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\r\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\r\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\r\n   */\r\n  _getHierarchicalFacetSortBy: function (hierarchicalFacet) {\r\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\r\n  },\r\n\r\n  /**\r\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\r\n   * @private\r\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\r\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\r\n   */\r\n  _getHierarchicalFacetSeparator: function (hierarchicalFacet) {\r\n    return hierarchicalFacet.separator || ' > ';\r\n  },\r\n\r\n  /**\r\n   * Helper function to get the hierarchicalFacet prefix path or null\r\n   * @private\r\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\r\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\r\n   */\r\n  _getHierarchicalRootPath: function (hierarchicalFacet) {\r\n    return hierarchicalFacet.rootPath || null;\r\n  },\r\n\r\n  /**\r\n   * Helper function to check if we show the parent level of the hierarchicalFacet\r\n   * @private\r\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\r\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\r\n   */\r\n  _getHierarchicalShowParentLevel: function (hierarchicalFacet) {\r\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\r\n      return hierarchicalFacet.showParentLevel;\r\n    }\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * Helper function to get the hierarchicalFacet by it's name\r\n   * @param  {string} hierarchicalFacetName the hierarchicalFacet name\r\n   * @return {object} a hierarchicalFacet\r\n   */\r\n  getHierarchicalFacetByName: function (hierarchicalFacetName) {\r\n    return find(this.hierarchicalFacets, function (f) {\r\n      return f.name === hierarchicalFacetName;\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Get the current breadcrumb for a hierarchical facet, as an array\r\n   * @param  {string} facetName Hierarchical facet name\r\n   * @return {array.<string>} the path as an array of string\r\n   */\r\n  getHierarchicalFacetBreadcrumb: function (facetName) {\r\n    if (!this.isHierarchicalFacet(facetName)) {\r\n      return [];\r\n    }\r\n\r\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\r\n    if (!refinement) return [];\r\n\r\n    var separator = this._getHierarchicalFacetSeparator(\r\n      this.getHierarchicalFacetByName(facetName)\r\n    );\r\n    var path = refinement.split(separator);\r\n    return path.map(function (part) {\r\n      return part.trim();\r\n    });\r\n  },\r\n\r\n  toString: function () {\r\n    return JSON.stringify(this, null, 2);\r\n  },\r\n};\r\n\r\n/**\r\n * Callback used for clearRefinement method\r\n * @callback SearchParameters.clearCallback\r\n * @param {OperatorList|FacetList} value the value of the filter\r\n * @param {string} key the current attribute name\r\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\r\n * depending on the type of facet\r\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\r\n */\r\nmodule.exports = SearchParameters;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AACvD,IAAIC,IAAI,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACvC,IAAIE,YAAY,GAAGF,OAAO,CAAC,2BAA2B,CAAC;AACvD,IAAIG,KAAK,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AACzC,IAAII,aAAa,GAAGJ,OAAO,CAAC,4BAA4B,CAAC;AACzD,IAAIK,IAAI,GAAGL,OAAO,CAAC,mBAAmB,CAAC;AACvC,IAAIM,WAAW,GAAGN,OAAO,CAAC,0BAA0B,CAAC;AACrD,IAAIO,gBAAgB,GAAGP,OAAO,CAAC,2BAA2B,CAAC;AAE3D,IAAIQ,cAAc,GAAGR,OAAO,CAAC,kBAAkB,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,wBAAwBA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACtC,IAAIC,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,IAAIE,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,EAAE;IACxC,OACED,CAAC,CAACI,MAAM,KAAKH,CAAC,CAACG,MAAM,IACrBJ,CAAC,CAACK,KAAK,CAAC,UAAUC,EAAE,EAAEC,CAAC,EAAE;MACvB,OAAOR,wBAAwB,CAACE,CAAC,CAACM,CAAC,CAAC,EAAED,EAAE,CAAC;IAC3C,CAAC,CAAC;EAEN;EACA,OAAON,CAAC,KAAKC,CAAC;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,SAASA,CAACC,KAAK,EAAEC,aAAa,EAAE;EACvC,OAAOnB,IAAI,CAACkB,KAAK,EAAE,UAAUE,YAAY,EAAE;IACzC,OAAOZ,wBAAwB,CAACY,YAAY,EAAED,aAAa,CAAC;EAC9D,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,gBAAgBA,CAACC,aAAa,EAAE;EACvC,IAAIC,MAAM,GAAGD,aAAa,GACtBD,gBAAgB,CAACG,aAAa,CAACF,aAAa,CAAC,GAC7C,CAAC,CAAC;EAEN,IAAIC,MAAM,CAACE,SAAS,KAAKC,SAAS,IAAI,CAACpB,gBAAgB,CAACiB,MAAM,CAACE,SAAS,CAAC,EAAE;IACzE;IACAE,OAAO,CAACC,IAAI,CACV,iIACF,CAAC;EACH;EACA;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,MAAM,GAAGN,MAAM,CAACM,MAAM,IAAI,EAAE;EACjC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,iBAAiB,GAAGP,MAAM,CAACO,iBAAiB,IAAI,EAAE;EACvD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,kBAAkB,GAAGR,MAAM,CAACQ,kBAAkB,IAAI,EAAE;;EAEzD;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,iBAAiB,GAAGT,MAAM,CAACS,iBAAiB,IAAI,CAAC,CAAC;EACvD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,cAAc,GAAGV,MAAM,CAACU,cAAc,IAAI,CAAC,CAAC;EACjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,4BAA4B,GAAGX,MAAM,CAACW,4BAA4B,IAAI,CAAC,CAAC;EAC7E;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,kBAAkB,GAAGZ,MAAM,CAACY,kBAAkB,IAAI,CAAC,CAAC;EACzD;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,cAAc,GAAGb,MAAM,CAACa,cAAc,IAAI,EAAE;EACjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}