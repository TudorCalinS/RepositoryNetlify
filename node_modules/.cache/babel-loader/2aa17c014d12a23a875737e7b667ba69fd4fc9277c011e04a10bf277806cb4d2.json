{"ast":null,"code":"import createConnector from \"../core/createConnector.js\";\nimport { getResults } from \"../core/indexUtils.js\";\n\n/**\r\n * The `connectStateResults` connector provides a way to access the `searchState` and the `searchResults`\r\n * of InstantSearch.\r\n * For instance this connector allows you to create results/noResults or query/noQuery pages.\r\n * @name connectStateResults\r\n * @kind connector\r\n * @providedPropType {object} searchState - The search state of the instant search component. <br/><br/> See: [Search state structure](https://community.algolia.com/react-instantsearch/guide/Search_state.html)\r\n * @providedPropType {object} searchResults - The search results. <br/><br/> In case of multiple indices: if used under `<Index>`, results will be those of the corresponding index otherwise it'll be those of the root index  See: [Search results structure](https://community.algolia.com/algoliasearch-helper-js/reference.html#searchresults)\r\n * @providedPropType {object} allSearchResults - In case of multiple indices you can retrieve all the results\r\n * @providedPropType {string} error - If the search failed, the error will be logged here.\r\n * @providedPropType {boolean} searching - If there is a search in progress.\r\n * @providedPropType {boolean} isSearchStalled - Flag that indicates if React InstantSearch has detected that searches are stalled.\r\n * @providedPropType {boolean} searchingForFacetValues - If there is a search in a list in progress.\r\n * @providedPropType {object} props - component props.\r\n * @example\r\n * import React from 'react';\r\n * import algoliasearch from 'algoliasearch/lite';\r\n * import { InstantSearch, SearchBox, Hits, connectStateResults } from 'react-instantsearch-dom';\r\n *\r\n * const searchClient = algoliasearch(\r\n *   'latency',\r\n *   '6be0576ff61c053d5f9a3225e2a90f76'\r\n * );\r\n *\r\n * const Content = connectStateResults(({ searchState, searchResults }) => {\r\n *   const hasResults = searchResults && searchResults.nbHits !== 0;\r\n *\r\n *    return (\r\n *      <div>\r\n *        <div hidden={!hasResults}>\r\n *          <Hits />\r\n *        </div>\r\n *        <div hidden={hasResults}>\r\n *          <div>No results has been found for {searchState.query}</div>\r\n *        </div>\r\n *      </div>\r\n *    );\r\n * });\r\n *\r\n * const App = () => (\r\n *   <InstantSearch\r\n *      searchClient={searchClient}\r\n *      indexName=\"instant_search\"\r\n *    >\r\n *      <SearchBox />\r\n *      <Content />\r\n *    </InstantSearch>\r\n * );\r\n */\nexport default createConnector({\n  displayName: 'AlgoliaStateResults',\n  $$type: 'ais.stateResults',\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return {\n      searchState: searchState,\n      searchResults: results,\n      allSearchResults: searchResults.results,\n      searching: searchResults.searching,\n      isSearchStalled: searchResults.isSearchStalled,\n      error: searchResults.error,\n      searchingForFacetValues: searchResults.searchingForFacetValues,\n      props: props\n    };\n  }\n});","map":{"version":3,"names":["createConnector","getResults","displayName","$$type","getProvidedProps","props","searchState","searchResults","results","ais","contextValue","multiIndexContext","indexContextValue","allSearchResults","searching","isSearchStalled","error","searchingForFacetValues"],"sources":["C:/Users/tudor/propr/RepositoryNetlify/node_modules/react-instantsearch-core/dist/es/connectors/connectStateResults.js"],"sourcesContent":["import createConnector from \"../core/createConnector.js\";\r\nimport { getResults } from \"../core/indexUtils.js\";\r\n\r\n/**\r\n * The `connectStateResults` connector provides a way to access the `searchState` and the `searchResults`\r\n * of InstantSearch.\r\n * For instance this connector allows you to create results/noResults or query/noQuery pages.\r\n * @name connectStateResults\r\n * @kind connector\r\n * @providedPropType {object} searchState - The search state of the instant search component. <br/><br/> See: [Search state structure](https://community.algolia.com/react-instantsearch/guide/Search_state.html)\r\n * @providedPropType {object} searchResults - The search results. <br/><br/> In case of multiple indices: if used under `<Index>`, results will be those of the corresponding index otherwise it'll be those of the root index  See: [Search results structure](https://community.algolia.com/algoliasearch-helper-js/reference.html#searchresults)\r\n * @providedPropType {object} allSearchResults - In case of multiple indices you can retrieve all the results\r\n * @providedPropType {string} error - If the search failed, the error will be logged here.\r\n * @providedPropType {boolean} searching - If there is a search in progress.\r\n * @providedPropType {boolean} isSearchStalled - Flag that indicates if React InstantSearch has detected that searches are stalled.\r\n * @providedPropType {boolean} searchingForFacetValues - If there is a search in a list in progress.\r\n * @providedPropType {object} props - component props.\r\n * @example\r\n * import React from 'react';\r\n * import algoliasearch from 'algoliasearch/lite';\r\n * import { InstantSearch, SearchBox, Hits, connectStateResults } from 'react-instantsearch-dom';\r\n *\r\n * const searchClient = algoliasearch(\r\n *   'latency',\r\n *   '6be0576ff61c053d5f9a3225e2a90f76'\r\n * );\r\n *\r\n * const Content = connectStateResults(({ searchState, searchResults }) => {\r\n *   const hasResults = searchResults && searchResults.nbHits !== 0;\r\n *\r\n *    return (\r\n *      <div>\r\n *        <div hidden={!hasResults}>\r\n *          <Hits />\r\n *        </div>\r\n *        <div hidden={hasResults}>\r\n *          <div>No results has been found for {searchState.query}</div>\r\n *        </div>\r\n *      </div>\r\n *    );\r\n * });\r\n *\r\n * const App = () => (\r\n *   <InstantSearch\r\n *      searchClient={searchClient}\r\n *      indexName=\"instant_search\"\r\n *    >\r\n *      <SearchBox />\r\n *      <Content />\r\n *    </InstantSearch>\r\n * );\r\n */\r\nexport default createConnector({\r\n  displayName: 'AlgoliaStateResults',\r\n  $$type: 'ais.stateResults',\r\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\r\n    var results = getResults(searchResults, {\r\n      ais: props.contextValue,\r\n      multiIndexContext: props.indexContextValue\r\n    });\r\n    return {\r\n      searchState: searchState,\r\n      searchResults: results,\r\n      allSearchResults: searchResults.results,\r\n      searching: searchResults.searching,\r\n      isSearchStalled: searchResults.isSearchStalled,\r\n      error: searchResults.error,\r\n      searchingForFacetValues: searchResults.searchingForFacetValues,\r\n      props: props\r\n    };\r\n  }\r\n});"],"mappings":"AAAA,OAAOA,eAAe,MAAM,4BAA4B;AACxD,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeD,eAAe,CAAC;EAC7BE,WAAW,EAAE,qBAAqB;EAClCC,MAAM,EAAE,kBAAkB;EAC1BC,gBAAgB,EAAE,SAASA,gBAAgBA,CAACC,KAAK,EAAEC,WAAW,EAAEC,aAAa,EAAE;IAC7E,IAAIC,OAAO,GAAGP,UAAU,CAACM,aAAa,EAAE;MACtCE,GAAG,EAAEJ,KAAK,CAACK,YAAY;MACvBC,iBAAiB,EAAEN,KAAK,CAACO;IAC3B,CAAC,CAAC;IACF,OAAO;MACLN,WAAW,EAAEA,WAAW;MACxBC,aAAa,EAAEC,OAAO;MACtBK,gBAAgB,EAAEN,aAAa,CAACC,OAAO;MACvCM,SAAS,EAAEP,aAAa,CAACO,SAAS;MAClCC,eAAe,EAAER,aAAa,CAACQ,eAAe;MAC9CC,KAAK,EAAET,aAAa,CAACS,KAAK;MAC1BC,uBAAuB,EAAEV,aAAa,CAACU,uBAAuB;MAC9DZ,KAAK,EAAEA;IACT,CAAC;EACH;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}