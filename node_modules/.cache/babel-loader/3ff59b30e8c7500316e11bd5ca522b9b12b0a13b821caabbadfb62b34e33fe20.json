{"ast":null,"code":"import React from 'react';\n\n/**\r\n * Since a lot of sliders already exist, we did not include one by default.\r\n * However you can easily connect React InstantSearch to an existing one\r\n * using the [connectRange connector](connectors/connectRange.html).\r\n *\r\n * @name RangeSlider\r\n * @requirements To connect any slider to Algolia, the underlying attribute used must be holding numerical values.\r\n * @kind widget\r\n * @example\r\n *\r\n * // Here's an example showing how to connect the AirBnb Rheostat Slider to React InstantSearch\r\n * // using the range connector. ⚠️ This example only works with the version 2.x of Rheostat.\r\n\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Rheostat from 'rheostat';\r\nimport { connectRange } from 'react-instantsearch-dom';\r\n\r\nclass Range extends React.Component {\r\n  static propTypes = {\r\n    min: PropTypes.number,\r\n    max: PropTypes.number,\r\n    currentRefinement: PropTypes.object,\r\n    refine: PropTypes.func.isRequired,\r\n    canRefine: PropTypes.bool.isRequired\r\n  };\r\n\r\n  state = { currentValues: { min: this.props.min, max: this.props.max } };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.canRefine &&\r\n      (prevProps.currentRefinement.min !== this.props.currentRefinement.min ||\r\n        prevProps.currentRefinement.max !== this.props.currentRefinement.max)\r\n    ) {\r\n      this.setState({\r\n        currentValues: {\r\n          min: this.props.currentRefinement.min,\r\n          max: this.props.currentRefinement.max,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  onValuesUpdated = sliderState => {\r\n    this.setState({\r\n      currentValues: { min: sliderState.values[0], max: sliderState.values[1] }\r\n    });\r\n  };\r\n\r\n  onChange = sliderState => {\r\n    if (\r\n      this.props.currentRefinement.min !== sliderState.values[0] ||\r\n      this.props.currentRefinement.max !== sliderState.values[1]\r\n    ) {\r\n      this.props.refine({\r\n        min: sliderState.values[0],\r\n        max: sliderState.values[1]\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { min, max, currentRefinement } = this.props;\r\n    const { currentValues } = this.state;\r\n    return min !== max ? (\r\n      <div>\r\n        <Rheostat\r\n          className=\"ais-RangeSlider\"\r\n          min={min}\r\n          max={max}\r\n          values={[currentRefinement.min, currentRefinement.max]}\r\n          onChange={this.onChange}\r\n          onValuesUpdated={this.onValuesUpdated}\r\n        />\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <div>{currentValues.min}</div>\r\n          <div>{currentValues.max}</div>\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nconst ConnectedRange = connectRange(Range);\r\n*/\nvar _ref = /*#__PURE__*/React.createElement(\"div\", null, \"We do not provide any Slider, see the documentation to learn how to connect one easily:\", /*#__PURE__*/React.createElement(\"a\", {\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n  href: \"https://www.algolia.com/doc/api-reference/widgets/range-slider/react/\"\n}, \"https://www.algolia.com/doc/api-reference/widgets/range-slider/react/\"));\nexport default (function () {\n  return _ref;\n});","map":{"version":3,"names":["React","_ref","createElement","target","rel","href"],"sources":["C:/Users/tudor/propr/RepositoryNetlify/node_modules/react-instantsearch-dom/dist/es/widgets/RangeSlider.js"],"sourcesContent":["import React from 'react';\r\n\r\n/**\r\n * Since a lot of sliders already exist, we did not include one by default.\r\n * However you can easily connect React InstantSearch to an existing one\r\n * using the [connectRange connector](connectors/connectRange.html).\r\n *\r\n * @name RangeSlider\r\n * @requirements To connect any slider to Algolia, the underlying attribute used must be holding numerical values.\r\n * @kind widget\r\n * @example\r\n *\r\n * // Here's an example showing how to connect the AirBnb Rheostat Slider to React InstantSearch\r\n * // using the range connector. ⚠️ This example only works with the version 2.x of Rheostat.\r\n\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Rheostat from 'rheostat';\r\nimport { connectRange } from 'react-instantsearch-dom';\r\n\r\nclass Range extends React.Component {\r\n  static propTypes = {\r\n    min: PropTypes.number,\r\n    max: PropTypes.number,\r\n    currentRefinement: PropTypes.object,\r\n    refine: PropTypes.func.isRequired,\r\n    canRefine: PropTypes.bool.isRequired\r\n  };\r\n\r\n  state = { currentValues: { min: this.props.min, max: this.props.max } };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.canRefine &&\r\n      (prevProps.currentRefinement.min !== this.props.currentRefinement.min ||\r\n        prevProps.currentRefinement.max !== this.props.currentRefinement.max)\r\n    ) {\r\n      this.setState({\r\n        currentValues: {\r\n          min: this.props.currentRefinement.min,\r\n          max: this.props.currentRefinement.max,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  onValuesUpdated = sliderState => {\r\n    this.setState({\r\n      currentValues: { min: sliderState.values[0], max: sliderState.values[1] }\r\n    });\r\n  };\r\n\r\n  onChange = sliderState => {\r\n    if (\r\n      this.props.currentRefinement.min !== sliderState.values[0] ||\r\n      this.props.currentRefinement.max !== sliderState.values[1]\r\n    ) {\r\n      this.props.refine({\r\n        min: sliderState.values[0],\r\n        max: sliderState.values[1]\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { min, max, currentRefinement } = this.props;\r\n    const { currentValues } = this.state;\r\n    return min !== max ? (\r\n      <div>\r\n        <Rheostat\r\n          className=\"ais-RangeSlider\"\r\n          min={min}\r\n          max={max}\r\n          values={[currentRefinement.min, currentRefinement.max]}\r\n          onChange={this.onChange}\r\n          onValuesUpdated={this.onValuesUpdated}\r\n        />\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <div>{currentValues.min}</div>\r\n          <div>{currentValues.max}</div>\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nconst ConnectedRange = connectRange(Range);\r\n*/\r\nvar _ref = /*#__PURE__*/React.createElement(\"div\", null, \"We do not provide any Slider, see the documentation to learn how to connect one easily:\", /*#__PURE__*/React.createElement(\"a\", {\r\n  target: \"_blank\",\r\n  rel: \"noopener noreferrer\",\r\n  href: \"https://www.algolia.com/doc/api-reference/widgets/range-slider/react/\"\r\n}, \"https://www.algolia.com/doc/api-reference/widgets/range-slider/react/\"));\r\nexport default (function () {\r\n  return _ref;\r\n});"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,IAAI,GAAG,aAAaD,KAAK,CAACE,aAAa,CAAC,KAAK,EAAE,IAAI,EAAE,yFAAyF,EAAE,aAAaF,KAAK,CAACE,aAAa,CAAC,GAAG,EAAE;EACxLC,MAAM,EAAE,QAAQ;EAChBC,GAAG,EAAE,qBAAqB;EAC1BC,IAAI,EAAE;AACR,CAAC,EAAE,uEAAuE,CAAC,CAAC;AAC5E,gBAAgB,YAAY;EAC1B,OAAOJ,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}