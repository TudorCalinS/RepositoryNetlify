{"ast":null,"code":"import React from 'react';\nimport { connectRefinementList } from 'react-instantsearch-core';\nimport PanelCallbackHandler from \"../components/PanelCallbackHandler.js\";\nimport RefinementList from \"../components/RefinementList.js\";\n\n/**\r\n * The RefinementList component displays a list that let the end user choose multiple values for a specific facet.\r\n * @name RefinementList\r\n * @kind widget\r\n * @propType {string} attribute - the name of the attribute in the record\r\n * @propType {boolean} [searchable=false] - true if the component should display an input to search for facet values. <br> In order to make this feature work, you need to make the attribute searchable [using the API](https://www.algolia.com/doc/guides/searching/faceting/?language=js#declaring-a-searchable-attribute-for-faceting) or [the dashboard](https://www.algolia.com/explorer/display/).\r\n * @propType {string} [operator=or] - How to apply the refinements. Possible values: 'or' or 'and'.\r\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\r\n * @propType {number} [limit=10] - the minimum number of displayed items\r\n * @propType {number} [showMoreLimit=20] - the maximum number of displayed items. Only used when showMore is set to `true`\r\n * @propType {string[]} [defaultRefinement] - the values of the items selected by default\r\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\r\n * @themeKey ais-RefinementList - the root div of the widget\r\n * @themeKey ais-RefinementList--noRefinement - the root div of the widget when there is no refinement\r\n * @themeKey ais-RefinementList-searchBox - the search box of the widget. See [the SearchBox documentation](widgets/SearchBox.html#classnames) for the classnames and translation keys of the SearchBox.\r\n * @themeKey ais-RefinementList-list - the list of refinement items\r\n * @themeKey ais-RefinementList-item - the refinement list item\r\n * @themeKey ais-RefinementList-item--selected - the refinement selected list item\r\n * @themeKey ais-RefinementList-label - the label of each refinement item\r\n * @themeKey ais-RefinementList-checkbox - the checkbox input of each refinement item\r\n * @themeKey ais-RefinementList-labelText - the label text of each refinement item\r\n * @themeKey ais-RefinementList-count - the count of values for each item\r\n * @themeKey ais-RefinementList-noResults - the div displayed when there are no results\r\n * @themeKey ais-RefinementList-showMore - the button used to display more categories\r\n * @themeKey ais-RefinementList-showMore--disabled - the disabled button used to display more categories\r\n * @translationkey showMore - The label of the show more button. Accepts one parameters, a boolean that is true if the values are expanded\r\n * @translationkey noResults - The label of the no results text when no search for facet values results are found.\r\n * @requirements The attribute passed to the `attribute` prop must be present in \"attributes for faceting\"\r\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\r\n *\r\n * If you are using the `searchable` prop, you'll also need to make the attribute searchable using\r\n * the [dashboard](https://www.algolia.com/explorer/display/) or using the [API](https://www.algolia.com/doc/guides/searching/faceting/#search-for-facet-values).\r\n * @example\r\n * import React from 'react';\r\n * import algoliasearch from 'algoliasearch/lite';\r\n * import { InstantSearch, RefinementList } from 'react-instantsearch-dom';\r\n *\r\n * const searchClient = algoliasearch(\r\n *   'latency',\r\n *   '6be0576ff61c053d5f9a3225e2a90f76'\r\n * );\r\n *\r\n * const App = () => (\r\n *   <InstantSearch\r\n *     searchClient={searchClient}\r\n *     indexName=\"instant_search\"\r\n *   >\r\n *     <RefinementList attribute=\"brand\" />\r\n *   </InstantSearch>\r\n * );\r\n */\n\nvar RefinementListWidget = function RefinementListWidget(props) {\n  return /*#__PURE__*/React.createElement(PanelCallbackHandler, props, /*#__PURE__*/React.createElement(RefinementList, props));\n};\nexport default connectRefinementList(RefinementListWidget, {\n  $$widgetType: 'ais.refinementList'\n});","map":{"version":3,"names":["React","connectRefinementList","PanelCallbackHandler","RefinementList","RefinementListWidget","props","createElement","$$widgetType"],"sources":["C:/Users/tudor/propr/RepositoryNetlify/node_modules/react-instantsearch-dom/dist/es/widgets/RefinementList.js"],"sourcesContent":["import React from 'react';\r\nimport { connectRefinementList } from 'react-instantsearch-core';\r\nimport PanelCallbackHandler from \"../components/PanelCallbackHandler.js\";\r\nimport RefinementList from \"../components/RefinementList.js\";\r\n\r\n/**\r\n * The RefinementList component displays a list that let the end user choose multiple values for a specific facet.\r\n * @name RefinementList\r\n * @kind widget\r\n * @propType {string} attribute - the name of the attribute in the record\r\n * @propType {boolean} [searchable=false] - true if the component should display an input to search for facet values. <br> In order to make this feature work, you need to make the attribute searchable [using the API](https://www.algolia.com/doc/guides/searching/faceting/?language=js#declaring-a-searchable-attribute-for-faceting) or [the dashboard](https://www.algolia.com/explorer/display/).\r\n * @propType {string} [operator=or] - How to apply the refinements. Possible values: 'or' or 'and'.\r\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\r\n * @propType {number} [limit=10] - the minimum number of displayed items\r\n * @propType {number} [showMoreLimit=20] - the maximum number of displayed items. Only used when showMore is set to `true`\r\n * @propType {string[]} [defaultRefinement] - the values of the items selected by default\r\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\r\n * @themeKey ais-RefinementList - the root div of the widget\r\n * @themeKey ais-RefinementList--noRefinement - the root div of the widget when there is no refinement\r\n * @themeKey ais-RefinementList-searchBox - the search box of the widget. See [the SearchBox documentation](widgets/SearchBox.html#classnames) for the classnames and translation keys of the SearchBox.\r\n * @themeKey ais-RefinementList-list - the list of refinement items\r\n * @themeKey ais-RefinementList-item - the refinement list item\r\n * @themeKey ais-RefinementList-item--selected - the refinement selected list item\r\n * @themeKey ais-RefinementList-label - the label of each refinement item\r\n * @themeKey ais-RefinementList-checkbox - the checkbox input of each refinement item\r\n * @themeKey ais-RefinementList-labelText - the label text of each refinement item\r\n * @themeKey ais-RefinementList-count - the count of values for each item\r\n * @themeKey ais-RefinementList-noResults - the div displayed when there are no results\r\n * @themeKey ais-RefinementList-showMore - the button used to display more categories\r\n * @themeKey ais-RefinementList-showMore--disabled - the disabled button used to display more categories\r\n * @translationkey showMore - The label of the show more button. Accepts one parameters, a boolean that is true if the values are expanded\r\n * @translationkey noResults - The label of the no results text when no search for facet values results are found.\r\n * @requirements The attribute passed to the `attribute` prop must be present in \"attributes for faceting\"\r\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\r\n *\r\n * If you are using the `searchable` prop, you'll also need to make the attribute searchable using\r\n * the [dashboard](https://www.algolia.com/explorer/display/) or using the [API](https://www.algolia.com/doc/guides/searching/faceting/#search-for-facet-values).\r\n * @example\r\n * import React from 'react';\r\n * import algoliasearch from 'algoliasearch/lite';\r\n * import { InstantSearch, RefinementList } from 'react-instantsearch-dom';\r\n *\r\n * const searchClient = algoliasearch(\r\n *   'latency',\r\n *   '6be0576ff61c053d5f9a3225e2a90f76'\r\n * );\r\n *\r\n * const App = () => (\r\n *   <InstantSearch\r\n *     searchClient={searchClient}\r\n *     indexName=\"instant_search\"\r\n *   >\r\n *     <RefinementList attribute=\"brand\" />\r\n *   </InstantSearch>\r\n * );\r\n */\r\n\r\nvar RefinementListWidget = function RefinementListWidget(props) {\r\n  return /*#__PURE__*/React.createElement(PanelCallbackHandler, props, /*#__PURE__*/React.createElement(RefinementList, props));\r\n};\r\nexport default connectRefinementList(RefinementListWidget, {\r\n  $$widgetType: 'ais.refinementList'\r\n});"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,qBAAqB,QAAQ,0BAA0B;AAChE,OAAOC,oBAAoB,MAAM,uCAAuC;AACxE,OAAOC,cAAc,MAAM,iCAAiC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,oBAAoB,GAAG,SAASA,oBAAoBA,CAACC,KAAK,EAAE;EAC9D,OAAO,aAAaL,KAAK,CAACM,aAAa,CAACJ,oBAAoB,EAAEG,KAAK,EAAE,aAAaL,KAAK,CAACM,aAAa,CAACH,cAAc,EAAEE,KAAK,CAAC,CAAC;AAC/H,CAAC;AACD,eAAeJ,qBAAqB,CAACG,oBAAoB,EAAE;EACzDG,YAAY,EAAE;AAChB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}